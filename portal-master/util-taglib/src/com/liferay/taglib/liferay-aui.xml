<?xml version="1.0"?>

<taglibs short-name="aui" tlib-version="1.0" uri="http://liferay.com/tld/aui">
	<authors>
		<author>Eduardo Lundgren</author>
		<author>Bruno Basto</author>
		<author>Nathan Cavanaugh</author>
		<author>Julio Camarero</author>
	</authors>
	<component bodyContent="true" name="A" writeJSP="false">
		<description>Creates an anchor (or link) that offers custom configuration and localization.</description>
		<attributes>
			<attribute>
				<description>A role for assistive technologies to interpret HTML elements that have been used for something other than their intended purpose. For example, the <![CDATA[<code>&lt;p&gt;</code>]]> tag could be used for something other than a paragraph.</description>
				<name>ariaRole</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A CSS class for styling the component.</description>
				<name>cssClass</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Miscellaneous data to be stored via a map. For example, the <![CDATA[<code>HashMap&lt;"class-name", foo&gt;</code>]]> would render as the attribute <![CDATA[<code>data-class-name = foo;</code>]]>.</description>
				<name>data</name>
				<inputType><![CDATA[java.util.Map<java.lang.String, java.lang.Object>]]></inputType>
				<outputType><![CDATA[java.util.Map<java.lang.String, java.lang.Object>]]></outputType>
			</attribute>
			<attribute>
				<description>A URL to navigate to when the link is clicked.</description>
				<name>href</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
				<required>true</required>
			</attribute>
			<attribute>
				<name>iconCssClass</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>An ID for the component instance.</description>
				<name>id</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Text for the anchor's label.</description>
				<name>label</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A language to associate with the anchor component, to assist search engines and web browsers in finding and rendering the anchor appropriately.</description>
				<name>lang</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Whether to translate the label's text into the user's language. The default value is <![CDATA[<code>true</code>]]>.</description>
				<name>localizeLabel</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
			</attribute>
			<attribute>
				<description>A function to be called on a user clicking the anchor.</description>
				<name>onClick</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A target window in which to open the URL. The default value is <![CDATA[<code>self</code>]]>. Possible values are <![CDATA[<code>blank</code>]]>, <![CDATA[<code>self</code>]]>, <![CDATA[<code>parent</code>]]>, <![CDATA[<code>top</code>]]>, and a unique frame's name.</description>
				<name>target</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A title for the anchor.</description>
				<name>title</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
		</attributes>
	</component>
	<component bodyContent="true" name="Alert">
		<attributes>
			<attribute>
				<name>animated</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>false</defaultValue>
			</attribute>
			<attribute>
				<name>closeable</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
			</attribute>
			<attribute>
				<name>cssClass</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>destroyOnHide</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>false</defaultValue>
			</attribute>
			<attribute>
				<name>duration</name>
				<inputType>java.lang.Object</inputType>
				<outputType>java.lang.Number</outputType>
				<defaultValue>0.15</defaultValue>
			</attribute>
			<attribute>
				<name>id</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>type</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
				<defaultValue>info</defaultValue>
			</attribute>
		</attributes>
	</component>
	<component alloyComponent="false" bodyContent="true" name="Button" writeStartJSP="false">
		<description>Creates a fully configurable button that offers portlet namespacing and custom icons.</description>
		<attributes>
			<attribute>
				<description>A CSS class for styling the component. These styles override the ones set by the <![CDATA[<code>primary</code>]]> attribute.</description>
				<name>cssClass</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Miscellaneous data to be stored via a map. For example, the <![CDATA[<code>HashMap&lt;"class-name", foo&gt;</code>]]> would render as the attribute <![CDATA[<code>data-class-name = foo;</code>]]>.</description>
				<name>data</name>
				<inputType>java.lang.Object</inputType>
				<outputType>java.util.Map</outputType>
			</attribute>
			<attribute>
				<description>Whether the component is disabled. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>disabled</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>A URL to navigate to when the button is clicked.</description>
				<name>href</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>An icon to display on the button based on the icon CSS class value given. Possible CSS class values can be found at <![CDATA[<a href="http://marcoceppi.github.io/bootstrap-glyphicons/">here</a>]]>.</description>
				<name>icon</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>An alignment for the button's icon. The default value is <![CDATA[<code>left</code>]]>.</description>
				<name>iconAlign</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
				<defaultValue>left</defaultValue>
			</attribute>
			<attribute>
				<description>An ID for the component instance.</description>
				<name>id</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A name for the button.</description>
				<name>name</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A function to be called on a user clicking the button.</description>
				<name>onClick</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Whether to apply the <![CDATA[<code>btn btn-primary</code>]]> CSS styling to the button. If the <![CDATA[<code>type</code>]]> attribute is set to <![CDATA[<code>submit</code>]]>, this value is set to <![CDATA[<code>true</code>]]>. For all the other types, the value is set to <![CDATA[<code>false</code>]]> by default.</description>
				<name>primary</name>
				<inputType>java.lang.Object</inputType>
				<outputType>java.lang.Object</outputType>
				<defaultValue>null</defaultValue>
			</attribute>
			<attribute>
				<description>The button's type. Possible values are <![CDATA[<code>button</code>]]>, <![CDATA[<code>submit</code>]]>, <![CDATA[<code>cancel</code>]]> and <![CDATA[<code>reset</code>]]>. The default value is <![CDATA[<code>button</code>]]>.</description>
				<name>type</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
				<defaultValue>button</defaultValue>
			</attribute>
			<attribute>
				<description>Whether to open a dialog window with the <![CDATA[<code>href</code>]]> location when a user clicks the button. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>useDialog</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>false</defaultValue>
			</attribute>
			<attribute>
				<description>Whether to use the default portlet namespace, to avoid name conflicts. The default value is <![CDATA[<code>true</code>]]>.</description>
				<name>useNamespace</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
			</attribute>
			<attribute>
				<description>Text to display on the button.</description>
				<name>value</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
		</attributes>
	</component>
	<component alloyComponent="false" bodyContent="true" name="ButtonRow" writeEndJSP="false">
		<description>Creates a button row <![CDATA[<code>&lt;div&gt;</code>]]> tag to wrap <![CDATA[<code>&lt;aui:button&gt;</code>]]> components and offer additional styling.</description>
		<attributes>
			<attribute>
				<description>A CSS class for styling the component.</description>
				<name>cssClass</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>An ID for the component instance.</description>
				<name>id</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
		</attributes>
	</component>
	<component bodyContent="true" name="Col">
		<description>Creates a column to display content in an <![CDATA[<code>&lt;aui:row&gt;</code>]]> component.</description>
		<attributes>
			<attribute>
				<description>A CSS class for styling the component.</description>
				<name>cssClass</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>An ID for the component instance.</description>
				<name>id</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>lg</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>md</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>sm</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>The width of the column in the containing row as a fraction of <![CDATA[<code>12</code>]]>. For example, a span of <![CDATA[<code>4</code>]]> would result in a column width <![CDATA[<code>4/12</code>]]> (or <![CDATA[<code>1/3</code>]]>) of the total width of the containing row.</description>
				<name>span</name>
				<inputType>int</inputType>
				<outputType>int</outputType>
				<defaultValue>12</defaultValue>
			</attribute>
			<attribute>
				<description>The width of the column in the containing row as a percentage, overriding the <![CDATA[<code>span</code>]]> attribute. The width is then converted to a span expressed as <![CDATA[<code>((width/100) x 12)</code>]]>, rounded to the nearest whole number. For example, a width of <![CDATA[<code>33</code>]]> would be converted to <![CDATA[<code>3.96</code>]]>, which would be rounded up to a span value of <![CDATA[<code>4</code>]]>.</description>
				<name>width</name>
				<inputType>int</inputType>
				<outputType>int</outputType>
			</attribute>
			<attribute>
				<name>xs</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
		</attributes>
	</component>
	<component name="Component">
		<attributes>
			<attribute>
				<name>defineVar</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
				<writeInJSP>false</writeInJSP>
			</attribute>
			<attribute>
				<name>excludeAttributes</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>javaScriptAttributes</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>module</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>name</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>options</name>
				<inputType><![CDATA[java.util.Map<java.lang.String, java.lang.Object>]]></inputType>
				<outputType><![CDATA[java.util.Map<java.lang.String, java.lang.Object>]]></outputType>
			</attribute>
			<attribute>
				<name>scriptPosition</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>tagPageContext</name>
				<inputType>javax.servlet.jsp.JspContext</inputType>
				<outputType>javax.servlet.jsp.JspContext</outputType>
				<required>true</required>
			</attribute>
			<attribute>
				<name>useJavaScript</name>
				<inputType>java.io.Serializable</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
			</attribute>
			<attribute>
				<name>var</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
		</attributes>
	</component>
	<component bodyContent="true" name="Container">
		<description>Creates a container <![CDATA[<code>&lt;div&gt;</code>]]> tag to wrap <![CDATA[<code>&lt;aui:row&gt;</code>]]> components and offer additional styling.</description>
		<attributes>
			<attribute>
				<description>A CSS class for styling the component.</description>
				<name>cssClass</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Whether to enable the container to span the entire width of the viewport. The default value is <![CDATA[<code>true</code>]]>.</description>
				<name>fluid</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
			</attribute>
			<attribute>
				<description>An ID for the component instance.</description>
				<name>id</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
		</attributes>
	</component>
	<component bodyContent="true" dynamicAttributes="false" name="FieldWrapper">
		<description>Creates a <![CDATA[<code>&lt;div&gt;</code>]]> tag to wrap form fields and offer additional styling.</description>
		<attributes>
			<attribute>
				<description>A CSS class for styling the component.</description>
				<name>cssClass</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Miscellaneous data to be stored via a map. For example, the <![CDATA[<code>HashMap&lt;"class-name", foo&gt;</code>]]> would render as the attribute <![CDATA[<code>data-class-name = foo;</code>]]>.</description>
				<name>data</name>
				<inputType>java.lang.Object</inputType>
				<outputType>java.util.Map</outputType>
			</attribute>
			<attribute>
				<description>Whether the wrapper should be the first element of the form. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>first</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>Text to display as a help tooltip on mouse over of the component's help icon.</description>
				<name>helpMessage</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Whether to make this field inline with the next element. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>inlineField</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>The alignment for the label's text. Possible values are <![CDATA[<code>right</code>]]> and <![CDATA[<code>left</code>]]>.</description>
				<name>inlineLabel</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Text for the wrapper's label.</description>
				<name>label</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Whether the wrapper should be the last element of the form. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>last</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>Whether to translate the label's text into the user's language. The default value is <![CDATA[<code>true</code>]]>.</description>
				<name>localizeLabel</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
			</attribute>
			<attribute>
				<description>A name for the field wrapper.</description>
				<name>name</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Whether to mark the wrapped fields as required.</description>
				<name>required</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
		</attributes>
	</component>
	<component bodyContent="true" name="Fieldset">
		<description>Creates a <![CDATA[<code>&lt;div&gt;</code>]]> tag to group related form elements and offer additional styling.</description>
		<attributes>
			<attribute>
				<name>collapsed</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<name>collapsible</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>Whether to display the field set as a column instead of a row.</description>
				<name>column</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>A CSS class for styling the component.</description>
				<name>cssClass</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Text to display as a help tooltip on mouse over of the component's help icon.</description>
				<name>helpMessage</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>An ID for the component instance.</description>
				<name>id</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Text for the field set's label and renders it as a legend, with a horizontal rule, above the fieldset.</description>
				<name>label</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Sets whether to translate the label's text into the user's language. The default value is <![CDATA[<code>true</code>]]>.</description>
				<name>localizeLabel</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
			</attribute>
			<attribute>
				<name>markupView</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
		</attributes>
	</component>
	<component bodyContent="true" name="FieldsetGroup">
		<description>Creates a <![CDATA[<code>&lt;div&gt;</code>]]> tag to group fieldset elements and offer additional styling.</description>
		<attributes>
			<attribute>
				<name>markupView</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
		</attributes>
	</component>
	<component bodyContent="true" name="Form">
		<description>Creates a form that offers additional styling and custom namespacing.</description>
		<attributes>
			<attribute>
				<description>Where to send the form data when the form is submitted.</description>
				<name>action</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A CSS class for styling the component.</description>
				<name>cssClass</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Whether to escape the XML of the form's action URL. The default value is <![CDATA[<code>true</code>]]>.</description>
				<name>escapeXml</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
				<writeInJSP>false</writeInJSP>
			</attribute>
			<attribute>
				<description>Whether to align the form's labels. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>inlineLabels</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>The method to send the form data. The default value is <![CDATA[<code>post</code>]]>. Possible values are <![CDATA[<code>get</code>]]> and <![CDATA[<code>post</code>]]>.</description>
				<name>method</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
				<defaultValue>post</defaultValue>
			</attribute>
			<attribute>
				<description>A name for the form that is also used for the ID of the component instance. The default value is <![CDATA[<code>fm</code>]]>.</description>
				<name>name</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
				<defaultValue>fm</defaultValue>
			</attribute>
			<attribute>
				<description>A function to be called on submitting the form.</description>
				<name>onSubmit</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A namespace for the form and its elements. This attribute lets you set a namespace value that differs from the default portlet namespace.</description>
				<name>portletNamespace</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Whether to use the default portlet namespace, to avoid name conflicts. The default value is <![CDATA[<code>true</code>]]>.</description>
				<name>useNamespace</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
			</attribute>
		</attributes>
	</component>
	<component name="Icon">
		<description>Creates a customizable icon that can leverage Bootstrap CSS icon classes.</description>
		<attributes>
			<attribute>
				<description>A class to give to the container of the icon, to provide an implementation for the icon. Note that the preferred method of setting the icon's image is via the <![CDATA[<code>image</code>]]> attribute.</description>
				<name>cssClass</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Miscellaneous data to be stored via a map. For example, the <![CDATA[<code>HashMap&lt;"class-name", foo&gt;</code>]]> would render as the attribute <![CDATA[<code>data-class-name = foo;</code>]]>.</description>
				<name>data</name>
				<inputType><![CDATA[java.util.Map<java.lang.String, java.lang.Object>]]></inputType>
				<outputType><![CDATA[java.util.Map<java.lang.String, java.lang.Object>]]></outputType>
			</attribute>
			<attribute>
				<description>An ID for the component instance.</description>
				<name>id</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>The image to display for the icon. Values are taken from the suffix of the Bootstrap icon CSS classes. For example, to display the edit icon you would reference the <![CDATA[<code>icon-edit</code>]]> CSS class by setting the value <![CDATA[<code>edit</code>]]>. If an icon image is referenced for <![CDATA[<code>cssClass</code>]]> and <![CDATA[<code>image</code>]]>, both icons are shown in the component.</description>
				<name>image</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Text to display alongside the icon.</description>
				<name>label</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>markupView</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>src</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>The target window in which the URL is opened. The default value is <![CDATA[<code>self</code>]]>. Possible values are <![CDATA[<code>blank</code>]]>, <![CDATA[<code>self</code>]]>, <![CDATA[<code>parent</code>]]>, <![CDATA[<code>top</code>]]>, and a unique frame's name.</description>
				<name>target</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A URL navigated to when the icon is clicked.</description>
				<name>url</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
		</attributes>
	</component>
	<component name="Input" parentClass="com.liferay.taglib.BaseValidatorTagSupport">
		<description>Creates a configurable input component.</description>
		<attributes>
			<attribute>
				<description>Whether to focus on the input component by default.</description>
				<name>autoFocus</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>Whether to autosize the input component.</description>
				<name>autoSize</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>A bean to associate with the input component.</description>
				<name>bean</name>
				<inputType>java.lang.Object</inputType>
				<outputType>java.lang.Object</outputType>
			</attribute>
			<attribute>
				<description>Whether to reload the page when the value of the input changes. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>changesContext</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>Whether to select the input. Note that this attribute is only enabled when <![CDATA[<code>type</code>]]> is <![CDATA[<code>radio</code>]]> or <![CDATA[<code>checkbox</code>]]>.</description>.
				<name>checked</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>The primary key for the instance of the class. The default value is <![CDATA[<code>0</code>]]>.</description>
				<name>classPK</name>
				<inputType>long</inputType>
				<outputType>long</outputType>
			</attribute>
			<attribute>
				<description>The primary key for the class type. The default value is <![CDATA[<code>-1</code>]]>.</description>
				<name>classTypePK</name>
				<inputType>long</inputType>
				<outputType>long</outputType>
				<defaultValue>-1</defaultValue>
			</attribute>
			<attribute>
				<description>A CSS class for styling the component.</description>
				<name>cssClass</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Miscellaneous data to be stored via a map. For example, the <![CDATA[<code>HashMap&lt;"class-name", foo&gt;</code>]]> would render as the attribute <![CDATA[<code>data-class-name = foo;</code>]]>.</description>
				<name>data</name>
				<inputType>java.lang.Object</inputType>
				<outputType>java.util.Map</outputType>
			</attribute>
			<attribute>
				<name>dateTogglerCheckboxLabel</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>The default language ID for the component.</description>
				<name>defaultLanguageId</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Whether the component is disabled. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>disabled</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<name>field</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A variable name to refer to the <![CDATA[<code>field</code>]]> of the component.</description>
				<name>fieldParam</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Whether the input component should be the first element of the form.</description>
				<name>first</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>A name for the form.</description>
				<name>formName</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Text to display as a help tooltip on mouse over of the component's help icon.</description>
				<name>helpMessage</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A CSS class for styling the help message text. The default value is <![CDATA[<code>input-group-addon</code>]]>.</description>
				<name>helpTextCssClass</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
				<defaultValue>input-group-addon</defaultValue>
			</attribute>
			<attribute>
				<description>An ID for the component instance.</description>
				<name>id</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Whether to ignore the value saved from the request object. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>ignoreRequestValue</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>Whether to align the input's field with the next element in the form. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>inlineField</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>The input label's text alignment. Possible values are <![CDATA[<code>right</code>]]> and <![CDATA[<code>left</code>]]>.</description>
				<name>inlineLabel</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A label for the input component. If not assigned a value, the label is automatically taken from the <![CDATA[<code>name</code>]]> attribute's value.</description>
				<name>label</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Whether to translate the label's text into the user's language. The default value is <![CDATA[<code>true</code>]]>.</description>
				<name>localizeLabel</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
			</attribute>
			<attribute>
				<name>languageId</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Whether the component should be the last element of the form.</description>
				<name>last</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>Whether to translate the component's text features into the user's language. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>localized</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>The maximum value for the input if its <![CDATA[<code>type</code>]]> is <![CDATA[<code>number</code>]]> or <![CDATA[<code>range</code>]]>. Note that the max value is inclusive if the input's <![CDATA[<code>type</code>]]> is <![CDATA[<code>range</code>]]>.</description>
				<name>max</name>
				<inputType>java.lang.Object</inputType>
				<outputType>java.lang.Number</outputType>
				<defaultValue>null</defaultValue>
			</attribute>
			<attribute>
				<description>A class for the bean object.</description>
				<name>model</name>
				<inputType><![CDATA[java.lang.Class<?>]]></inputType>
				<outputType><![CDATA[java.lang.Class<?>]]></outputType>
			</attribute>
			<attribute>
				<description>The minimum value for the input if its <![CDATA[<code>type</code>]]> is <![CDATA[<code>number</code>]]> or <![CDATA[<code>range</code>]]>. Note that the min value is inclusive if the input's <![CDATA[<code>type</code>]]> is <![CDATA[<code>range</code>]]>.</description>
				<name>min</name>
				<inputType>java.lang.Object</inputType>
				<outputType>java.lang.Number</outputType>
				<defaultValue>null</defaultValue>
			</attribute>
			<attribute>
				<name>multiple</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>A name for the component.</description>
				<name>name</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
				<required>true</required>
			</attribute>
			<attribute>
				<description>A function to be called when the input's value changes.</description>
				<name>onChange</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A function to be called on a user clicking the input.</description>
				<name>onClick</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Placeholder text for the input's field.</description>
				<name>placeholder</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Text to display before the input.</description>
				<name>prefix</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Whether to mark the input as required.</description>
				<name>required</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>Whether to make the input's field resizeable, if the input is of type <![CDATA[<code>textarea</code>]]>.</description>
				<name>resizable</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>Whether to show the input's required label, if an input value is required.</description>
				<name>showRequiredLabel</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
			</attribute>
			<attribute>
				<description>Text to display after the input.</description>
				<name>suffix</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A title for the input.</description>
				<name>title</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>The input's type. Possible values are <![CDATA[<code>text</code>]]>, <![CDATA[<code>hidden</code>]]>, <![CDATA[<code>assetCategories</code>]]>, <![CDATA[<code>assetTags</code>]]>, <![CDATA[<code>textarea</code>]]>, <![CDATA[<code>timeZone</code>]]>, <![CDATA[<code>password</code>]]>, <![CDATA[<code>checkbox</code>]]>, <![CDATA[<code>radio</code>]]>, <![CDATA[<code>submit</code>]]>, <![CDATA[<code>button</code>]]>, <![CDATA[<code>color</code>]]>, <![CDATA[<code>email</code>]]>, <![CDATA[<code>number</code>]]>, <![CDATA[<code>range</code>]]>, <![CDATA[<code>resource</code>]]>, <![CDATA[<code>url</code>]]>, and an empty value. If an empty value or no value is set, the input's type is obtained automatically from the input component's bean.</description>
				<name>type</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Whether to use the default portlet namespace, to avoid name conflicts. The default value is <![CDATA[<code>true</code>]]>.</description>
				<name>useNamespace</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
			</attribute>
			<attribute>
				<description>A value for the input.</description>
				<name>value</name>
				<inputType>java.lang.Object</inputType>
				<outputType>java.lang.Object</outputType>
			</attribute>
			<attribute>
				<description>Whether to wrap the input component in a <![CDATA[<code>div</code>]]>, that can be styled. The default value is <![CDATA[<code>false</code>]]>. If the <![CDATA[<code>wrapperCssClass</code>]]> attribute is configured, the value is set automatically to <![CDATA[<code>true</code>]]>.</description>
				<name>wrappedField</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>false</defaultValue>
			</attribute>
			<attribute>
				<description>A CSS class for styling the <![CDATA[<code>div</code>]]> that wraps the input component.</description>
				<name>wrapperCssClass</name>
				<required>false</required>
				<rtexprvalue>true</rtexprvalue>
				<type>java.lang.String</type>
			</attribute>
		</attributes>
	</component>
	<component dynamicAttributes="false" name="ModelContext" writeJSP="false">
		<description>Creates a configurable model context object that can be used as a model for other components.</description>
		<attributes>
			<attribute>
				<description>A bean associated with the model object.</description>
				<name>bean</name>
				<inputType>java.lang.Object</inputType>
				<outputType>java.lang.Object</outputType>
			</attribute>
			<attribute>
				<description>The default language ID for the component.</description>
				<name>defaultLanguageId</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A class for the bean object.</description>
				<name>model</name>
				<inputType><![CDATA[java.lang.Class<?>]]></inputType>
				<outputType><![CDATA[java.lang.Class<?>]]></outputType>
			</attribute>
		</attributes>
	</component>
	<component bodyContent="false" name="Nav">
		<description>Creates a navigation wrapper component to hold <![CDATA[<code>&lt;nav:item&gt;</code>]]> components for an <![CDATA[<code>&lt;aui:nav-bar&gt;</code>]]> component.</description>
		<attributes>
			<attribute>
				<description>A name for the navigation component for assistive technologies to interpret.</description>
				<name>ariaLabel</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A role for assistive technologies to interpret HTML elements that have been used for something other than their intended purpose. For example, the <![CDATA[<code>&lt;p&gt;</code>]]> tag could be used for something other than a paragraph.</description>
				<name>ariaRole</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>collapsible</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>A CSS class for styling the component.</description>
				<name>cssClass</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>icon</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>An ID for the component instance.</description>
				<name>id</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A search container for the navigation component to use.</description>
				<name>searchContainer</name>
				<inputType><![CDATA[com.liferay.portal.kernel.dao.search.SearchContainer<?>]]></inputType>
				<outputType><![CDATA[com.liferay.portal.kernel.dao.search.SearchContainer<?>]]></outputType>
			</attribute>
			<attribute>
				<description>Whether to use the default portlet namespace, to avoid name conflicts. The default value is <![CDATA[<code>true</code>]]>.</description>
				<name>useNamespace</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
			</attribute>
		</attributes>
	</component>
	<component bodyContent="false" name="NavBar">
		<description>Creates a navigation bar to house navigation components.</description>
		<attributes>
			<attribute>
				<description>A CSS class for styling the component.</description>
				<name>cssClass</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Miscellaneous data to be stored via a map. For example, the <![CDATA[<code>HashMap&lt;"class-name", foo&gt;</code>]]> would render as the attribute <![CDATA[<code>data-class-name = foo;</code>]]>.</description>
				<name>data</name>
				<inputType>java.lang.Object</inputType>
				<outputType>java.util.Map</outputType>
			</attribute>
			<attribute>
				<description>An ID for the component instance.</description>
				<name>id</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>markupView</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
		</attributes>
	</component>
	<component bodyContent="true" name="NavBarSearch">
		<description>Creates a search component for an <![CDATA[<code>&lt;aui:nav-bar&gt;</code>]]> component.</description>
		<attributes>
			<attribute>
				<description>A CSS class for styling the component.</description>
				<name>cssClass</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>An ID for the component instance.</description>
				<name>id</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>file</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A search container for the navigation bar to use.</description>
				<name>searchContainer</name>
				<inputType><![CDATA[com.liferay.portal.kernel.dao.search.SearchContainer<?>]]></inputType>
				<outputType><![CDATA[com.liferay.portal.kernel.dao.search.SearchContainer<?>]]></outputType>
			</attribute>
		</attributes>
	</component>
	<component bodyContent="true" name="NavItem" writeStartJSP="false">
		<description>Creates a navigation item for using in an <![CDATA[<code>&lt;aui:nav&gt;</code>]]> component.</description>
		<attributes>
			<attribute>
				<description>A CSS class for styling the link set in the <![CDATA[<code>href</code>]]> attribute.</description>
				<name>anchorCssClass</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Miscellaneous data to be stored via a map. For example, the <![CDATA[<code>HashMap&lt;"class-name", foo&gt;</code>]]> would render as the attribute <![CDATA[<code>data-class-name = foo;</code>]]>.</description>
				<name>anchorData</name>
				<inputType>java.lang.Object</inputType>
				<outputType>java.util.Map</outputType>
			</attribute>
			<attribute>
				<description>An ID for the instance of the navigation item's link, set in the <![CDATA[<code>href</code>]]> attribute.</description>
				<name>anchorId</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A name for the navigation item for assistive technologies to interpret.</description>
				<name>ariaLabel</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A role for assistive technologies to interpret HTML elements that have been used for something other than their intended purpose. For example, the <![CDATA[<code>&lt;p&gt;</code>]]> tag could be used for something other than a paragraph.</description>
				<name>ariaRole</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A CSS class for styling the component.</description>
				<name>cssClass</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Miscellaneous data to be stored via a map. For example, the <![CDATA[<code>HashMap&lt;"class-name", foo&gt;</code>]]> would render as the attribute <![CDATA[<code>data-class-name = foo;</code>]]>.</description>
				<name>data</name>
				<inputType>java.lang.Object</inputType>
				<outputType>java.util.Map</outputType>
			</attribute>
			<attribute>
				<description>Whether the navigation item is a dropdown menu. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>dropdown</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>A URL navigated to when the navigation item is clicked.</description>
				<name>href</name>
				<inputType>java.lang.Object</inputType>
				<outputType>java.lang.String</outputType>
				<defaultValue>javascript:void(0);</defaultValue>
			</attribute>
			<attribute>
				<description>A CSS class for styling the navigation item's icon.</description>
				<name>iconCssClass</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>iconSrc</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>An ID for the component instance.</description>
				<name>id</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Text to display for the navigation item.</description>
				<name>label</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Whether to translate the label's text into the user's language. The default value is <![CDATA[<code>true</code>]]>.</description>
				<name>localizeLabel</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
			</attribute>
			<attribute>
				<description>Whether the navigation item is selected by default. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>selected</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<name>state</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>target</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Sets the navigation item's title.</description>
				<name>title</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>toggle</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<name>toggleTouch</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
			</attribute>
			<attribute>
				<description>Whether to open a dialog window with the <![CDATA[<code>href</code>]]> location when a user clicks the navigation item. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>useDialog</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>false</defaultValue>
			</attribute>
			<attribute>
				<description>Whether to wrap the navigation item's dropdown menu in an unordered list with the <![CDATA[<code>drop-down-menu</code>]]> class. The default value is <![CDATA[<code>true</code>]]>.</description>
				<name>wrapDropDownMenu</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
			</attribute>
		</attributes>
	</component>
	<component bodyContent="true" name="Option" writeEndJSP="false">
		<description>Creates an option component for using in an <![CDATA[<code>&lt;aui:select&gt;</code>]]> component.</description>
		<attributes>
			<attribute>
				<description>A CSS class for styling the component.</description>
				<name>cssClass</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Miscellaneous data to be stored via a map. For example, the <![CDATA[<code>HashMap&lt;"class-name", foo&gt;</code>]]> would render as the attribute <![CDATA[<code>data-class-name = foo;</code>]]>.</description>
				<name>data</name>
				<inputType><![CDATA[java.util.Map<java.lang.String, java.lang.Object>]]></inputType>
				<outputType><![CDATA[java.util.Map<java.lang.String, java.lang.Object>]]></outputType>
			</attribute>
			<attribute>
				<description>Whether the component is disabled. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>disabled</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>Text to display as the option in the select form.</description>
				<name>label</name>
				<inputType>java.lang.Object</inputType>
				<outputType>java.lang.Object</outputType>
			</attribute>
			<attribute>
				<description>Whether to translate the label's text into the user's language. The default value is <![CDATA[<code>true</code>]]>.</description>
				<name>localizeLabel</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
			</attribute>
			<attribute>
				<description>Whether the option is selected when the component loads. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>selected</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>Styling for the option component. For example, to align the text to the right you would specify <![CDATA[<code>text-align:right;</code>]]>.</description>
				<name>style</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>useModelValue</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
				<writeInJSP>false</writeInJSP>
			</attribute>
			<attribute>
				<description>A value for the option. If no value is given, the value is taken from the <![CDATA[<code>label</code>]]> attribute.</description>
				<name>value</name>
				<inputType>java.lang.Object</inputType>
				<outputType>java.lang.Object</outputType>
			</attribute>
		</attributes>
	</component>
	<component bodyContent="true" dynamicAttributes="false" name="Panel">
		<attributes>
			<attribute>
				<name>collapsed</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<name>collapsible</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<name>id</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>label</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>localizeLabel</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
			</attribute>
		</attributes>
	</component>
	<component bodyContent="true" name="Row">
		<description>Creates a row to hold <![CDATA[<code>&lt;aui:col&gt;</code>]]> components.</description>
		<attributes>
			<attribute>
				<description>A CSS class for styling the component.</description>
				<name>cssClass</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>An ID for the component instance.</description>
				<name>id</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
		</attributes>
	</component>
	<component dynamicAttributes="false" name="Script" parentClass="com.liferay.taglib.util.PositionTagSupport" writeJSP="false">
		<description>Creates a script component in which to write JavaScript that facilitates using AlloyUI modules.</description>
		<attributes>
			<attribute>
				<description>A position for the script.</description>
				<name>position</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
				<gettable>false</gettable>
				<settable>false</settable>
			</attribute>
			<attribute>
				<name>sandbox</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>false</defaultValue>
			</attribute>
			<attribute>
				<name>require</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>AlloyUI modules to be used in the script. Names of multiple modules must be separated by commas.</description>
				<name>use</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
		</attributes>
	</component>
	<component bodyContent="true" name="Select">
		<description>Creates a select field (or combo box) for holding <![CDATA[<code>&lt;aui:option&gt;</code>]]> components.</description>
		<attributes>
			<attribute>
				<description>A bean associated with the select component.</description>
				<name>bean</name>
				<inputType>java.lang.Object</inputType>
				<outputType>java.lang.Object</outputType>
			</attribute>
			<attribute>
				<description>Whether to reload the page when the value of the field changes. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>changesContext</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>A CSS class for styling the component.</description>
				<name>cssClass</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Miscellaneous data to be stored via a map. For example, the <![CDATA[<code>HashMap&lt;"class-name", "foo"&gt;</code>]]> would render as the attribute <![CDATA[<code>data-class-name = "foo";</code>]]>.</description>
				<name>data</name>
				<inputType><![CDATA[java.util.Map<java.lang.String, java.lang.Object>]]></inputType>
				<outputType><![CDATA[java.util.Map<java.lang.String, java.lang.Object>]]></outputType>
			</attribute>
			<attribute>
				<description>Whether the component is disabled. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>disabled</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>Whether the component should be the first element of the form. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>first</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>Text to display as a help tooltip on mouse over of the component's help icon.</description>
				<name>helpMessage</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>An ID for the component instance.</description>
				<name>id</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>ignoreRequestValue</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>Whether to align the select field with the next element in the form. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>inlineField</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>An alignment for the label's text. Possible values are <![CDATA[<code>right</code>]]> and <![CDATA[<code>left</code>]]>.</description>
				<name>inlineLabel</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A label for the select field that is displayed above the field.</description>
				<name>label</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Whether the component should be the last element in the form. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>last</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>A list type in which to automatically generate the options. Possible values can be found in <![CDATA[<code>ListTypeImpl.java</code>]]>.</description>
				<name>listType</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>listTypeFieldName</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Whether to translate the label's text into the user's language. The default value is <![CDATA[<code>true</code>]]>.</description>
				<name>localizeLabel</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
			</attribute>
			<attribute>
				<description>Whether multiple options can be selected. If set to <![CDATA[<code>true</code>]]>, the select field expands to allow for multiple selections. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>multiple</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>A name for the select field. Note that this value overrides the <![CDATA[<code>label</code>]]> attribute and takes the place of the label.</description>
				<name>name</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
				<required>true</required>
			</attribute>
			<attribute>
				<description>A function to be called when the select field's value changes.</description>
				<name>onChange</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A function to be called on users clicking the select field.</description>
				<name>onClick</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Text to display before the select field.</description>
				<name>prefix</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Whether to mark the select field as required. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>required</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>Whether to display an empty option as a placeholder. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>showEmptyOption</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
			<attribute>
				<description>Whether to display the required label above the select field. Note that this attribute is only active if the <![CDATA[<code>required</code>]]> attribute is set to <![CDATA[<code>true</code>]]>. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>showRequiredLabel</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
			</attribute>
			<attribute>
				<description>Text to display after the select field.</description>
				<name>suffix</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A title for the select field.</description>
				<name>title</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Whether to use the default portlet namespace, to avoid name conflicts. The default value is <![CDATA[<code>true</code>]]>.</description>
				<name>useNamespace</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
			</attribute>
			<attribute>
				<name>value</name>
				<inputType>java.lang.Object</inputType>
				<outputType>java.lang.Object</outputType>
			</attribute>
			<attribute>
				<description>A CSS class for styling the <![CDATA[<code>div</code>]]> that wraps the select field.</description>
				<name>wrapperCssClass</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
		</attributes>
	</component>
	<component dynamicAttributes="false" name="Spacer" parentClass="com.liferay.taglib.TagSupport" writeBaseClass="false" writeJSP="false">
		<description>Creates a spacer component that enables JSP 2.1 server-side trimming of white spaces.</description>
	</component>
	<component dynamicAttributes="false" name="TranslationManager">
		<description>Creates a UI component for managing translation of associated content.</description>
		<attributes>
			<attribute>
				<description>Available locales of translation languages from which to choose.</description>
				<name>availableLocales</name>
				<inputType>java.util.Locale[]</inputType>
				<outputType>java.util.Locale[]</outputType>
			</attribute>
			<attribute>
				<description>Whether to make the translation manager default language changeable. The default value is <![CDATA[<code>true</code>]]>.</description>
				<name>changeableDefaultLanguage</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
			</attribute>
			<attribute>
				<description>The language ID to which the translation manager defaults when no other translations are available in the user's language.</description>
				<name>defaultLanguageId</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>editingLanguageId</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>An ID for the component instance.</description>
				<name>id</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>Whether to activate the translation manager. The default value is <![CDATA[<code>true</code>]]>. If this is set to <![CDATA[<code>false</code>]]>, the translation manager will not work entirely.</description>
				<name>initialize</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
				<defaultValue>true</defaultValue>
			</attribute>
			<attribute>
				<description>Whether to make the translation manager read-only for the user. The default value is <![CDATA[<code>false</code>]]>.</description>
				<name>readOnly</name>
				<inputType>boolean</inputType>
				<outputType>boolean</outputType>
			</attribute>
		</attributes>
	</component>
	<component className="ValidatorTagImpl" dynamicAttributes="false" name="Validator" parentClass="com.liferay.taglib.BaseBodyTagSupport" writeJSP="false">
		<description>Creates a component to validate input fields.</description>
		<attributes>
			<attribute>
				<description>A custom error message to replace the default validation error message.</description>
				<name>errorMessage</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>The type of validation for the input field. Possible values are <![CDATA[<code>acceptFiles</code>]]>, <![CDATA[<code>alpha</code>]]>, <![CDATA[<code>alphanum</code>]]>, <![CDATA[<code>date</code>]]>, <![CDATA[<code>digits</code>]]>, <![CDATA[<code>email</code>]]>, <![CDATA[<code>equalTo</code>]]>, <![CDATA[<code>iri</code>]]>, <![CDATA[<code>max</code>]]>, <![CDATA[<code>maxLength</code>]]>, <![CDATA[<code>min</code>]]>, <![CDATA[<code>minLength</code>]]>, <![CDATA[<code>number</code>]]>, <![CDATA[<code>required</code>]]>, and <![CDATA[<code>url</code>]]>.</description>
				<name>name</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
				<required>true</required>
			</attribute>
		</attributes>
	</component>
	<component dynamicAttributes="false" name="WorkflowStatus">
		<description>Creates a UI component that displays the current status of its associated workflow.</description>
		<attributes>
			<attribute>
				<description>A bean associated with the workflow status component.</description>
				<name>bean</name>
				<inputType>java.lang.Object</inputType>
				<outputType>java.lang.Object</outputType>
			</attribute>
			<attribute>
				<description>Text to display as a help tooltip on mouse over of the component's help icon.</description>
				<name>helpMessage</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>An ID for the component instance.</description>
				<name>id</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<name>markupView</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A class for the bean object.</description>
				<name>model</name>
				<inputType><![CDATA[java.lang.Class<?>]]></inputType>
				<outputType><![CDATA[java.lang.Class<?>]]></outputType>
			</attribute>
			<attribute>
				<name>showHelpMessage</name>
				<required>false</required>
				<rtexprvalue>true</rtexprvalue>
				<type>boolean</type>
				<defaultValue>true</defaultValue>
			</attribute>
			<attribute>
				<description>Whether to show the workflow status icon. The default value is <![CDATA[<code>true</code>]]>.</description>
				<name>showIcon</name>
				<required>false</required>
				<rtexprvalue>true</rtexprvalue>
				<type>boolean</type>
				<defaultValue>true</defaultValue>
			</attribute>
			<attribute>
				<description>Whether to show the status label. The default value is <![CDATA[<code>true</code>]]>.</description>
				<name>showLabel</name>
				<required>false</required>
				<rtexprvalue>true</rtexprvalue>
				<type>boolean</type>
				<defaultValue>true</defaultValue>
			</attribute>
			<attribute>
				<description>A workflow status. Possible values are <![CDATA[<code>0</code>]]> (Approved), <![CDATA[<code>1</code>]]> (Pending), <![CDATA[<code>2</code>]]> (Draft), <![CDATA[<code>3</code>]]> (Expired), <![CDATA[<code>4</code>]]> (Denied), <![CDATA[<code>5</code>]]> (Inactive), <![CDATA[<code>6</code>]]> (Incomplete), <![CDATA[<code>7</code>]]> (Scheduled), and <![CDATA[<code>8</code>]]> (In-Trash). Any other value defaults to status (Any).</description>
				<name>status</name>
				<inputType>java.lang.Integer</inputType>
				<outputType>java.lang.Integer</outputType>
			</attribute>
			<attribute>
				<description>A workflow status message that overrides the existing one.</description>
				<name>statusMessage</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
			<attribute>
				<description>A version for the workflow status that is displayed in a label next to the workflow status.</description>
				<name>version</name>
				<inputType>java.lang.String</inputType>
				<outputType>java.lang.String</outputType>
			</attribute>
		</attributes>
	</component>
</taglibs>
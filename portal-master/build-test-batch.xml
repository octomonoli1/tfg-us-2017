<?xml version="1.0"?>

<project basedir="." name="portal-test-batch" xmlns:antelope="antlib:ise.antelope.tasks" xmlns:if="ant:if" xmlns:unless="ant:unless">
	<import file="build-test.xml" />

	<condition else="0" property="axis.variable" value="${env.AXIS_VARIABLE}">
		<isset property="env.AXIS_VARIABLE" />
	</condition>

	<macrodef name="check-deprecated-method">
		<sequential>
			<if>
				<and>
					<available file="javac.output.txt" />
					<isset property="env.TOP_LEVEL_SHARED_DIR" />
				</and>
				<then>
					<copy file="javac.output.txt" tofile="${env.TOP_LEVEL_SHARED_DIR}/javac.output.txt" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="check-jenkins-console">
		<sequential>
			<if>
				<isset property="env.BUILD_URL" />
				<then>
					<var name="tstamp.value" unset="true" />

					<tstamp>
						<format pattern="yyyyMMddkkmmssSSS" property="tstamp.value" />
					</tstamp>

					<propertyregex
						input="${env.BUILD_URL}"
						property="jenkins.build.url"
						regexp="https:\/\/([^\.]+)\.[^\/]+"
						replace="http://\1"
					/>

					<propertyregex
						input="${jenkins.build.url}"
						override="true"
						property="jenkins.build.url"
						regexp="http:\/\/([^\/]+)\/(\d+)"
						replace="http://\1-\2/\2"
					/>

					<get dest="${tstamp.value}.txt" ignoreerrors="true" src="${jenkins.build.url}/consoleText" />

					<var name="jenkins.console.txt" unset="true" />

					<loadfile property="jenkins.console.txt" srcfile="${tstamp.value}.txt" />

					<delete file="${tstamp.value}.txt" />

					<var name="tstamp.value" unset="true" />

					<var name="junit.failure.count" unset="true" />
					<var name="junit.failure.message" unset="true" />
					<var name="junit.timestamp" unset="true" />

					<if>
						<contains string="${jenkins.console.txt}" substring="!MESSAGE error" />
						<then>
							<property name="junit.failure.count" value="1" />
							<property name="junit.failure.message"><![CDATA[<failure message="!MESSAGE error" type="java.lang.Exception" />]]></property>
						</then>
						<elseif>
							<contains string="${jenkins.console.txt}" substring="!MESSAGE warning" />
							<then>
								<property name="junit.failure.count" value="1" />
								<property name="junit.failure.message"><![CDATA[<failure message="!MESSAGE warning" type="java.lang.Exception" />]]></property>
							</then>
						</elseif>
						<else>
							<property name="junit.failure.count" value="0" />
							<property name="junit.failure.message" value="" />
						</else>
					</if>

					<tstamp>
						<format pattern="yyyy-MM-dd_kk:mm:ss" property="junit.timestamp" />
					</tstamp>

					<echo file="portal-impl/test-results/TEST-JenkinsLogAssertTest.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<testsuite errors="0" failures="${junit.failure.count}" hostname="localhost" name="com.liferay.jenkins.JenkinsLogAsserterTest" skipped="0" tests="1" time="0.0" timestamp="${junit.timestamp}">
	<properties />
	<testcase classname="com.liferay.jenkins.JenkinsLogAsserterTest" name="testScanJenkinsLog" time="0.0">
		${junit.failure.message}
	</testcase>
	<system-out></system-out>
	<system-err></system-err>
</testsuite>]]></echo>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="clean-restart-sybase">
		<attribute default="false" name="retry" />
		<sequential>
			<exec executable="service">
				<arg line="sybase stop" />
			</exec>

			<waitfor maxwait="60" maxwaitunit="second">
				<not>
					<socket port="5000" server="localhost" />
				</not>
			</waitfor>

			<sleep if:true="@{retry}" seconds="10" />

			<antcall target="clean-up-sybase-processes" />

			<if if:true="@{retry}">
				<available file="/opt/sybase.tar.gz" />
				<then>
					<delete dir="/opt/sybase" />

					<exec executable="tar" failonerror="true">
						<arg line="xf /opt/sybase.tar.gz -C /" />
					</exec>

					<exec executable="hostname" failonerror="true" outputproperty="hostname" />

					<echo file="/opt/sybase/interfaces">lportal
		master tcp ether ${hostname} 5000
		query tcp ether ${hostname} 5000

lportal_BS
		master tcp ether ${hostname} 5001
		query tcp ether ${hostname} 5001
					</echo>
				</then>
				<else>
					<fail message="Unable to reset Sybase installation due to missing /opt/sybase.tar.gz." />
				</else>
			</if>

			<exec executable="service" failonerror="true">
				<arg line="sybase start" />
			</exec>

			<waitfor maxwait="60" maxwaitunit="second">
				<socket port="5000" server="localhost" />
			</waitfor>

			<sleep if:true="@{retry}" seconds="10" />
		</sequential>
	</macrodef>

	<macrodef name="database-test-action">
		<attribute name="database.type" />
		<element name="action" />

		<sequential>
			<local name="database.type" />

			<property name="database.type" value="@{database.type}" />

			<local name="database.service.executable" />

			<get-database-property property.name="database.service.executable" />

			<local name="database.service.cmd.start" />

			<get-database-property property.name="database.service.cmd.start" />

			<local name="database.service.cmd.stop" />

			<get-database-property property.name="database.service.cmd.stop" />

			<action />
		</sequential>
	</macrodef>

	<macrodef name="database-test-run-test">
		<attribute name="database.type" />
		<attribute default="${database.@{database.type}.version}" name="database.version" />
		<attribute default="false" name="stop.app.server" />
		<element name="test-action" />

		<sequential>
			<var name="database.type" value="@{database.type}" />
			<var name="database.version" value="@{database.version}" />

			<if>
				<and>
					<equals arg1="@{database.type}" arg2="mysql" />
					<equals arg1="@{database.version}" arg2="5.5" />
				</and>
				<then>
					<var name="database.mysql.service.cmd.start" unset="true" />
					<var name="database.mysql.service.cmd.stop" unset="true" />
					<var name="database.mysql.version" unset="true" />
					<var name="mysql.executable" unset="true" />

					<property name="database.mysql.service.cmd.start" value="mysql55 start" />
					<property name="database.mysql.service.cmd.stop" value="mysql55 stop" />
					<property name="database.mysql.version" value="5.5" />
					<property name="mysql.executable" value="mysql55" />

					<echo append="true" file="test.${env.HOSTNAME}.properties"><![CDATA[
database.mysql.service.cmd.start=${database.mysql.service.cmd.start}
database.mysql.service.cmd.stop=${database.mysql.service.cmd.stop}
database.mysql.version=${database.mysql.version}]]></echo>

					<echo append="true" file="sql/sql.${env.HOSTNAME}.properties"><![CDATA[
mysql.executable=${mysql.executable}]]></echo>
				</then>
			</if>

			<if>
				<equals arg1="@{database.type}" arg2="mariadb" />
				<then>
					<var name="mariadb.executable" unset="true" />

					<property name="mariadb.executable" value="mariadb" />

					<echo append="true" file="sql/sql.${env.HOSTNAME}.properties"><![CDATA[
mariadb.executable=${mariadb.executable}]]></echo>
				</then>
			</if>

			<database-test-action database.type="@{database.type}">
				<action>
					<exec executable="${database.service.executable}">
						<arg line="${database.service.cmd.stop}" />
					</exec>
				</action>
			</database-test-action>

			<database-test-action database.type="@{database.type}">
				<action>
					<set-portal-impl-portal-ext-properties />

					<set-portal-impl-portal-test-ext-properties />

					<set-portal-impl-system-ext-properties />

					<exec executable="${database.service.executable}" failonerror="true">
						<arg line="${database.service.cmd.start}" />
					</exec>

					<antcall inheritall="false" target="copy-optional-jars" >
						<param name="database.type" value="@{database.type}" />
						<param name="todir" value="lib/development" />
					</antcall>

					<antcall inheritall="false" target="copy-optional-jars" >
						<param name="database.type" value="@{database.type}" />
						<param name="todir" value="${app.server.lib.global.dir}" />
					</antcall>

					<trycatch property="database.error">
						<try>
							<record action="start" name="${project.dir}/database.log" />

							<antcall inheritall="false" target="rebuild-database" >
								<param name="database.type" value="@{database.type}" />
							</antcall>

							<record action="stop" name="${project.dir}/database.log" />
						</try>
						<catch>
							<if>
								<resourcecontains resource="${project.dir}/database.log" substring="ERROR 1010" />
								<then>
									<zip destfile="${env.TOP_LEVEL_SHARED_DIR}/database.error.zip">
										<fileset dir="/var/lib/mysql/${database.mysql.schema}" />
									</zip>

									<delete includeemptydirs="true">
										<fileset dir="/var/lib/mysql/${database.mysql.schema}" includes="**/*" />
									</delete>

									<antcall inheritall="false" target="rebuild-database" >
										<param name="database.type" value="@{database.type}" />
									</antcall>

									<echo file="${project.dir}/database_error.sh">
										<![CDATA[service sendmail stop

if [[ -n `service postfix status | grep 'dead\|stopped'` ]]
then
	service postfix restart
fi

service postfix status

EMAIL_BODY="Invalid files found in MySQL database. Archive can be found in ${TOP_LEVEL_SHARED_DIR}."

echo ${BUILD_URL} > /tmp/database_failure_email_body.txt
echo -e ${EMAIL_BODY} >> /tmp/database_failure_email_body.txt

mail -s "$(echo -e "${NODE_NAME} failed to delete a MySQL database on $(date).\nFrom: Jenkins Slave Verification <root@${NODE_NAME}.lax.liferay.com>\n")" ${EMAIL_LIST} < /tmp/database_failure_email_body.txt

echo "Sent notification."]]>
									</echo>

									<chmod file="database_error.sh" perm="a+x" />

									<exec executable="${project.dir}/database_error.sh" />

									<delete file="database_error.sh" />
								</then>
							</if>
						</catch>
					</trycatch>

					<test-action />

					<if if:true="@{stop.app.server}">
						<available file=".testable.portal.started" />
						<then>
							<antcall target="stop-app-server" />

							<delete failonerror="false" file=".testable.portal.started" />
						</then>
					</if>

					<exec executable="${database.service.executable}" failonerror="true">
						<arg line="${database.service.cmd.stop}" />
					</exec>
				</action>
			</database-test-action>
		</sequential>
	</macrodef>

	<macrodef name="merge-test-results">
		<sequential>
			<antcall target="merge-test-results" />

			<if>
				<isset property="env.WORKSPACE" />
				<then>
					<mkdir dir="${env.WORKSPACE}/test-results" />

					<copy file="test-results/TESTS-TestSuites.xml" tofile="${env.WORKSPACE}/test-results/TESTS-TestSuites.xml" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="prepare-test-build">
		<sequential>
			<trycatch property="exception.message">
				<try>
					<antcall target="prepare-test-build">
						<param name="test.class.groups.size" value="${test.batch.size}" />
						<param name="test.plugin.groups.size" value="${test.batch.size}" />
					</antcall>
				</try>
				<catch>
					<echo message="${exception.message}" />

					<fail message="Unable to prepare test build." />
				</catch>
			</trycatch>
		</sequential>
	</macrodef>

	<macrodef name="prepare-test-build-custom">
		<sequential>
			<trycatch property="exception.message">
				<try>
					<antcall target="prepare-test-build-custom">
						<param name="app.server.type" value="${app.server.type}" />
					</antcall>
				</try>
				<catch>
					<echo message="${exception.message}" />

					<fail message="Unable to prepare test build." />
				</catch>
			</trycatch>
		</sequential>
	</macrodef>

	<macrodef name="prepare-test-build-dist">
		<attribute name="app.server.type" />

		<sequential>
			<var name="app.server.type" value="@{app.server.type}" />

			<echo append="true" file="app.server.${env.HOSTNAME}.properties"><![CDATA[
app.server.type=@{app.server.type}]]></echo>

			<record-git-commit-portal />

			<antcall inheritAll="false" target="compile" />

			<ant antfile="build-dist.xml" inheritAll="false" target="build-dist-@{app.server.type}" />

			<antcall inheritAll="false" target="prepare-portal-ext-properties" />

			<antcall inheritAll="false" target="prepare-system-ext-properties" />

			<if>
				<equals arg1="@{app.server.type}" arg2="tomcat" />
				<then>
					<setup-testable-tomcat />

					<replace file="${app.server.tomcat.bin.dir}/setenv${file.suffix.bat}">
						<replacetoken><![CDATA[-Xmx1024m -XX:MaxPermSize=256m]]></replacetoken>
						<replacevalue><![CDATA[-verbose:gc -Xloggc:/tmp/tomcat-gc.log -Xms512m -Xmx512m -XX:MaxNewSize=32m -XX:MaxPermSize=200m -XX:MaxTenuringThreshold=0 -XX:NewSize=32m -XX:ParallelGCThreads=2 -XX:PermSize=200m -XX:+PrintGCCause -XX:+PrintGCDetails -XX:SurvivorRatio=65536 -XX:TargetSurvivorRatio=0 -XX:+UseParNewGC]]></replacevalue>
					</replace>
				</then>
			</if>

			<prepare-elasticsearch-configuration />

			<antcall inheritAll="false" target="compile-test" />

			<echo file="${project.dir}/.gitignore">/.ivy/
/app.server.*.properties
/build.*.properties
/release.*.properties
/sql/sql.*.properties
/test.*.properties
/tools/cobertura-agent/classes
/tools/maven/*.asc
/tools/node*
/tools/selenium/*.exe
/tools/selenium/extensions/ide.*.js
/tools/tck
/tools/zip_tmpl/license</echo>

			<echo file="${project.dir}/modules/.gitignore">tmp
/*/*/ivy.xml.MD5
/*/*/javadoc
/*/*/lib
/*/*/tmp
/*/*/*/ivy.xml.MD5
/*/*/*/javadoc
/*/*/*/lib
/*/*/*/tmp
/*/*/*/*/ivy.xml.MD5
/*/*/*/*/javadoc
/*/*/*/*/lib
/*/*/*/*/tmp</echo>

			<execute>
				<![CDATA[
					rm bundles/*.zip

					git add -A

					git diff --binary --cached bundles/ > liferay-portal-bundle-@{app.server.type}.diff
					git diff --binary --cached --name-only | grep -v '^bundles/' | xargs git diff --binary --cached -- > liferay-portal-source.diff
				]]>
			</execute>
		</sequential>
	</macrodef>

	<macrodef name="prepare-test-build-unit">
		<sequential>
			<trycatch property="exception.message">
				<try>
					<antcall target="prepare-test-build-unit">
						<param name="test.class.groups.size" value="${test.batch.size}" />
					</antcall>
				</try>
				<catch>
					<echo message="${exception.message}" />

					<fail message="Unable to prepare test build." />
				</catch>
			</trycatch>
		</sequential>
	</macrodef>

	<macrodef name="prepare-test-environment">
		<attribute default="tomcat" name="app.server.type" />

		<sequential>
			<execute>
				<![CDATA[
					git apply --whitespace=nowarn liferay-portal-bundle-@{app.server.type}.diff
					git apply --exclude=.gitignore --whitespace=nowarn liferay-portal-source.diff
				]]>
			</execute>

			<antcall inheritAll="false" target="install-portal-snapshots" />

			<echo if:set="env.JENKINS_HOME">ANT_OPTS=${env.ANT_OPTS}</echo>

			<antcall if:set="env.JENKINS_HOME" target="clean-up-db2-processes" inheritAll="false" />
			<antcall if:set="env.JENKINS_HOME" target="clean-up-java-processes" inheritAll="false" />
		</sequential>
	</macrodef>

	<macrodef name="print-test-class-group">
		<attribute name="test.class.group.index" />

		<sequential>
			<property file="${project.dir}/test.class.file.names.properties" />

			<propertycopy from="TEST_CLASS_GROUP_@{test.class.group.index}" name="test.class.group" />

			<echo>TEST_CLASS_GROUP_@{test.class.group.index}=${test.class.group}</echo>
		</sequential>
	</macrodef>

	<macrodef name="run-batch-test">
		<attribute default="false" name="tomcat.gc.log" />
		<attribute default="false" name="tsant.gc.log" />
		<element name="test-action" />
		<element name="test-set-up" optional="true" />
		<element name="test-tear-down" optional="true" />

		<sequential>
			<antcall if:set="env.JENKINS_HOME" inheritAll="false" target="clean-up-java-processes" />

			<test-set-up />

			<trycatch property="job.failure.message">
				<try>
					<test-action />
				</try>

				<finally>
					<property name="job.failure.message" value="" />

					<echo>${job.failure.message}</echo>

					<check-deprecated-method />

					<check-jenkins-console />

					<merge-test-results />

					<test-tear-down />

					<print-gc-logs
						tomcat.gc.log="@{tomcat.gc.log}"
						tsant.gc.log="@{tsant.gc.log}"
					/>
				</finally>
			</trycatch>
		</sequential>
	</macrodef>

	<macrodef name="run-functional-test">
		<attribute name="app.server.type" />
		<attribute default="${app.server.@{app.server.type}.version}" name="app.server.version" />
		<attribute name="database.type" />
		<attribute default="${database.@{database.type}.version}" name="database.version" />
		<attribute default="" name="test.build.fix.pack.zip.url" />
		<attribute default="" name="test.fix.pack.base.url" />
		<attribute default="" name="test.legacy.database.dump" />
		<attribute default="" name="test.license.xml.url" />
		<attribute default="" name="test.plugin.zip.url" />
		<attribute default="" name="test.portal.bundle.version" />
		<attribute default="" name="test.portal.bundle.zip.url" />
		<attribute default="" name="test.sql.zip.url" />
		<attribute default="false" name="tomcat.gc.log" />
		<attribute default="false" name="tsant.gc.log" />

		<sequential>
			<var name="app.server.type" value="@{app.server.type}" />
			<var name="app.server.version" value="@{app.server.version}" />

			<if>
				<matches pattern="[A-z]+" string="${axis.variable}" />
				<then>
					<property name="test.class" value="${axis.variable}" />
				</then>
				<else>
					<property name="test.class" value="${run.test.case.method.group}_${axis.variable}" />
				</else>
			</if>

			<run-batch-test tomcat.gc.log="@{tomcat.gc.log}" tsant.gc.log="@{tsant.gc.log}">
				<test-action>
					<database-test-run-test database.type="@{database.type}" database.version="@{database.version}">
						<test-action>
							<ant antfile="build-test-${app.server.type}.xml" inheritAll="false" target="run-selenium-${app.server.type}">
								<property name="database.type" value="@{database.type}" />
								<property name="liferay.portal.bundle" value="@{test.portal.bundle.version}" />
								<property name="test.class" value="${test.class}" />
							</ant>

							<if>
								<equals arg1="@{test.legacy.database.dump}" arg2="true" />
								<then>
									<get-testcase-property property.name="data.archive.type" />

									<ant dir="${portal.legacy.dir}" target="export-database">
										<property name="data.archive.type" value="${data.archive.type}" />
										<property name="database.type" value="@{database.type}" />
										<property name="database.version" value="${database.version}" />
										<property name="test.class" value="${test.class}" />
									</ant>
								</then>
							</if>
						</test-action>
					</database-test-run-test>
				</test-action>

				<test-set-up>
					<if>
						<and>
							<matches pattern="http" string="@{test.portal.bundle.zip.url}" />
							<matches pattern="http" string="@{test.sql.zip.url}" />
						</and>
						<then>
							<propertycopy from="app.server.${app.server.type}.bin.dir" name="test.app.server.bin.dir" />

							<antcall inheritAll="false" target="prepare-test-bundle">
								<param name="app.server.type" value="${app.server.type}" />
								<param name="test.app.server.bin.dir" value="${test.app.server.bin.dir}" />
								<param name="test.build.bundle.zip.url" value="@{test.portal.bundle.zip.url}" />
								<param name="test.build.fix.pack.zip.url" value="@{test.build.fix.pack.zip.url}" />
								<param name="test.fix.pack.base.url" value="@{test.fix.pack.base.url}" />
							</antcall>

							<if>
								<matches pattern="http" string="@{test.license.xml.url}" />
								<then>
									<antcall target="deploy-license-xml">
										<param name="test.build.license.xml.zip.url" value="@{test.license.xml.url}" />
									</antcall>
								</then>
							</if>

							<antcall target="deploy-sql-zip">
								<param name="test.sql.zip.url" value="@{test.sql.zip.url}" />
							</antcall>

							<antcall inheritAll="false" target="setup-sdk" />
						</then>
						<elseif>
							<and>
								<available file="liferay-portal-bundle-${app.server.type}.diff" />
								<available file="liferay-portal-source.diff" />
							</and>
							<then>
								<execute>
									<![CDATA[
										git apply --whitespace=nowarn liferay-portal-bundle-${app.server.type}.diff
										git apply --whitespace=nowarn liferay-portal-source.diff
									]]>
								</execute>
							</then>
						</elseif>
						<else>
							<if>
								<isset property="env.DIST_PATH" />
								<then>
									<prepare-test-environment app.server.type="${app.server.type}" />
								</then>
								<else>
									<antcall target="compile" />

									<if>
										<or>
											<equals arg1="${app.server.type}" arg2="weblogic" />
											<equals arg1="${app.server.type}" arg2="websphere" />
										</or>
										<then>
											<prepare-test-build-custom />
										</then>
										<else>
											<ant antfile="build-dist.xml" target="build-dist-${app.server.type}" />
										</else>
									</if>
								</else>
							</if>

							<if>
								<equals arg1="${app.server.type}" arg2="tomcat" />
								<then>
									<prepare-tomcat-setenv />
								</then>
							</if>
						</else>
					</if>

					<if>
						<matches pattern="http" string="@{test.plugin.zip.url}" />
						<then>
							<mkdir dir="${liferay.home}/deploy" />

							<mirrors-get
								dest="${liferay.home}/deploy"
								src="@{test.plugin.zip.url}"
							/>
						</then>
					</if>

					<antcall target="record-test-generated-properties" />

					<echo if:set="env.JENKINS_HOME">ANT_OPTS=${env.ANT_OPTS}</echo>
				</test-set-up>

				<test-tear-down>
					<if>
						<available file=".testable.portal.started" />
						<then>
							<antcall target="stop-app-server" />

							<delete failonerror="false" file=".testable.portal.started" />
						</then>
					</if>
				</test-tear-down>
			</run-batch-test>
		</sequential>
	</macrodef>

	<macrodef name="run-integration-test">
		<attribute name="database.type" />
		<attribute default="${database.@{database.type}.version}" name="database.version" />

		<sequential>
			<run-batch-test>
				<test-action>
					<database-test-run-test database.type="@{database.type}" database.version="@{database.version}">
						<test-action>
							<print-test-class-group test.class.group.index="${axis.variable}" />

							<ant dir="portal-impl" inheritAll="false" target="test-class-group">
								<property name="database.type" value="@{database.type}" />
								<property name="test.class.group.index" value="${axis.variable}" />
								<property name="test.type" value="integration" />
							</ant>
						</test-action>
					</database-test-run-test>
				</test-action>

				<test-set-up>
					<if>
						<isset property="env.DIST_PATH" />
						<then>
							<prepare-test-environment />

							<antcall inheritAll="false" target="record-test-class-file-names">
								<param name="test.class.groups.size" value="${test.batch.size}" />
							</antcall>
						</then>
						<else>
							<prepare-test-build />
						</else>
					</if>
				</test-set-up>
			</run-batch-test>
		</sequential>
	</macrodef>

	<macrodef name="run-legacy-database-dump">
		<attribute name="database.type" />
		<attribute default="" name="database.version" />

		<sequential>
			<set-tomcat-version-number liferay.portal.bundle="${test.portal.bundle.version}" />

			<run-functional-test
				app.server.type="tomcat"
				database.type="@{database.type}"
				database.version="@{database.version}"
				test.build.fix.pack.zip.url="${test.build.fix.pack.zip.url}"
				test.fix.pack.base.url="${test.fix.pack.base.url}"
				test.legacy.database.dump="true"
				test.license.xml.url="${test.license.xml.url}"
				test.plugin.zip.url="${test.plugin.zip.url}"
				test.portal.bundle.version="${test.portal.bundle.version}"
				test.portal.bundle.zip.url="${test.portal.bundle.zip.url}"
				test.sql.zip.url="${test.sql.zip.url}"
			/>
		</sequential>
	</macrodef>

	<macrodef name="run-lpkg-override-test">
		<sequential>
			<run-batch-test tomcat.gc.log="true">
				<test-action>
					<database-test-run-test database.type="mysql" stop.app.server="true">
						<test-action>
							<setup-lpkg-test />

							<trycatch>
								<try>
									<antcall inheritall="false" target="start-app-server" />
								</try>

								<finally>
									<ant dir="portal-kernel" inheritAll="false" target="test-class">
										<property name="test.class" value="PortalLogAssertorTest" />
									</ant>
								</finally>
							</trycatch>

							<antcall inheritall="false" target="stop-app-server" />

							<delete dir="${liferay.home}/logs" />

							<gradle-execute dir="modules/apps/static/portal-lpkg-deployer/portal-lpkg-deployer-test" task="test">
								<arg value="test" />
								<arg value="--tests" />
								<arg value="*.LPKGOverrideTest" />
								<arg value="-Dliferay.home=${liferay.home}" />
								<arg value="-Dmodules.only.build=true" />
							</gradle-execute>

							<trycatch>
								<try>
									<antcall inheritall="false" target="start-app-server-preserve-liferay-home" />

									<gradle-execute dir="modules/apps/static/portal-lpkg-deployer/portal-lpkg-deployer-test" task="testIntegration">
										<arg value="testIntegration" />
										<arg value="--tests" />
										<arg value="*.LPKGOverrideVerifyTest" />
										<arg value="-Dmodules.only.build=true" />
									</gradle-execute>
								</try>

								<finally>
									<ant dir="portal-kernel" inheritAll="false" target="test-class">
										<property name="test.class" value="PortalLogAssertorTest" />
									</ant>
								</finally>
							</trycatch>

							<antcall inheritall="false" target="stop-app-server" />

							<delete dir="${liferay.home}/logs" />

							<trycatch>
								<try>
									<antcall inheritall="false" target="start-app-server" />

									<gradle-execute dir="modules/apps/static/portal-lpkg-deployer/portal-lpkg-deployer-test" task="testIntegration">
										<arg value="testIntegration" />
										<arg value="--tests" />
										<arg value="*.LPKGOverrideVerifyTest" />
										<arg value="-Dlpkg.clean.startup=true" />
										<arg value="-Dmodules.only.build=true" />
									</gradle-execute>
								</try>
								<finally>
									<ant dir="portal-kernel" inheritAll="false" target="test-class">
										<property name="test.class" value="PortalLogAssertorTest" />
									</ant>
								</finally>
							</trycatch>

							<antcall inheritall="false" target="stop-app-server" />

							<delete dir="${liferay.home}/osgi/marketplace/override" />

							<delete>
								<fileset dir="${liferay.home}/osgi/static" />
							</delete>

							<trycatch>
								<try>
									<antcall inheritall="false" target="start-app-server-preserve-liferay-home" />

									<gradle-execute dir="modules/apps/static/portal-lpkg-deployer/portal-lpkg-deployer-test" task="testIntegration">
										<arg value="testIntegration" />
										<arg value="--tests" />
										<arg value="*.LPKGRevertOverrideVerifyTest" />
										<arg value="-Dmodules.only.build=true" />
									</gradle-execute>
								</try>

								<finally>
									<ant dir="portal-kernel" inheritAll="false" target="test-class">
										<property name="test.class" value="PortalLogAssertorTest" />
									</ant>
								</finally>
							</trycatch>
						</test-action>
					</database-test-run-test>
				</test-action>

				<test-set-up>
					<if>
						<isset property="env.DIST_PATH" />
						<then>
							<prepare-test-environment />
						</then>
						<else>
							<prepare-test-build />
						</else>
					</if>
				</test-set-up>
			</run-batch-test>
		</sequential>
	</macrodef>

	<macrodef name="run-lpkg-persistence-test">
		<sequential>
			<run-batch-test tomcat.gc.log="true">
				<test-action>
					<database-test-run-test database.type="mysql" stop.app.server="true">
						<test-action>
							<setup-lpkg-test />

							<gradle-execute dir="modules/apps/static/portal-lpkg-deployer/portal-lpkg-deployer-test" task="test">
								<arg value="test" />
								<arg value="--tests" />
								<arg value="*.LPKGPersistenceTest" />
								<arg value="-Dliferay.home=${liferay.home}" />
								<arg value="-Dmodules.only.build=true" />
							</gradle-execute>

							<trycatch>
								<try>
									<antcall inheritall="false" target="start-app-server" />

									<gradle-execute dir="modules/apps/static/portal-lpkg-deployer/portal-lpkg-deployer-test" task="testIntegration">
										<arg value="testIntegration" />
										<arg value="--tests" />
										<arg value="*.LPKGPersistenceStopBundleTest" />
										<arg value="-Dmodules.only.build=true" />
									</gradle-execute>
								</try>

								<finally>
									<ant dir="portal-kernel" inheritAll="false" target="test-class">
										<property name="test.class" value="PortalLogAssertorTest" />
									</ant>
								</finally>
							</trycatch>

							<antcall inheritall="false" target="stop-app-server" />

							<delete dir="${liferay.home}/logs" />

							<trycatch>
								<try>
									<antcall inheritall="false" target="start-app-server-preserve-liferay-home" />

									<gradle-execute dir="modules/apps/static/portal-lpkg-deployer/portal-lpkg-deployer-test" task="testIntegration">
										<arg value="testIntegration" />
										<arg value="--tests" />
										<arg value="*.LPKGPersistenceVerifyTest" />
										<arg value="-Dmodules.only.build=true" />
									</gradle-execute>
								</try>
								<finally>
									<ant dir="portal-kernel" inheritAll="false" target="test-class">
										<property name="test.class" value="PortalLogAssertorTest" />
									</ant>
								</finally>
							</trycatch>
						</test-action>
					</database-test-run-test>
				</test-action>

				<test-set-up>
					<if>
						<isset property="env.DIST_PATH" />
						<then>
							<prepare-test-environment />
						</then>
						<else>
							<prepare-test-build />
						</else>
					</if>
				</test-set-up>
			</run-batch-test>
		</sequential>
	</macrodef>

	<macrodef name="run-lpkg-startup-test">
		<sequential>
			<run-batch-test tomcat.gc.log="true">
				<test-action>
					<database-test-run-test database.type="mysql" stop.app.server="true">
						<test-action>
							<setup-lpkg-test />

							<trycatch>
								<try>
									<antcall inheritall="false" target="start-app-server" />

									<gradle-execute dir="modules/apps/static/portal-lpkg-deployer/portal-lpkg-deployer-test" task="testIntegration">
										<arg value="testIntegration" />
										<arg value="--tests" />
										<arg value="*.LPKGDeployerTest" />
										<arg value="-Dbefore.lpkg.upgrade=true" />
										<arg value="-Dmodules.only.build=true" />
									</gradle-execute>

									<antcall inheritall="false" target="run-selenium-test">
										<param name="test.class" value="PortalSmoke#Smoke" />
									</antcall>
								</try>

								<finally>
									<ant dir="portal-kernel" inheritAll="false" target="test-class">
										<property name="test.class" value="PortalLogAssertorTest" />
									</ant>
								</finally>
							</trycatch>

							<antcall inheritall="false" target="stop-app-server" />

							<delete dir="${liferay.home}/logs" />

							<gradle-execute dir="modules/apps/static/portal-lpkg-deployer/portal-lpkg-deployer-test" task="test">
								<arg value="test" />
								<arg value="--tests" />
								<arg value="*.LPKGUpgradeTest" />
								<arg value="-Dliferay.home=${liferay.home}" />
								<arg value="-Dmodules.only.build=true" />
							</gradle-execute>

							<trycatch>
								<try>
									<antcall inheritall="false" target="start-app-server-preserve-liferay-home" />

									<gradle-execute dir="modules/apps/static/portal-lpkg-deployer/portal-lpkg-deployer-test" task="testIntegration">
										<arg value="testIntegration" />
										<arg value="--tests" />
										<arg value="*.LPKGDeployerTest" />
										<arg value="-Dmodules.only.build=true" />
									</gradle-execute>

									<gradle-execute dir="modules/apps/static/portal-lpkg-deployer/portal-lpkg-deployer-test" task="test">
										<arg value="test" />
										<arg value="--tests" />
										<arg value="*.LPKGVersionChangeLogAssertorTest" />
										<arg value="-Dliferay.home=${liferay.home}" />
										<arg value="-Dmodules.only.build=true" />
									</gradle-execute>

									<antcall inheritall="false" target="run-selenium-test">
										<param name="test.class" value="PortalSmoke#Smoke" />
									</antcall>
								</try>

								<finally>
									<ant dir="portal-kernel" inheritAll="false" target="test-class">
										<property name="test.class" value="PortalLogAssertorTest" />
									</ant>
								</finally>
							</trycatch>

							<antcall inheritall="false" target="stop-app-server" />

							<delete dir="${liferay.home}/logs" />

							<gradle-execute dir="modules/apps/static/portal-lpkg-deployer/portal-lpkg-deployer-test" task="test">
								<arg value="test" />
								<arg value="--tests" />
								<arg value="*.LPKGDowngradeTest" />
								<arg value="-Dliferay.home=${liferay.home}" />
								<arg value="-Dmodules.only.build=true" />
							</gradle-execute>

							<trycatch>
								<try>
									<antcall inheritall="false" target="start-app-server-preserve-liferay-home" />

									<gradle-execute dir="modules/apps/static/portal-lpkg-deployer/portal-lpkg-deployer-test" task="testIntegration">
										<arg value="testIntegration" />
										<arg value="--tests" />
										<arg value="*.LPKGDeployerTest" />
										<arg value="-Dmodules.only.build=true" />
									</gradle-execute>

									<gradle-execute dir="modules/apps/static/portal-lpkg-deployer/portal-lpkg-deployer-test" task="test">
										<arg value="test" />
										<arg value="--tests" />
										<arg value="*.LPKGVersionChangeLogAssertorTest" />
										<arg value="-Dliferay.home=${liferay.home}" />
										<arg value="-Dmodules.only.build=true" />
									</gradle-execute>

									<antcall inheritall="false" target="run-selenium-test">
										<param name="test.class" value="PortalSmoke#Smoke" />
									</antcall>
								</try>

								<finally>
									<ant dir="portal-kernel" inheritAll="false" target="test-class">
										<property name="test.class" value="PortalLogAssertorTest" />
									</ant>
								</finally>
							</trycatch>
						</test-action>
					</database-test-run-test>
				</test-action>

				<test-set-up>
					<if>
						<isset property="env.DIST_PATH" />
						<then>
							<prepare-test-environment />
						</then>
						<else>
							<prepare-test-build />
						</else>
					</if>
				</test-set-up>
			</run-batch-test>
		</sequential>
	</macrodef>

	<macrodef name="run-modules-integration-test">
		<attribute name="database.type" />

		<sequential>
			<run-batch-test tomcat.gc.log="true">
				<test-action>
					<database-test-run-test database.type="@{database.type}" stop.app.server="true">
						<test-action>
							<print-test-class-group test.class.group.index="${axis.variable}" />

							<antcall inheritAll="false" target="prepare-log4j-ext-xml">
								<param name="database.type" value="@{database.type}" />
							</antcall>

							<antcall inheritAll="false" target="prepare-portal-ext-properties">
								<param name="database.type" value="@{database.type}" />
							</antcall>

							<antcall inheritAll="false" target="prepare-system-ext-properties" />

							<gradle-execute dir="modules" task="testIntegration">
								<arg value="-Ddatabase.type=@{database.type}" />
								<arg value="-Dmodules.only.build=true" />
								<arg value="-Dtest.class.group.index=${axis.variable}" />
							</gradle-execute>

							<ant dir="portal-kernel" inheritAll="false" target="test-class">
								<property name="test.class" value="PortalLogAssertorTest" />
							</ant>
						</test-action>
					</database-test-run-test>
				</test-action>

				<test-set-up>
					<if>
						<isset property="env.DIST_PATH" />
						<then>
							<prepare-test-environment />

							<antcall inheritAll="false" target="record-test-class-file-names">
								<param name="test.class.groups.size" value="${test.batch.size}" />
							</antcall>
						</then>
						<else>
							<prepare-test-build />
						</else>
					</if>
				</test-set-up>
			</run-batch-test>
		</sequential>
	</macrodef>

	<macrodef name="run-poshi-validation">
		<sequential>
			<antcall target="run-poshi-validation" />
		</sequential>
	</macrodef>

	<macrodef name="run-source-formatter">
		<sequential>
			<gradle-execute dir="modules/util/source-formatter" task="test" />
		</sequential>
	</macrodef>

	<macrodef name="setup-lpkg-test">
		<sequential>
			<antcall inheritAll="false" target="prepare-log4j-ext-xml">
				<param name="database.type" value="@{database.type}" />
			</antcall>

			<antcall inheritAll="false" target="prepare-portal-ext-properties">
				<param name="database.type" value="@{database.type}" />
			</antcall>

			<antcall inheritAll="false" target="prepare-system-ext-properties" />

			<ant dir="modules" inheritAll="false" target="build-app-lpkg-all">
				<property name="osgi.dir" value="${app.server.parent.dir}/osgi" />
			</ant>
		</sequential>
	</macrodef>

	<target name="compile-jsp-jdk8">
		<run-batch-test>
			<test-action>
				<ant dir="portal-web" target="compile-tomcat" />

				<gradle-execute dir="modules" task="compileJSP">
					<arg value="-Dmodules.only.build=true" />
				</gradle-execute>
			</test-action>

			<test-set-up>
				<if>
					<isset property="env.DIST_PATH" />
					<then>
						<prepare-test-environment />
					</then>
					<else>
						<prepare-test-build />
					</else>
				</if>
			</test-set-up>
		</run-batch-test>
	</target>

	<target name="dist-jdk7">
		<prepare-test-build-dist app.server.type="${axis.variable}" />
	</target>

	<target name="functional-bundle-tomcat-mysql56-jdk7">
		<set-tomcat-version-number liferay.portal.bundle="${test.portal.bundle.version}" />

		<run-functional-test
			app.server.type="tomcat"
			database.type="mysql"
			test.build.fix.pack.zip.url="${test.build.fix.pack.zip.url}"
			test.fix.pack.base.url="${test.fix.pack.base.url}"
			test.license.xml.url="${test.license.xml.url}"
			test.plugin.zip.url="${test.plugin.zip.url}"
			test.portal.bundle.version="${test.portal.bundle.version}"
			test.portal.bundle.zip.url="${test.portal.bundle.zip.url}"
			test.sql.zip.url="${test.sql.zip.url}"
		/>
	</target>

	<target name="functional-bundle-tomcat-mysql56-jdk8">
		<set-tomcat-version-number liferay.portal.bundle="${test.portal.bundle.version}" />

		<run-functional-test
			app.server.type="tomcat"
			database.type="mysql"
			test.build.fix.pack.zip.url="${test.build.fix.pack.zip.url}"
			test.fix.pack.base.url="${test.fix.pack.base.url}"
			test.license.xml.url="${test.license.xml.url}"
			test.plugin.zip.url="${test.plugin.zip.url}"
			test.portal.bundle.version="${test.portal.bundle.version}"
			test.portal.bundle.zip.url="${test.portal.bundle.zip.url}"
			test.sql.zip.url="${test.sql.zip.url}"
		/>
	</target>

	<target name="functional-bundle-wildfly-mysql56-jdk8">
		<run-functional-test
			app.server.type="wildfly"
			database.type="mysql"
			database.version="5.6"
			test.build.fix.pack.zip.url="${test.build.fix.pack.zip.url}"
			test.fix.pack.base.url="${test.fix.pack.base.url}"
			test.license.xml.url="${test.license.xml.url}"
			test.plugin.zip.url="${test.plugin.zip.url}"
			test.portal.bundle.zip.url="${test.portal.bundle.zip.url}"
			test.sql.zip.url="${test.sql.zip.url}"
		/>
	</target>

	<target name="functional-jboss64-mysql56-jdk8">
		<run-functional-test app.server.type="jboss" database.type="mysql" />
	</target>

	<target name="functional-resin40-mysql56-jdk8">
		<run-functional-test app.server.type="resin" database.type="mysql" />
	</target>

	<target name="functional-tcserver26-mysql56-jdk8">
		<run-functional-test app.server.type="tcserver" database.type="mysql" />
	</target>

	<target name="functional-tomcat8-hypersonic20-jdk8">
		<run-functional-test app.server.type="tomcat" database.type="hypersonic" />
	</target>

	<target name="functional-tomcat8-mariadb100-jdk8">
		<run-functional-test app.server.type="tomcat" database.type="mariadb" />
	</target>

	<target name="functional-tomcat8-mysql55-jdk8">
		<run-functional-test app.server.type="tomcat" database.type="mysql" database.version="5.5" />
	</target>

	<target name="functional-tomcat8-mysql56-jdk8">
		<run-functional-test app.server.type="tomcat" database.type="mysql" />
	</target>

	<target name="functional-tomcat8-mysql56-jdk8-quarantine">
		<antcall target="functional-tomcat8-mysql56-jdk8" />
	</target>

	<target name="functional-tomcat8-oracle12-jdk8">
		<run-functional-test app.server.type="tomcat" database.type="oracle" />
	</target>

	<target name="functional-tomcat8-postgresql94-jdk8">
		<run-functional-test app.server.type="tomcat" database.type="postgresql" />
	</target>

	<target name="functional-tomcat8-sybase16-jdk8">
		<run-functional-test app.server.type="tomcat" database.type="sybase" />
	</target>

	<target name="functional-weblogic121-mysql56-jdk8">
		<run-functional-test app.server.type="weblogic" database.type="mysql" />
	</target>

	<target name="functional-websphere85-mysql56-jdk8">
		<run-functional-test app.server.type="websphere" database.type="mysql" />
	</target>

	<target name="functional-wildfly10-mariadb100-jdk8">
		<run-functional-test app.server.type="wildfly" database.type="mariadb" />
	</target>

	<target name="integration-db2105-jdk8">
		<run-integration-test database.type="db2" />
	</target>

	<target name="integration-hypersonic20-jdk8">
		<run-integration-test database.type="hypersonic" />
	</target>

	<target name="integration-mysql56-jdk8">
		<run-integration-test database.type="mysql" />
	</target>

	<target name="integration-oracle12-jdk8">
		<run-integration-test database.type="oracle" />
	</target>

	<target name="integration-postgresql94-jdk8">
		<run-integration-test database.type="postgresql" />
	</target>

	<target name="integration-sybase160-jdk8">
		<run-integration-test database.type="sybase" />
	</target>

	<target name="legacy-functional-bundle-tomcat-db2105-jdk7">
		<run-legacy-database-dump database.type="db2" />
	</target>

	<target name="legacy-functional-bundle-tomcat-mariadb100-jdk7">
		<run-legacy-database-dump database.type="mariadb" />
	</target>

	<target name="legacy-functional-bundle-tomcat-mysql55-jdk7">
		<run-legacy-database-dump database.type="mysql" database.version="5.5" />
	</target>

	<target name="legacy-functional-bundle-tomcat-oracle12-jdk7">
		<run-legacy-database-dump database.type="oracle" />
	</target>

	<target name="legacy-functional-bundle-tomcat-postgresql94-jdk7">
		<run-legacy-database-dump database.type="postgresql" />
	</target>

	<target name="legacy-functional-bundle-tomcat-sybase16-jdk7">
		<run-legacy-database-dump database.type="sybase" />
	</target>

	<target name="lpkg-override-jdk8">
		<run-lpkg-override-test />
	</target>

	<target name="lpkg-persistence-jdk8">
		<run-lpkg-persistence-test />
	</target>

	<target name="lpkg-startup-jdk8">
		<run-lpkg-startup-test />
	</target>

	<target name="modules-compile-jdk8">
		<run-batch-test>
			<test-action>
				<gradle-execute dir="modules" task="assemble">
					<arg value="--continue" />
					<arg value="--parallel" />
					<arg value="-Dbuild.exclude.dirs=third-party" />
				</gradle-execute>
			</test-action>

			<test-set-up>
				<if>
					<isset property="env.DIST_PATH" />
					<then>
						<prepare-test-environment />
					</then>
					<else>
						<prepare-test-build />
					</else>
				</if>
			</test-set-up>
		</run-batch-test>
	</target>

	<target name="modules-functional-jdk8">
		<run-batch-test>
			<test-action>
				<antcall target="run-selenium-test">
					<param name="test.class" value="${axis.variable}" />
				</antcall>
			</test-action>
		</run-batch-test>
	</target>

	<target name="modules-functional-tomcat8-mysql56-jdk8">
		<run-functional-test app.server.type="tomcat" database.type="mysql" />
	</target>

	<target name="modules-integration-db2105-jdk8">
		<run-modules-integration-test database.type="db2" />
	</target>

	<target name="modules-integration-hypersonic20-jdk8">
		<run-modules-integration-test database.type="hypersonic" />
	</target>

	<target name="modules-integration-mysql56-jdk8">
		<run-modules-integration-test database.type="mysql" />
	</target>

	<target name="modules-integration-oracle12-jdk8">
		<run-modules-integration-test database.type="oracle" />
	</target>

	<target name="modules-integration-postgresql94-jdk8">
		<run-modules-integration-test database.type="postgresql" />
	</target>

	<target name="modules-integration-sybase160-jdk8">
		<run-modules-integration-test database.type="sybase" />
	</target>

	<target name="modules-unit-jdk8">
		<run-batch-test>
			<test-action>
				<gradle-execute dir="modules" task="test">
					<arg value="-Dmodules.only.build=true" />
					<arg value="-Dtest.class.group.index=${axis.variable}" />
				</gradle-execute>
			</test-action>

			<test-set-up>
				<if>
					<isset property="env.DIST_PATH" />
					<then>
						<prepare-test-environment />

						<antcall inheritAll="false" target="record-test-class-file-names">
							<param name="test.class.groups.size" value="${test.batch.size}" />
						</antcall>
					</then>
					<else>
						<prepare-test-build />
					</else>
				</if>
			</test-set-up>
		</run-batch-test>
	</target>

	<target name="oracle-service-start">
		<exec executable="service" failonerror="true">
			<arg line="oracledb start" />
		</exec>

		<retry retrycount="60">
			<sequential>
				<local name="output.content" />
				<local name="return.code" />

				<exec executable="${oracle.lsnrctl.executable}" outputproperty="output.content">
					<arg value="services" />
				</exec>

				<echo>Output:
${output.content}</echo>

				<if>
					<or>
						<contains string="${output.content}" substring="The listener supports no services" />
					</or>
					<then>
						<sleep seconds="5" />

						<fail message="Output: ${output.content}" />
					</then>
				</if>
			</sequential>
		</retry>
	</target>

	<target name="oracle-service-stop">
		<exec executable="service">
			<arg line="oracledb stop" />
		</exec>
	</target>

	<target name="plugins-compile-jdk8">
		<run-batch-test>
			<test-action>
				<ant antfile="build-test-plugins.xml" target="test-plugin-group">
					<property name="test.plugin.group.index" value="${axis.variable}" />
				</ant>
			</test-action>

			<test-set-up>
				<if>
					<isset property="env.DIST_PATH" />
					<then>
						<prepare-test-environment />

						<antcall inheritAll="false" target="record-test-plugin-names">
							<param name="test.plugin.groups.size" value="${test.batch.size}" />
						</antcall>
					</then>
					<else>
						<prepare-test-build />
					</else>
				</if>
			</test-set-up>
		</run-batch-test>
	</target>

	<target name="plugins-functional-bundle-tomcat-mysql56-jdk8">
		<set-tomcat-version-number liferay.portal.bundle="${test.portal.bundle.version}" />

		<run-functional-test
			app.server.type="tomcat"
			database.type="mysql"
			test.build.fix.pack.zip.url="${test.build.fix.pack.zip.url}"
			test.fix.pack.base.url="${test.fix.pack.base.url}"
			test.license.xml.url="${test.license.xml.url}"
			test.portal.bundle.version="${test.portal.bundle.version}"
			test.portal.bundle.zip.url="${test.portal.bundle.zip.url}"
			test.sql.zip.url="${test.sql.zip.url}"
		/>
	</target>

	<target name="plugins-functional-tomcat8-mysql56-jdk8">
		<run-functional-test app.server.type="tomcat" database.type="mysql" />
	</target>

	<target name="plugins-gulp-jdk8">
		<fail message="Please set the property ${test.base.dir.name}" unless="test.base.dir.name" />

		<run-batch-test>
			<test-action>
				<exec dir="${test.base.dir.name}" executable="npm" failonerror="true">
					<arg value="test" />
				</exec>
			</test-action>

			<test-set-up>
				<prepare-test-build />

				<propertyregex
					input="${test.base.dir.name}"
					override="true"
					property="portlet.name"
					regexp=".*/portlets/([a-zA-Z-]+)/?.*"
					replace="\1"
				/>

				<generate-gulp-user-config-json portlet.name="${portlet.name}" />

				<exec dir="${test.base.dir.name}" executable="npm" failonerror="true">
					<arg value="install" />
					<arg value="--proxy http://squid.lax.liferay.com:3128" />
				</exec>
			</test-set-up>
		</run-batch-test>
	</target>

	<target name="portal-web-jdk8">
		<run-batch-test>
			<test-action>
				<database-test-run-test database.type="mysql">
					<test-action>
						<ant dir="portal-web" target="compile-tomcat" />

						<run-poshi-validation />

						<if>
							<equals arg1="${env.TEST_PORTAL_WEB}" arg2="true" />
							<then>
								<run-source-formatter />
							</then>
						</if>
					</test-action>
				</database-test-run-test>
			</test-action>

			<test-set-up>
				<if>
					<isset property="env.DIST_PATH" />
					<then>
						<prepare-test-environment />
					</then>
					<else>
						<prepare-test-build />
					</else>
				</if>
			</test-set-up>
		</run-batch-test>
	</target>

	<target name="release-functional-bundle-tomcat-mysql56-jdk8">
		<antcall target="functional-bundle-tomcat-mysql56-jdk8" />
	</target>

	<target name="release-functional-smoke-bundle-tomcat-mysql56-jdk8">
		<antcall target="functional-bundle-tomcat-mysql56-jdk8" />
	</target>

	<target name="ruby-sass-compiler-jdk8">
		<antcall if:set="env.JENKINS_HOME" inheritAll="false" target="clean-up-java-processes" />

		<if>
			<isset property="env.DIST_PATH" />
			<then>
				<prepare-test-environment />
			</then>
			<else>
				<prepare-test-build />
			</else>
		</if>

		<echo file="build.${user.name}.properties">sass.compiler.class.name=ruby</echo>

		<antcall inheritAll="false" target="setup-sdk" />

		<record action="start" name="${project.dir}/sass-compiler-log" />

		<gradle-execute dir="modules" task="buildCSS">
			<arg value="-Dmodules.only.build=true" />
		</gradle-execute>

		<record action="stop" name="${project.dir}/sass-compiler-log" />

		<fail message="The Sass compiler is not using Ruby.">
			<condition>
				<and>
					<not>
						<resourcecontains resource="${project.dir}/sass-compiler-log" substring="Using Ruby Sass compiler" />
					</not>
					<or>
						<resourcecontains resource="${project.dir}/sass-compiler-log" substring="Unable to load Ruby compiler, falling back to native" />
						<resourcecontains resource="${project.dir}/sass-compiler-log" substring="Using native Sass compiler" />
					</or>
				</and>
			</condition>
		</fail>
	</target>

	<target name="semantic-versioning-jdk8">
		<run-batch-test>
			<test-action>
				<echo>Checking for baseline log files.</echo>

				<var name="log.files" unset="true" />

				<fileset dir="${project.dir}" id="log.files">
					<include name="baseline-reports/*.log" />
					<include name="modules/**/baseline.log" />
				</fileset>

				<pathconvert pathsep="," property="log.files" refid="log.files" />

				<for list="${log.files}" param="log.file">
					<sequential>
						<print-file file.name="@{log.file}" />
					</sequential>
				</for>

				<if>
					<not>
						<equals arg1="${log.files}" arg2="" />
					</not>
					<then>
						<fail message="Semantic versioning is incorrect." />
					</then>
				</if>

				<echo>Check for baseline log files completed.</echo>
			</test-action>

			<test-set-up>
				<echo>Deleting stale baseline log files.</echo>

				<for param="log.file">
					<fileset dir="${project.dir}">
						<include name="baseline-reports/*.log" />
						<include name="modules/**/baseline.log" />
					</fileset>
					<sequential>
						<delete file="@{log.file}" />
					</sequential>
				</for>

				<echo file="build.${user.name}.properties">baseline.jar.report.level=persist</echo>

				<prepare-test-build />

				<if>
					<available file="${env.TOP_LEVEL_SHARED_DIR}/modules.base.dir.names.properties" />
					<then>
						<property file="${env.TOP_LEVEL_SHARED_DIR}/modules.base.dir.names.properties" />
					</then>
				</if>

				<if>
					<isset property="modules.base.dir.names.with.changes" />
					<then>
						<for list="${modules.base.dir.names.with.changes}" param="module.base.dir.name">
							<sequential>
								<var name="module.baseline.task.name" unset="true" />
								<var name="modules.base.dir.name" unset="true" />

								<propertyregex
									input="@{module.base.dir.name}"
									override="true"
									property="modules.base.dir.name"
									regexp="(.*/modules)(/.*)"
									replace="\1"
								/>

								<propertyregex
									input="@{module.base.dir.name}"
									override="true"
									property="module.baseline.task.name"
									regexp="(.*/modules)(/.*)"
									replace="\2"
								/>

								<antelope:stringutil property="module.baseline.task.name" string="${module.baseline.task.name}">
									<antelope:replace regex="/" replacement=":" />
								</antelope:stringutil>

								<var name="module.baseline.task.name" value="${module.baseline.task.name}:baseline" />

								<echo>Executing ${module.baseline.task.name} on ${modules.base.dir.name}.</echo>

								<gradle-execute dir="${modules.base.dir.name}" forcedcacheenabled="false" task="${module.baseline.task.name}" />

								<var name="module.baseline.task.name" unset="true" />
								<var name="modules.base.dir.name" unset="true" />
							</sequential>
						</for>
					</then>
				</if>
			</test-set-up>
		</run-batch-test>
	</target>

	<target name="service-builder-jdk8">
		<run-batch-test>
			<test-action>
				<gradle-execute dir="modules/util/portal-tools-service-builder" task="deploy">
					<arg value="clean" />
				</gradle-execute>

				<record action="start" name="${project.dir}/build.services.output.txt" />

				<ant dir="portal-impl" target="build-services" />

				<record action="stop" name="${project.dir}/build.services.output.txt" />

				<replaceregexp byline="true" file="${project.dir}/build.services.output.txt" match="Writing \/.+\/docroot\/WEB-INF\/src\/service\.properties" replace="" />
				<replace file="${project.dir}/build.services.output.txt" token="Writing src/service.properties" value="" />
				<replace file="${project.dir}/build.services.output.txt" token="Writing src/main/resources/service.properties" value="" />

				<loadfile property="build.services.output.txt.content" srcfile="${project.dir}/build.services.output.txt" />

				<delete file="${project.dir}/build.services.output.txt" />

				<if>
					<contains string="${build.services.output.txt.content}" substring="Writing " />
					<then>
						<exec executable="git">
							<arg value="diff" />
						</exec>

						<fail>
.

Detected build services changes. See above build services log for more
information. Make sure to commit in all build services results.
						</fail>
					</then>
				</if>
			</test-action>

			<test-set-up>
				<if>
					<isset property="env.DIST_PATH" />
					<then>
						<prepare-test-environment />
					</then>
					<else>
						<prepare-test-build />
					</else>
				</if>
			</test-set-up>
		</run-batch-test>
	</target>

	<target name="sybase-service-start">
		<local name="database.type" />

		<property name="database.type" value="sybase" />

		<get-database-property property.name="database.password" />
		<get-database-property property.name="database.schema" />
		<get-database-property property.name="database.username" />

		<clean-restart-sybase />

		<echo file="create-header.sql">use master
dump transaction master with no_log
go
alter database master on master=232
go
drop database lportal
go
exec sp_configure 'lock scheme', 0, datarows
go
create database lportal on master = "250m"
go
exec sp_dboption 'lportal', 'allow nulls by default' , true
go
exec sp_dboption 'lportal', 'select into/bulkcopy/pllsort' , true
go</echo>

		<retry retrycount="10">
			<sequential>
				<if>
					<not>
						<available file="/opt/sybase/charsets" />
					</not>
					<then>
						<clean-restart-sybase retry="true" />

						<fail message="Missing /opt/sybase/charsets." />
					</then>
				</if>

				<local name="output.content" />
				<local name="return.code" />

				<exec executable="${sybase.executable}" outputproperty="output.content" resultproperty="return.code">
					<arg value="-i" />
					<arg value="create-header.sql" />
					<arg value="-P" />
					<arg value="${database.password}" />
					<arg value="-S" />
					<arg value="${database.schema}" />
					<arg value="-U" />
					<arg value="${database.username}" />
				</exec>

				<echo>Return code: ${return.code}
Output:
${output.content}</echo>

				<if>
					<or>
						<contains string="${output.content}" substring="Database 'lportal' already exists" />
						<contains string="${output.content}" substring="sp_dboption" />
						<contains string="${output.content}" substring="The model database is unavailable. It is being used to create a new database." />
					</or>
					<then>
						<clean-restart-sybase retry="true" />

						<fail message="Output: ${output.content}" />
					</then>
				</if>

				<if>
					<not>
						<equals arg1="${return.code}" arg2="0" />
					</not>
					<then>
						<clean-restart-sybase retry="true" />

						<fail message="Return code: ${return.code}"  />
					</then>
				</if>
			</sequential>
		</retry>

		<delete file="create-header.sql" />
	</target>

	<target name="sybase-service-stop">
		<exec executable="service">
			<arg line="sybase stop" />
		</exec>

		<waitfor maxwait="60" maxwaitunit="second">
			<not>
				<socket port="5000" server="localhost" />
			</not>
		</waitfor>

		<antcall target="clean-up-sybase-processes" />
	</target>

	<target name="tck-jdk8">
		<run-batch-test tomcat.gc.log="true" tsant.gc.log="true">
			<test-action>
				<database-test-run-test database.type="mysql" stop.app.server="true">
					<test-action>
						<ant antfile="build-test-tck.xml" target="record-test-tck-package-names">
							<property name="test.class.groups.size" value="${test.batch.size}" />
						</ant>

						<ant antfile="build-test-tck.xml" target="test-class-group">
							<property name="test.class.group.index" value="${axis.variable}" />
						</ant>
					</test-action>
				</database-test-run-test>
			</test-action>

			<test-set-up>
				<if>
					<isset property="env.DIST_PATH" />
					<then>
						<prepare-test-environment />
					</then>
					<else>
						<prepare-test-build />
					</else>
				</if>

				<antcall target="prepare-portal-ext-properties">
					<param name="hot.deploy.dependency.management.enabled" value="false" />
				</antcall>

				<antcall target="prepare-system-ext-properties" />
			</test-set-up>
		</run-batch-test>
	</target>

	<target name="unit-jdk8">
		<run-batch-test>
			<test-action>
				<ant dir="portal-kernel" inheritAll="false" target="test-class-group">
					<property name="test.class.group.index" value="${axis.variable}" />
				</ant>

				<ant dir="portal-impl" inheritAll="false" target="test-class-group">
					<property name="test.class.group.index" value="${axis.variable}" />
					<property name="test.type" value="unit" />
				</ant>

				<ant dir="util-java" inheritAll="false" target="test-class-group">
					<property name="test.class.group.index" value="${axis.variable}" />
				</ant>
			</test-action>

			<test-set-up>
				<if>
					<isset property="env.DIST_PATH" />
					<then>
						<prepare-test-environment />

						<antcall inheritAll="false" target="record-test-class-file-names">
							<param name="test.class.groups.size" value="${test.batch.size}" />
						</antcall>
					</then>
					<else>
						<prepare-test-build-unit />
					</else>
				</if>
			</test-set-up>
		</run-batch-test>
	</target>

	<target name="upstream-functional-tomcat8-mysql56-jdk8">
		<run-functional-test app.server.type="tomcat" database.type="mysql" />
	</target>
</project>
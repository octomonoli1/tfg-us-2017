diff --git a/org/apache/commons/fileupload/FileUploadBase.java b/org/apache/commons/fileupload/FileUploadBase.java
index 4980ac1..3463911 100644
--- a/org/apache/commons/fileupload/FileUploadBase.java
+++ b/org/apache/commons/fileupload/FileUploadBase.java
@@ -958,7 +958,12 @@ public abstract class FileUploadBase {
 
             notifier = new MultipartStream.ProgressNotifier(listener,
                     ctx.getContentLength());
-            multi = new MultipartStream(input, boundary, notifier);
+            try {
+                multi = new MultipartStream(input, boundary, notifier);
+            }  catch (IllegalArgumentException iae) {
+                throw new InvalidContentTypeException(
+                    "The boundary specified in the " + CONTENT_TYPE + " header is too long", iae);
+            }
             multi.setHeaderEncoding(charEncoding);
 
             skipPreamble = true;
@@ -1129,7 +1134,7 @@ public abstract class FileUploadBase {
          * detail message.
          */
         public InvalidContentTypeException() {
-            // Nothing to do.
+            super();
         }
 
         /**
@@ -1141,6 +1146,10 @@ public abstract class FileUploadBase {
         public InvalidContentTypeException(String message) {
             super(message);
         }
+
+        public InvalidContentTypeException(String msg, Throwable cause) {
+            super(msg, cause);
+        }
     }
 
     /**
@@ -1377,3 +1386,4 @@ public abstract class FileUploadBase {
         listener = pListener;
     }
 }
+/* @generated */
\ No newline at end of file
diff --git a/org/apache/commons/fileupload/MultipartStream.java b/org/apache/commons/fileupload/MultipartStream.java
index cc2b7b2..390a06f 100644
--- a/org/apache/commons/fileupload/MultipartStream.java
+++ b/org/apache/commons/fileupload/MultipartStream.java
@@ -319,8 +319,7 @@ public class MultipartStream {
      * @param pNotifier The notifier, which is used for calling the
      *                  progress listener, if any.
      *
-     * @see #MultipartStream(InputStream, byte[],
-     *     MultipartStream.ProgressNotifier)
+     * @throws IllegalArgumentException If the buffer size is too small
      */
     MultipartStream(InputStream input,
             byte[] boundary,
@@ -333,9 +332,14 @@ public class MultipartStream {
 
         // We prepend CR/LF to the boundary to chop trailng CR/LF from
         // body-data tokens.
-        this.boundary = new byte[boundary.length + BOUNDARY_PREFIX.length];
         this.boundaryLength = boundary.length + BOUNDARY_PREFIX.length;
+        if (bufSize < this.boundaryLength + 1) {
+            throw new IllegalArgumentException(
+                    "The buffer size specified for the MultipartStream is too small");
+        }
+        this.boundary = new byte[this.boundaryLength];
         this.keepRegion = this.boundary.length;
+
         System.arraycopy(BOUNDARY_PREFIX, 0, this.boundary, 0,
                 BOUNDARY_PREFIX.length);
         System.arraycopy(boundary, 0, this.boundary, BOUNDARY_PREFIX.length,
@@ -355,8 +359,7 @@ public class MultipartStream {
      * @param pNotifier An object for calling the progress listener, if any.
      *
      *
-     * @see #MultipartStream(InputStream, byte[], int,
-     *     MultipartStream.ProgressNotifier)
+     * @see #MultipartStream(InputStream, byte[], int, ProgressNotifier)
      */
     MultipartStream(InputStream input,
             byte[] boundary,
@@ -1004,3 +1007,4 @@ public class MultipartStream {
         }
     }
 }
+/* @generated */
\ No newline at end of file

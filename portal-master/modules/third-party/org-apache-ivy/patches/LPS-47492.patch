diff --git a/org/apache/ivy/util/PropertiesFile.java b/org/apache/ivy/util/PropertiesFile.java
index f4d2048..6f82cde 100644
--- a/org/apache/ivy/util/PropertiesFile.java
+++ b/org/apache/ivy/util/PropertiesFile.java
@@ -17,11 +17,15 @@
  */
 package org.apache.ivy.util;
 
+import java.io.BufferedWriter;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.OutputStreamWriter;
+import java.util.Iterator;
 import java.util.Properties;
+import java.util.TreeSet;
 
 /**
  * A simple Properties extension easing the loading and saving of data
@@ -59,7 +63,27 @@ public class PropertiesFile extends Properties {
                 file.getParentFile().mkdirs();
             }
             fos = new FileOutputStream(file);
-            store(fos, header);
+
+			BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos, "8859_1"));
+
+			if (header != null) {
+				bw.write("#" + header);
+			}
+			bw.newLine();
+
+			synchronized (this) {
+				Iterator itr = new TreeSet(keySet()).iterator();
+
+				while (itr.hasNext()) {
+					String key = (String)itr.next();
+					String val = (String)get(key);
+					key = saveConvert(key, true);
+					val = saveConvert(val, false);
+					bw.write(key + "=" + val);
+					bw.newLine();
+				}
+			}
+			bw.flush();
         } catch (Exception ex) {
             Message.warn("exception occurred while writing properties file " + file, ex);
         }
@@ -72,4 +96,55 @@ public class PropertiesFile extends Properties {
         }
     }
 
+	/*
+     * escapes special characters with a preceding slash
+     */
+    private String saveConvert(String theString, boolean escapeSpace) {
+        int len = theString.length();
+        int bufLen = len * 2;
+        if (bufLen < 0) {
+            bufLen = Integer.MAX_VALUE;
+        }
+        StringBuffer outBuffer = new StringBuffer(bufLen);
+
+        for(int x=0; x<len; x++) {
+            char aChar = theString.charAt(x);
+            // Handle common case first, selecting largest block that
+            // avoids the specials below
+            if ((aChar > 61) && (aChar < 127)) {
+                if (aChar == '\\') {
+                    outBuffer.append('\\'); outBuffer.append('\\');
+                    continue;
+                }
+                outBuffer.append(aChar);
+                continue;
+            }
+            switch(aChar) {
+                case ' ':
+                    if (x == 0 || escapeSpace)
+                        outBuffer.append('\\');
+                    outBuffer.append(' ');
+                    break;
+                case '\t':outBuffer.append('\\'); outBuffer.append('t');
+                          break;
+                case '\n':outBuffer.append('\\'); outBuffer.append('n');
+                          break;
+                case '\r':outBuffer.append('\\'); outBuffer.append('r');
+                          break;
+                case '\f':outBuffer.append('\\'); outBuffer.append('f');
+                          break;
+                case '=': // Fall through
+                case ':': // Fall through
+                case '#': // Fall through
+                case '!':
+                    outBuffer.append('\\'); outBuffer.append(aChar);
+                    break;
+                default:
+					outBuffer.append(aChar);
+            }
+        }
+        return outBuffer.toString();
+    }
+
 }
+/* @generated */
\ No newline at end of file

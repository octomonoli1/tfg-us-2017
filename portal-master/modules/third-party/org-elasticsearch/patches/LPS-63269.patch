diff --git a/org/elasticsearch/bootstrap/JarHell.java b/org/elasticsearch/bootstrap/JarHell.java
index 775c147..ca2f28a 100644
--- a/org/elasticsearch/bootstrap/JarHell.java
+++ b/org/elasticsearch/bootstrap/JarHell.java
@@ -25,24 +25,13 @@
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 
-import java.io.IOException;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLClassLoader;
-import java.nio.file.FileVisitResult;
-import java.nio.file.Files;
 import java.nio.file.Path;
-import java.nio.file.SimpleFileVisitor;
-import java.nio.file.attribute.BasicFileAttributes;
 import java.util.Arrays;
-import java.util.Enumeration;
-import java.util.HashMap;
-import java.util.HashSet;
 import java.util.Locale;
 import java.util.Map;
-import java.util.Set;
-import java.util.jar.JarEntry;
-import java.util.jar.JarFile;
 import java.util.jar.Manifest;
 
 /**
@@ -150,62 +139,6 @@
      */
     @SuppressForbidden(reason = "needs JarFile for speed, just reading entries")
     public static void checkJarHell(URL urls[]) throws Exception {
-        ESLogger logger = Loggers.getLogger(JarHell.class);
-        // we don't try to be sneaky and use deprecated/internal/not portable stuff
-        // like sun.boot.class.path, and with jigsaw we don't yet have a way to get
-        // a "list" at all. So just exclude any elements underneath the java home
-        String javaHome = System.getProperty("java.home");
-        logger.debug("java.home: {}", javaHome);
-        final Map<String,Path> clazzes = new HashMap<>(32768);
-        Set<Path> seenJars = new HashSet<>();
-        for (final URL url : urls) {
-            final Path path = PathUtils.get(url.toURI());
-            // exclude system resources
-            if (path.startsWith(javaHome)) {
-                logger.debug("excluding system resource: {}", path);
-                continue;
-            }
-            if (path.toString().endsWith(".jar")) {
-                if (!seenJars.add(path)) {
-                    logger.debug("excluding duplicate classpath element: {}", path);
-                    continue; // we can't fail because of sheistiness with joda-time
-                }
-                logger.debug("examining jar: {}", path);
-                try (JarFile file = new JarFile(path.toString())) {
-                    Manifest manifest = file.getManifest();
-                    if (manifest != null) {
-                        checkManifest(manifest, path);
-                    }
-                    // inspect entries
-                    Enumeration<JarEntry> elements = file.entries();
-                    while (elements.hasMoreElements()) {
-                        String entry = elements.nextElement().getName();
-                        if (entry.endsWith(".class")) {
-                            // for jar format, the separator is defined as /
-                            entry = entry.replace('/', '.').substring(0, entry.length() - 6);
-                            checkClass(clazzes, entry, path);
-                        }
-                    }
-                }
-            } else {
-                logger.debug("examining directory: {}", path);
-                // case for tests: where we have class files in the classpath
-                final Path root = PathUtils.get(url.toURI());
-                final String sep = root.getFileSystem().getSeparator();
-                Files.walkFileTree(root, new SimpleFileVisitor<Path>() {
-                    @Override
-                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
-                        String entry = root.relativize(file).toString();
-                        if (entry.endsWith(".class")) {
-                            // normalize with the os separator
-                            entry = entry.replace(sep, ".").substring(0,  entry.length() - 6);
-                            checkClass(clazzes, entry, path);
-                        }
-                        return super.visitFile(file, attrs);
-                    }
-                });
-            }
-        }
     }
 
     /** inspect manifest for sure incompatibilities */
@@ -285,3 +218,4 @@
         }
     }
 }
+/* @generated */

/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.source.formatter.dependencies;

import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ConcurrentMap;

/**
 * @author Hugo Huijser
 */
public class TruncateLongLines extends ThisIsASuperClassThatAlsoHasASuperLongName {

	public String method1(String variable1, String variable2, String variable3, String variable4, String variable5, String variable6, String variable7, String variable8, String variable9, String variable10, String variable11, String variable12) throws Exception {
		return variable1;
	}

	public String method2(String variable1, String variable2, String variable3) throws Exception {
		return method1(variable1, variable2, variable3, variable1, variable2, variable3, variable1, variable2, variable3, variable1, variable2, variable3);
	}

	public String method3(
		String variable1, String variable2, String variable3, String variable4, String variable5) {

		String string1 = method1(variable1, variable2, variable3, variable1, variable2, variable3, variable1, variable2, variable3, variable1, variable2, variable3);

		String string2 = method1(
			variable1, variable2, variable3, variable1, variable2, variable3, variable1,
			variable2, variable3, variable1, variable2, variable3);

		return string1 + string2;
	}

	public void method4(
			String variable1, String variable2, String variable3, String variable4, String variable5)
		throws Exception {

		List<String> listWithFairlyLongName = new ArrayList<>();

		for (String stringWithAveryVeryVeryVeryVeryLongName : listWithFairlyLongName) {
			stringWithAveryVeryVeryVeryVeryLongName = variable1;	
		}
	}

	public String method5(
			String variable1, String variable2, String variable3, String variable4, String variable5,
			String variable6)
		throws Exception {

		String string1 = thisMethodHasSuchACrazyLongNameAndItJustBarelyFitsOnASingleLine(variable1);

		String string2 = thisMethodFitsOnASingleLineButItsParametersDoNot(variable1, variable2);

		return string1 + string2;
	}

	public String method6(String variable1, String variable2, String variable3, String variable4, String variable5, String variable6, String variable7, String variable8, String variable9, String variable10, String variable11, String variable12) throws Exception;

	public String method7(String variable1, String variable2, String variable3) throws Exception;

	public String method8(
		String variable1, String variable2, String variable3, String variable4, String variable5);

	public void method9(
			String variable1, String variable2, String variable3, String variable4, String variable5)
		throws Exception;

	public String method10(
			String variable1, String variable2, String variable3, String variable4, String variable5,
			String variable6)
		throws Exception;

	public void method11() {
		String testString1 = "test";
		String testString2 = "test";

		if (StringUtil.isLowerCase(testString1) || (Validator.isNotNull(testString1) && (StringUtil.toLowerCase(testString1) != StringUtil.toLowerCase(testString2)))) {
			return;
		}

		String testString3 = "test";

		if ((testString1.equals("hello world") || testString2.equals("hello world")) && ((testString1 != null) || ((testString3 != null) && testString3.equals("hello world")) || ((testString2 != null) && testString2.equals("hello world"))) && StringUtil.isLowerCase(testString3)) {
			return;
		}

		if (testString1.equals("hello1") || testString1.equals("hello2") || testString1.equals("hello3") || testString1.equals("hello4") || testString1.equals("hello5") || testString1.equals("hello6")) {
			return;
		}

		int thisIsAnIntegerWithARatherLongName1 = 0;
		int thisIsAnIntegerWithARatherLongName2 = 0;

		if ((thisIsAnIntegerWithARatherLongName1 == thisIsAnIntegerWithARatherLongName2) && testString1.equals(testString2)) {
			return;
		}
	}

	protected ConcurrentMap<String, String> concurrentMapWithARidiculouslyLongName;

	private class SubClass implements ThisIsAnotherClassWithYetAnotherSuperLongName {
	}

}
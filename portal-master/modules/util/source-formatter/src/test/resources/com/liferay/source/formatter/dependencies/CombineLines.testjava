/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.source.formatter.dependencies;

import aQute.bnd.annotation.metatype.Meta;

import com.liferay.dynamic.data.mapping.annotations.DDMFormField;
import com.liferay.portal.kernel.io.unsync.UnsyncBufferedReader;
import com.liferay.portal.kernel.io.unsync.UnsyncStringReader;
import com.liferay.portal.kernel.provider.AddPortletProvider;
import com.liferay.portal.kernel.provider.ViewPortletProvider;
import com.liferay.portal.kernel.util.SetUtil;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.StringUtil;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

/**
 * @author Hugo Huijser
 */
@Component(
	immediate = true,
	property = {
		"editor.config.key=contentEditor",
		"service.ranking:Integer=0"
	},
	service = {
		AddPortletProvider.class, ViewPortletProvider.class
	}
)
@Meta.OCD(
	id = "com.liferay.portal.tools.sourceformatter.CombineLines"
)
public class CombineLines
	extends SuperClass {

	public static final String
		STRING_1;

	@DDMFormField(
		label =
			"%field-with-a-long-name-so-it-will-surpass-the-max-number-of-characters-for-a-single-line",
		properties = {
			"tooltip=%tooltip-with-a-long-name-so-it-will-surpass-the-max-" +
				"number-of-characters-for-a-single-line"
		}
	)
	public List<String>
		getList() {

		return new ArrayList<>();
	}

	@Meta.AD(
		deflt = "false", required = false
	)
	public String getString1(
		String test) {

		return
			test;
	}

	public String getString2(String test) {
		return
			StringUtil.replace(
				test, "Hello World Hello World Hello",
				"World Hello World Hello World");
	}

	public String[][] getStringArray() {
		return new String[][] {
			new String[] {
				"hello", "world"
			}
		};
	}

	public void method1(
			String test1, String test2,
			String test3, String test4)
		throws Exception {

		int i1 = 0;
		int i2 = 0;

		if ((i1 == 0) ||
			(i2 == 0)) {
		}

		if (StringUtil.contains(
				test1, "Hello World Hello World Hello") ||
			StringUtil.contains(
				test2, "Hello World Hello World Hello World Hello")) {
		}
	}

	public void method2(
		String test1,
		String
			stringWithALongNameSoItDoesNotFitOnTheSameLineWithThePreviousOne) {

		return;
	}

	public void method3()
		throws Exception {

		String test1 = getString(
			"test1");

		String test2 =
			getString("test1", "test2", "test3", "test4", "test5", "test6");

		String test3 =
			getString(
				"test1", "test2", "test3", "test4", "test5", "test6", "test7");

		String test4 =
			getString("test1", "test2", "test3") + getString("test4", "test5");

		String test5 =
			getString(
				"test1", "test2", "test3", "test4", "test5", "test6", "test7",
				"test8", "test9", "test10", "test11", "test12", "test13",
				"test14", "test15", "test16", "test17", "test18", "test19");

		List<String> testList =
			new ArrayList<>();

		for (String test2 :
				testList) {
		}

		List<String> listWithALongNameSoThatItWillNotAllFitOnOneLine = new
			ArrayList<>();
	}

	public String method4() {
		String test1 = getString(
			"hello world" + "hello world" + "hello world" +
				"hello world");

		String test2 =
			"hello world" + "hello world" + "hello world" +
				"hello world";

		return test1 +
			test2;
	}

	public String method5() {
		String stringWithAFairlyMediumLongName =
			StringPool.
				GREATER_THAN_OR_EQUAL;

		return stringWithAFairlyMediumLongName;
	}

	public Set<String> method6() {
		Set<String> numbers =
			SetUtil.fromArray(
				new String[] {
					"One", "Two", "Three", "Four", "Five", "Six", "Seven",
					"Eight", "Nine", "Ten"
				});

		return numbers;
	}

	public String method7(String s) {
		return StringUtil.replace(
			s,
			new String[] {
				StringPool.PERIOD, StringPool.SLASH
			},
			new String[] {
				StringPool.COMMA, StringPool.BACK_SLASH
			});
	}

	public void method8(
		String string1, List<String>
			listWithAVeryLongNameThatThereforeByNoMeansFitsOnTheSameLine) {

		String anotherStringWithAVeryLongName = "Hello World";

		boolean b = StringUtil.contains(
			anotherStringWithAVeryLongName, StringUtil.trim(
				anotherStringWithAVeryLongName));

		boolean b2 = StringUtil.contains(
			test1, "Hello World" + "Hello World Hello" +
				"Hello World Hello World Hello World Hello World");

		boolean b3 = StringUtil.merge(
			new String[] {"One", "Two"},
			"Hello World");

		String s =
			"Hello World " +
				"Hello World Hello" + "Hello World Hello World Hello";
	}

	public void method9(String s) {
		try (UnsyncBufferedReader unsyncBufferedReader =
				new UnsyncBufferedReader(
					new UnsyncStringReader(s))) {

			return;
		}
	}

	protected final List<String>
		listWithAMediumLongVariableName = new ArrayList<>();
	protected final List<String>
		listWithAnLongerNameThanTheMediumLongNameOne =
			new ArrayList<>();

	private class SubClass1 extends
		SomeOtherClassWithALongNameThatDoesNotFitOnPreviousLine {
	}

	private class SubClass2 implements
		SomeOtherClassWithALongNameThatDoesNotFitOnPreviousLine {
	}

	private class SubClass3 extends MediumLongNameClass1
		implements MediumLongNameClass2 {
	}

	private class SubClass4
		extends MediumLongNameClass1
		implements MediumLongNameClass2 {
	}

	private class SubClass5 extends NameWithLongerThanMediumNameClass1
		implements NameWithLongerThanMediumNameClass2 {
	}

	private class SubClass6
		implements SomeOtherClass1, SomeOtherClass2, SomeOtherClass3,
		SomeOtherClass4, SomeOtherClass5, SomeOtherClass6 {
	}

	private class SubClass7
		implements SomeOtherClass1, SomeOtherClass2, SomeOtherClass3,
				   SomeOtherClass4,
				   SomeOtherClass5, SomeOtherClass6 {
	}

}
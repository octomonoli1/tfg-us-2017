import com.liferay.gradle.plugins.change.log.builder.BuildChangeLogTask
import com.liferay.gradle.util.FileUtil
import com.liferay.gradle.util.StringUtil
import com.liferay.gradle.util.copy.RenameDependencyClosure

import java.util.regex.Matcher

buildscript {
	apply from: file("build-buildscript.gradle"), to: buildscript
}

task buildFixPackChangeLog(type: BuildChangeLogTask)
task cleanReleng
task setUpPortalTools
task wrapper(type: Wrapper)

buildFixPackChangeLog {
	changeLogHeader = {
		File releaseInfoFile = file("../portal-kernel/src/com/liferay/portal/kernel/util/ReleaseInfo.java")

		Matcher matcher = (releaseInfoFile.text =~ /private static final String _VERSION = "(.+)";/)

		return matcher[0][1]
	}

	changeLogFile = "../.releng/fix-pack.changelog"
	dirs = ["../portal-impl", "../portal-kernel", "../portal-web", "../util-bridges", "../util-java", "../util-slf4j", "../util-taglib"]

	if (project.hasProperty("rangeStart")) {
		rangeStart = project.rangeStart
	}

	ticketIdPrefixes "LRQA"
}

cleanReleng << {
	File relengRootDir = file(".releng")

	FileTree relengFileTree = fileTree(dir: relengRootDir, include: "**/artifact.properties")

	relengFileTree.each {
		File relengFile ->

		File relengDir = relengFile.parentFile

		File moduleDir = file(FileUtil.relativize(relengDir, relengRootDir))

		if (!moduleDir.exists()) {
			delete relengDir

			println "Removed " + relativePath(relengDir)
		}
	}
}

repositories {
	mavenLocal()

	maven {
		url System.properties["repository.url"] ?: "https://cdn.lfrs.sl/repository.liferay.com/nexus/content/groups/public"
	}
}

wrapper {
	File wrapperDir = projectDir.parentFile

	distributionUrl = "../../tools/gradle-${gradle.gradleVersion}.LIFERAY-PATCHED-1-bin.zip"

	doLast {
		ant.replace(file: new File(wrapperDir, "gradlew")) {
			replacefilter token: '# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules', value: '''\
# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
DEFAULT_JVM_OPTS="$DEFAULT_JVM_OPTS -Dgradle.user.home=$APP_HOME/.gradle"'''

			replacefilter token: 'org.gradle.wrapper.GradleWrapperMain "$@"', value: 'org.gradle.wrapper.GradleWrapperMain --init-script=$APP_HOME/modules/init.gradle "$@"'
		}

		ant.replace(file: new File(wrapperDir, "gradlew.bat")) {
			replacefilter token: '@rem Setup the command line', value: '''\
@rem Setup the command line
set DEFAULT_JVM_OPTS=%DEFAULT_JVM_OPTS% -Dgradle.user.home=%APP_HOME%\\.gradle'''

			replacefilter token: 'org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%', value: 'org.gradle.wrapper.GradleWrapperMain --init-script=%APP_HOME%\\modules\\init.gradle %CMD_LINE_ARGS%'
		}
	}

	jarFile = new File(wrapperDir, "gradle/wrapper/gradle-wrapper.jar")
	scriptFile = new File(wrapperDir, "gradlew")
}

_createSetUpTasks()

private void _createSetUpTasks() {
	FileTree ivyXmlFileTree = fileTree(dir: "../tools/sdk", includes: ["ivy.xml", "dependencies/*/ivy.xml"])

	Properties portalToolVersions = _getPortalToolVersions()

	XmlSlurper xmlSlurper = new XmlSlurper()

	ivyXmlFileTree.each {
		File ivyXmlFile ->

		File portalToolDir = ivyXmlFile.parentFile

		String portalToolName = portalToolDir.name

		String portalToolSuffix = _getPortalToolSuffix(portalToolName)
		String portalToolVersion = portalToolVersions[portalToolName]

		Configuration portalToolConfiguration = configurations.create("portalTools" + portalToolSuffix)

		portalToolConfiguration.exclude group: "com.liferay.portal"

		if (portalToolVersion) {
			dependencies.add portalToolConfiguration.name, "com.liferay:${portalToolName}:${portalToolVersion}"
		}
		else {
			def ivyModuleNode = xmlSlurper.parse(ivyXmlFile)

			def dependencyNodes = ivyModuleNode.dependencies.children()

			dependencyNodes.each {
				String conf = it.@conf

				if (conf) {
					return
				}

				dependencies.add portalToolConfiguration.name, "${it.@org}:${it.@name}:${it.@rev}"
			}
		}

		Task portalToolTask = tasks.create(name: "setUp" + portalToolSuffix, type: Copy) {
			doLast {
				ant.checksum file: ivyXmlFile
			}

			from portalToolConfiguration
			into new File(portalToolDir, "lib")
			rename new RenameDependencyClosure(project, portalToolConfiguration.name)
		}

		setUpPortalTools.dependsOn portalToolTask
	}
}

private String _getPortalToolSuffix(String name) {
	String suffix = name.replaceAll(/\.(\w)/) {
		String s = it[1]

		s.toUpperCase()
	}

	return StringUtil.capitalize(suffix)
}

private Properties _getPortalToolVersions() {
	Properties properties = new Properties()

	InputStream inputStream = buildscript.classLoader.getResourceAsStream("com/liferay/gradle/plugins/dependencies/portal-tools.properties")

	inputStream.withCloseable {
		properties.load it
	}

	for (String name in properties.stringPropertyNames()) {
		String version = project.properties[name + ".version"]

		if (version) {
			properties.setProperty name, version
		}
	}

	return properties
}
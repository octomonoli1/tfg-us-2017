{"version":3,"sources":["DragScrollDelta.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAUM;;;;;;;AAIL,WAJK,eAIL,GAAc;yBAJT,iBAIS;;gDACb,0BADa;;;;;;;AAOb,SAAK,QAAL,GAAgB,0BAAhB;;;;;;;AAPa,QAcb,CAAK,gBAAL,GAAwB,EAAxB,CAda;;GAAd;;;;;;;AAJK,4BAwBL,6CAAkB;AACjB,2BAAM,eAAN,YADiB;AAEjB,QAAK,IAAL,GAFiB;AAGjB,QAAK,QAAL,GAAgB,IAAhB,CAHiB;;;AAxBb,4BAqCL,uCAAc,OAAO,OAAO;AAC3B,OAAI,cAAc;AACjB,gBAAY,mBAAS,aAAT,CAAuB,MAAM,aAAN,CAAnC;AACA,eAAW,mBAAS,YAAT,CAAsB,MAAM,aAAN,CAAjC;IAFG,CADuB;AAK3B,OAAI,WAAW,KAAK,gBAAL,CAAsB,KAAtB,CAAX,CALuB;AAM3B,QAAK,gBAAL,CAAsB,KAAtB,IAA+B,WAA/B,CAN2B;;AAQ3B,QAAK,IAAL,CAAU,aAAV,EAAyB;AACxB,YAAQ,YAAY,UAAZ,GAAyB,SAAS,UAAT;AACjC,YAAQ,YAAY,SAAZ,GAAwB,SAAS,SAAT;IAFjC,EAR2B;;;AArCvB,4BAyDL,uBAAM,UAAU,kBAAkB;AACjC,OAAI,iBAAiB,QAAjB,EAA2B,QAA3B,KAAwC,OAAxC,EAAiD;;;AAGpD,WAHoD;IAArD;;AAMA,QAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,iBAAiB,MAAjB,EAAyB,GAA7C,EAAkD;AACjD,QAAI,cAAI,QAAJ,CAAa,iBAAiB,CAAjB,CAAb,EAAkC,QAAlC,CAAJ,EAAiD;AAChD,UAAK,gBAAL,CAAsB,IAAtB,CAA2B;AAC1B,kBAAY,mBAAS,aAAT,CAAuB,iBAAiB,CAAjB,CAAvB,CAAZ;AACA,iBAAW,mBAAS,YAAT,CAAsB,iBAAiB,CAAjB,CAAtB,CAAX;MAFD,EADgD;;AAMhD,SAAI,QAAQ,KAAK,gBAAL,CAAsB,MAAtB,GAA+B,CAA/B,CANoC;AAOhD,UAAK,QAAL,CAAc,GAAd,CAAkB,cAAI,EAAJ,CAAO,iBAAiB,CAAjB,CAAP,EAA4B,QAA5B,EAAsC,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,EAA8B,KAA9B,CAAtC,CAAlB,EAPgD;KAAjD;IADD;;;AAhEI,4BAgFL,uBAAO;AACN,QAAK,QAAL,CAAc,kBAAd,GADM;AAEN,QAAK,gBAAL,GAAwB,EAAxB,CAFM;;;SAhFF;;;mBAsFS","file":"../../../node_modules/metal-drag-drop/src/helpers/DragScrollDelta.js","sourcesContent":["'use strict';\n\nimport dom from 'metal-dom';\nimport { EventEmitter, EventHandler } from 'metal-events';\nimport Position from 'metal-position';\n\n/**\n * Helper called by the `Drag` instance that emits an event whenever\n * the scroll position of the given containers change.\n */\nclass DragScrollDelta extends EventEmitter {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\t/**\n\t\t * `EventHandler` for the scroll events.\n\t\t * @type {EventHandler}\n\t\t * @protected\n\t\t */\n\t\tthis.handler_ = new EventHandler();\n\n\t\t/**\n\t\t * The scroll positions for the scroll elements that are being listened to.\n\t\t * @type {Array}\n\t\t * @protected\n\t\t */\n\t\tthis.scrollPositions_ = [];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tsuper.disposeInternal();\n\t\tthis.stop();\n\t\tthis.handler_ = null;\n\t}\n\n\t/**\n\t * Handles a \"scroll\" event, emitting a \"scrollDelta\" event with the\n\t * difference between the previous and new values.\n\t * @param {number} index\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleScroll_(index, event) {\n\t\tvar newPosition = {\n\t\t\tscrollLeft: Position.getScrollLeft(event.currentTarget),\n\t\t\tscrollTop: Position.getScrollTop(event.currentTarget)\n\t\t};\n\t\tvar position = this.scrollPositions_[index];\n\t\tthis.scrollPositions_[index] = newPosition;\n\n\t\tthis.emit('scrollDelta', {\n\t\t\tdeltaX: newPosition.scrollLeft - position.scrollLeft,\n\t\t\tdeltaY: newPosition.scrollTop - position.scrollTop\n\t\t});\n\t}\n\n\t/**\n\t * Starts listening to scroll changes on the given elements that contain\n\t * the current drag node.\n\t * @param {!Element} dragNode\n\t * @param {!Array<!Element>} scrollContainers\n\t */\n\tstart(dragNode, scrollContainers) {\n\t\tif (getComputedStyle(dragNode).position === 'fixed') {\n\t\t\t// If the drag node's position is \"fixed\", then its coordinates don't need to\n\t\t\t// be updated when parents are scrolled.\n\t\t\treturn;\n\t\t}\n\n\t\tfor (var i = 0; i < scrollContainers.length; i++) {\n\t\t\tif (dom.contains(scrollContainers[i], dragNode)) {\n\t\t\t\tthis.scrollPositions_.push({\n\t\t\t\t\tscrollLeft: Position.getScrollLeft(scrollContainers[i]),\n\t\t\t\t\tscrollTop: Position.getScrollTop(scrollContainers[i])\n\t\t\t\t});\n\n\t\t\t\tvar index = this.scrollPositions_.length - 1;\n\t\t\t\tthis.handler_.add(dom.on(scrollContainers[i], 'scroll', this.handleScroll_.bind(this, index)));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Stops listening to scroll changes.\n\t */\n\tstop() {\n\t\tthis.handler_.removeAllListeners();\n\t\tthis.scrollPositions_ = [];\n\t}\n}\n\nexport default DragScrollDelta;\n"],"sourceRoot":"/source/"}
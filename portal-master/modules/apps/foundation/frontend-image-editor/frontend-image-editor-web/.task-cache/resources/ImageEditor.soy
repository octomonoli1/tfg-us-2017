{namespace ImageEditor}

/**
 * Image Editor Component
 *
 * @param? history
 * @param id
 * @param? image
 * @param? imageEditorCapabilities
 * @param? imageEditorReady
 * @param? selectedControl
 * @param? selectedTool
 * @param? pathThemeImages
 * @param? strings
 *
 * Function References
 *
 * @param getImageEditorCanvas
 * @param getImageEditorImageData
 * @param requestImageEditorEdit
 * @param requestImageEditorPreview
 */
{template .render}
	<div id="{$id}">
		<div class="dialog-body">
			<div class="lfr-image-editor-image-container" id="{$id}ImageContainer">
				<img class="hide img-responsive" src="{$image}">
				<canvas class="fade {$imageEditorReady ? 'in' : ''} image-preview"></canvas>

				{call ImageEditorLoading.render data="all"}
					{param key: 'loading' /}
				{/call}
			</div>

			<div class="fade {$imageEditorReady ? 'in' : ''} lfr-image-editor-tools-container">
				{call .tools data="all"}
					{param getImageEditorCanvas: $getImageEditorCanvas /}
					{param getImageEditorImageData: $getImageEditorImageData /}
					{param requestImageEditorEdit: $requestImageEditorEdit /}
					{param requestImageEditorPreview: $requestImageEditorPreview /}
				{/call}
			</div>

			<div class="fade {$imageEditorReady and not $selectedTool ? 'in' : ''} lfr-image-editor-history-container">
				<div class="btn-group" role="group">
					<a class="btn btn-link {$history and $history.canUndo ? '' : 'disabled'} icon-monospaced" data-onclick="undo" href="javascript:;">
						<svg class="lexicon-icon">
							<use xlink:href="{$pathThemeImages}/lexicon/icons.svg#angle-left"></use>
						</svg>
					</a>

					<a class="btn btn-link {$history and $history.canReset ? '' : 'disabled'} icon-monospaced" data-onclick="reset" href="javascript:;">
						<svg class="lexicon-icon">
							<use xlink:href="{$pathThemeImages}/lexicon/icons.svg#restore"></use>
						</svg>
					</a>

					<a class="btn btn-link {$history and $history.canRedo ? '' : 'disabled'} icon-monospaced" data-onclick="redo" href="javascript:;">
						<svg class="lexicon-icon">
							<use xlink:href="{$pathThemeImages}/lexicon/icons.svg#angle-right"></use>
						</svg>
					</a>
				</div>
			</div>
		</div>

		<div class="button-holder dialog-footer">
			{let $hasChanges: $history and $history.canUndo /}

			{let $saveButtonAttributes kind="attributes"}
				class="btn btn-default btn-lg btn-primary {$hasChanges ? '' : 'disabled'}"
				data-onclick="save_"

				{if not $hasChanges}
					disabled="disabled"
				{/if}
			{/let}

			<button {$saveButtonAttributes}>
				<span class="lfr-btn-label">{$strings['save']}</span>
			</button>

			<button class="btn btn-cancel btn-default btn-lg btn-link" data-onclick="close_">
				<span class="lfr-btn-label">{$strings['cancel']}</span>
			</button>
		</div>
	</div>
{/template}

/**
 * Renders the list of tools and associated controls
 *
 * @param imageEditorCapabilities
 * @param? selectedTool
 */
{template .tools}
	<div class="controls text-center">
		<ul class="list-inline">
			{foreach $tool in $imageEditorCapabilities.tools}
				<li class="{$selectedTool == 'tool-' + index($tool) ? 'open' : ''}">
					{call .tool data="all"}
						{param tool: $tool /}
						{param toolIndex: index($tool) /}
					{/call}
				</li>
			{/foreach}
		</ul>
	</div>
{/template}

/**
 * Renders the required elements of an Image Editor Tool. This contains:
 * - Button (dropdown when the tool groups different controls) to enable the control
 * - Interface with the common Apply/Cancel buttons plus the custom control UI
 *
 * @param? pathThemeImages
 * @param tool
 * @param toolIndex
 */
{template .tool}
	{if length($tool.controls) > 1}
		{call .tool_dropdown data="all"}
			{param tool: $tool /}
		{/call}
	{else}
		{let $control : $tool.controls[0] /}

		<a class="btn" data-control="{$control.variant}" data-onclick="requestImageEditorEdit" data-tool="tool-{$toolIndex}" href="javascript:;">
			<svg class="icon-monospaced lexicon-icon">
				<use xlink:href="{$pathThemeImages}/lexicon/icons.svg#{$tool.icon}"></use>
			</svg>
		</a>

		{call .tool_control data="all"}
			{param control: $control /}
		{/call}
	{/if}
{/template}

/**
 * Renders a dropdown with all the available controls for this tool category
 *
 * @param? pathThemeImages
 * @param? requestImageEditorEdit
 * @param tool
 * @param toolIndex
 */
{template .tool_dropdown}
	{call Dropdown.render}
		{param header kind="html"}
			<a class="btn" data-onclick="toggle" href="javascript:;">
				<svg class="icon-monospaced lexicon-icon" data-icon="{$tool.icon}">
					<use xlink:href="{$pathThemeImages}/lexicon/icons.svg#{$tool.icon}"></use>
				</svg>
			</a>
		{/param}

		{param body kind="html"}
			{foreach $control in $tool.controls}
				<li data-onclick="toggle">
					<a data-control="{$control.variant}" data-onclick="{$requestImageEditorEdit}" data-tool="tool-{$toolIndex}">{$control.label}</a>
				</li>
			{/foreach}
		{/param}

		{param elementClasses: 'dropup' /}
		{param position: 0 /}
		{param positionClassOnMenu: true /}
	{/call}

	{foreach $control in $tool.controls}
		{call .tool_control data="all"}
			{param control: $control /}
		{/call}
	{/foreach}
{/template}

/**
 * Renders the common Apply/Cancel buttons necessary for completing an image edition plus the
 * custom UI for the selected control
 *
 * @param control
 * @param selectedControl
 * @param strings
 */
{template .tool_control}
	<div class="controls-container {$selectedControl and $selectedControl.label == $control.label ? 'open' : ''}">
		<div class="btn-space col-md-2 col-sm-2 col-xs-2">
			<button class="btn btn-link" data-onclick="accept">{$strings['apply']}</a>
		</div>
		<div class="col-md-8 col-sm-8 col-xs-8 tool-controls">
			{if $selectedControl and $selectedControl.label == $control.label}
				{call .active_controls data="all"}
					{param modulePath: $control.modulePath /}
					{param variant: $control.variant /}
				{/call}
			{/if}
		</div>
		<div class="btn-space col-md-2 col-sm-2 col-xs-2">
			<button class="btn btn-link" data-onclick="discard">{$strings['cancel']}</a>
		</div>
	</div>
{/template}

/**
 * Renders the controls of the tool currently active. All tool controls need
 * to expose a variant of the ImageEditor.Controls delegated template
 * with the name of the controls they expose
 *
 * @param id
 * @param variant
 */
{template .active_controls}
	{delcall ImageEditor.Controls allowemptydefault="true" variant="$variant" data="all" }
		{param key: $id + '_selected_control_' + $variant /}
	{/delcall}
{/template}

/**
 * Default ImageEditor.Controls implementation. This implementation serves
 * as a mere placeholder for the incr-dom compiler. Tools are expected to
 * provide their own ImageEditor.Controls implementation to activate their
 * UIs and components.
 */
{deltemplate ImageEditor.Controls}
{/deltemplate}
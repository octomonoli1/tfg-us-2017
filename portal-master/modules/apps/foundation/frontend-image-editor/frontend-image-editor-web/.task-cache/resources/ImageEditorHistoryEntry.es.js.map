{"version":3,"sources":["/source/ImageEditorHistoryEntry.es.js"],"names":[],"mappings":";;;;;;;;;;;;;KASM;;;;;AAIL,WAJK,uBAIL,CAAY,KAAZ,EAAmB;;;yBAJd,yBAIc;;AAClB,QAAK,YAAL,GAAoB,gCAAuB,UAAC,OAAD,EAAU,MAAV,EAAqB;;AAE/D,QAAI,MAAM,GAAN,IAAa,CAAC,MAAM,IAAN,EAAY;AAC7B,WAAK,SAAL,CAAe,MAAM,GAAN,CAAf,CACE,IADF,CACO,UAAC,SAAD;aAAe,QAAQ,SAAR;MAAf,CADP,CAD6B;KAA9B,MAIK;AACJ,aAAQ,MAAM,IAAN,CAAR,CADI;KAJL;IAF0C,CAA3C,CADkB;GAAnB;;;;;;;;;;AAJK,oCAuBL,+BAAU,UAAU;AACnB,UAAO,gCAAuB,UAAC,OAAD,EAAU,MAAV,EAAqB;AAClD,QAAI,cAAc,IAAI,KAAJ,EAAd,CAD8C;;AAGlD,gBAAY,MAAZ,GAAqB,YAAM;AAC1B,SAAI,eAAe,SAAS,aAAT,CAAuB,QAAvB,CAAf,CADsB;AAE1B,SAAI,gBAAgB,aAAa,UAAb,CAAwB,IAAxB,CAAhB,CAFsB;;AAI1B,SAAI,SAAS,YAAY,MAAZ,CAJa;AAK1B,SAAI,QAAQ,YAAY,KAAZ,CALc;;AAO1B,kBAAa,KAAb,GAAqB,KAArB,CAP0B;AAQ1B,kBAAa,MAAb,GAAsB,MAAtB,CAR0B;;AAU1B,mBAAc,SAAd,CAAwB,WAAxB,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,KAA3C,EAAkD,MAAlD,EAV0B;;AAY1B,aAAQ,cAAc,YAAd,CAA2B,CAA3B,EAA8B,CAA9B,EAAiC,KAAjC,EAAwC,MAAxC,CAAR,EAZ0B;KAAN,CAH6B;;AAkBlD,gBAAY,GAAZ,GAAkB,QAAlB,CAlBkD;IAArB,CAA9B,CADmB;;;AAvBf,oCAmDL,uCAAe;AACd,UAAO,KAAK,YAAL,CADO;;;SAnDV;;;mBAwDS","sourcesContent":["import { CancellablePromise } from 'metal-promise/src/promise/Promise';\n\n/**\n * Image Editor History Entry\n *\n * This class models a step in the image edition process. It stores the\n * Image data at a given point in time so it can be later recovered for\n * undo/redo purposes or other visualization needs.\n */\nclass ImageEditorHistoryEntry {\n\t/**\n\t * Constructor\n\t */\n\tconstructor(image) {\n\t\tthis.dataPromise_ = new CancellablePromise((resolve, reject) => {\n\t\t\t// Preemtively fetch the imageData when all we have is the image url\n\t\t\tif (image.url && !image.data) {\n\t\t\t\tthis.loadData_(image.url)\n\t\t\t\t\t.then((imageData) => resolve(imageData));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresolve(image.data);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Fetches an ImageData for a given image url\n\t *\n\t * @param  {String} imageURL The image url to load\n\t * @protected\n\t */\n\tloadData_(imageURL) {\n\t\treturn new CancellablePromise((resolve, reject) => {\n\t\t\tlet bufferImage = new Image();\n\n\t\t\tbufferImage.onload = () => {\n\t\t\t\tlet bufferCanvas = document.createElement('canvas');\n\t\t\t\tlet bufferContext = bufferCanvas.getContext('2d');\n\n\t\t\t\tlet height = bufferImage.height;\n\t\t\t\tlet width = bufferImage.width;\n\n\t\t\t\tbufferCanvas.width = width;\n\t\t\t\tbufferCanvas.height = height;\n\n\t\t\t\tbufferContext.drawImage(bufferImage, 0, 0, width, height);\n\n\t\t\t\tresolve(bufferContext.getImageData(0, 0, width, height));\n\t\t\t};\n\n\t\t\tbufferImage.src = imageURL;\n\t\t});\n\t}\n\n\t/**\n\t * Fetches the stored ImageData of this history entry\n\t *\n\t * @return {CancellablePromise} A promise that will resolve with the stored ImageData value\n\t */\n\tgetImageData() {\n\t\treturn this.dataPromise_;\n\t}\n}\n\nexport default ImageEditorHistoryEntry;"]}
{"version":3,"sources":["DomEventEmitterProxy.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAUM;;;;;;;;;iCASL,qCAAa,OAAO,UAAU;AAC7B,OAAI,KAAK,cAAL,CAAoB,gBAApB,EAAsC;AACzC,QAAI,KAAK,gBAAL,CAAsB,KAAtB,CAAJ,EAAkC;AACjC,SAAI,QAAQ,MAAM,OAAN,CAAc,GAAd,EAAmB,CAAnB,CAAR,CAD6B;AAEjC,SAAI,YAAY,MAAM,SAAN,CAAgB,CAAhB,EAAmB,KAAnB,CAAZ,CAF6B;AAGjC,SAAI,WAAW,MAAM,SAAN,CAAgB,QAAQ,CAAR,CAA3B,CAH6B;AAIjC,YAAO,cAAI,QAAJ,CAAa,KAAK,cAAL,EAAqB,SAAlC,EAA6C,QAA7C,EAAuD,QAAvD,CAAP,CAJiC;KAAlC,MAKO;AACN,YAAO,cAAI,EAAJ,CAAO,KAAK,cAAL,EAAqB,KAA5B,EAAmC,QAAnC,CAAP,CADM;KALP;IADD,MASO;AACN,WAAO,6BAAM,YAAN,YAAmB,KAAnB,EAA0B,QAA1B,CAAP,CADM;IATP;;;AAVI,iCA8BL,6CAAiB,OAAO;AACvB,UAAO,MAAM,MAAN,CAAa,CAAb,EAAgB,CAAhB,MAAuB,WAAvB,CADgB;;;AA9BnB,iCAuCL,qDAAqB,OAAO;AAC3B,OAAI,CAAC,KAAK,cAAL,IAAuB,CAAC,KAAK,cAAL,CAAoB,gBAApB,EAAsC;AAClE,WAAO,IAAP,CADkE;IAAnE;AAGA,UAAO,IAAC,CAAK,gBAAL,CAAsB,KAAtB,KAAgC,MAAM,OAAN,CAAc,GAAd,EAAmB,CAAnB,MAA0B,CAAC,CAAD,IACjE,cAAI,aAAJ,CAAkB,KAAK,cAAL,EAAqB,KAAvC,CADM,CAJoB;;;AAvCvB,iCAsDL,+CAAkB,OAAO;AACxB,UAAO,6BAAM,iBAAN,YAAwB,KAAxB,KAAkC,KAAK,oBAAL,CAA0B,KAA1B,CAAlC,CADiB;;;SAtDpB;;;mBA2DS","file":"../../../node_modules/metal-dom/src/DomEventEmitterProxy.js","sourcesContent":["'use strict';\n\nimport dom from './dom';\nimport { EventEmitterProxy } from 'metal-events';\n\n/**\n * DomEventEmitterProxy utility. It extends `EventEmitterProxy` to also accept\n * dom elements as origin emitters.\n * @extends {EventEmitterProxy}\n */\nclass DomEventEmitterProxy extends EventEmitterProxy {\n\t/**\n\t * Adds the given listener for the given event.\n\t * @param {string} event.\n\t * @param {!function()} listener\n\t * @return {!EventHandle} The listened event's handle.\n\t * @protected\n\t * @override\n\t */\n\taddListener_(event, listener) {\n\t\tif (this.originEmitter_.addEventListener) {\n\t\t\tif (this.isDelegateEvent_(event)) {\n\t\t\t\tvar index = event.indexOf(':', 9);\n\t\t\t\tvar eventName = event.substring(9, index);\n\t\t\t\tvar selector = event.substring(index + 1);\n\t\t\t\treturn dom.delegate(this.originEmitter_, eventName, selector, listener);\n\t\t\t} else {\n\t\t\t\treturn dom.on(this.originEmitter_, event, listener);\n\t\t\t}\n\t\t} else {\n\t\t\treturn super.addListener_(event, listener);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given event is of the delegate type.\n\t * @param {string} event\n\t * @return {boolean}\n\t * @protected\n\t */\n\tisDelegateEvent_(event) {\n\t\treturn event.substr(0, 9) === 'delegate:';\n\t}\n\n\t/**\n\t * Checks if the given event is supported by the origin element.\n\t * @param {string} event\n\t * @protected\n\t */\n\tisSupportedDomEvent_(event) {\n\t\tif (!this.originEmitter_ || !this.originEmitter_.addEventListener) {\n\t\t\treturn true;\n\t\t}\n\t\treturn (this.isDelegateEvent_(event) && event.indexOf(':', 9) !== -1) ||\n\t\t\tdom.supportsEvent(this.originEmitter_, event);\n\t}\n\n\t/**\n\t * Checks if the given event should be proxied.\n\t * @param {string} event\n\t * @return {boolean}\n\t * @protected\n\t * @override\n\t */\n\tshouldProxyEvent_(event) {\n\t\treturn super.shouldProxyEvent_(event) && this.isSupportedDomEvent_(event);\n\t}\n}\n\nexport default DomEventEmitterProxy;\n"],"sourceRoot":"/source/"}
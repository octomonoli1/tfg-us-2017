{"version":3,"sources":["ComponentRenderer.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAQM;;;;;;;;;AAML,WANK,iBAML,CAAY,SAAZ,EAAuB;yBANlB,mBAMkB;;gDACtB,0BADsB;;AAEtB,SAAK,UAAL,GAAkB,SAAlB,CAFsB;;AAItB,SAAK,wBAAL,GAAgC,0BAAhC,CAJsB;AAKtB,SAAK,wBAAL,CAA8B,GAA9B,CACC,MAAK,UAAL,CAAgB,IAAhB,CAAqB,QAArB,EAA+B,MAAK,MAAL,CAAY,IAAZ,OAA/B,CADD,EALsB;AAQtB,SAAK,EAAL,CAAQ,UAAR,EAAoB,MAAK,eAAL,CAApB,CARsB;;AAUtB,OAAI,MAAK,UAAL,CAAgB,WAAhB,CAA4B,mBAA5B,EAAiD;AACpD,UAAK,wBAAL,CAA8B,GAA9B,CACC,MAAK,UAAL,CAAgB,EAAhB,CACC,iBADD,EAEC,MAAK,uCAAL,CAA6C,IAA7C,OAFD,CADD,EADoD;IAArD,MAOO;AACN,UAAK,wBAAL,CAA8B,GAA9B,CACC,MAAK,UAAL,CAAgB,EAAhB,CACC,cADD,EAEC,MAAK,oCAAL,CAA0C,IAA1C,OAFD,CADD,EADM;IAPP;gBAVsB;GAAvB;;;;;;;AANK,8BAoCL,6CAAkB;AACjB,QAAK,wBAAL,CAA8B,kBAA9B,GADiB;AAEjB,QAAK,wBAAL,GAAgC,IAAhC,CAFiB;;;AApCb,8BAkDL,qFAAqC,SAAS;AAC7C,OAAI,KAAK,eAAL,CAAqB,OAArB,CAAJ,EAAmC;AAClC,SAAK,MAAL,CAAY,OAAZ,EADkC;IAAnC;;;AAnDI,8BA+DL,2FAAwC,MAAM;AAC7C,OAAM,UAAU;AACf,iCACE,KAAK,GAAL,EAAW,KADb;IADK,CADuC;AAM7C,OAAI,KAAK,eAAL,CAAqB,OAArB,CAAJ,EAAmC;AAClC,SAAK,MAAL,CAAY,OAAZ,EADkC;IAAnC;;;AArEI,8BA8EL,6CAAkB;AACjB,QAAK,WAAL,GAAmB,IAAnB,CADiB;;;AA9Eb,8BAwFL,+DAA0B,SAAS;AAClC,OAAI,QAAQ,OAAO,IAAP,CAAY,OAAZ,EAAqB,MAArB,CADsB;AAElC,OAAI,QAAQ,cAAR,CAAuB,SAAvB,CAAJ,EAAuC;AACtC,YADsC;IAAvC;AAGA,UAAO,QAAQ,CAAR,CAL2B;;;AAxF9B,8BAmGL,2BAAS;AACR,OAAI,CAAC,KAAK,UAAL,CAAgB,OAAhB,EAAyB;AAC7B,SAAK,UAAL,CAAgB,OAAhB,GAA0B,SAAS,aAAT,CAAuB,KAAvB,CAA1B,CAD6B;IAA9B;AAGA,QAAK,IAAL,CAAU,UAAV,EAAsB,CAAC,KAAK,WAAL,CAAvB,CAJQ;;;AAnGJ,8BAgHL,2CAAgB,SAAS;AACxB,UAAO,KAAK,WAAL,IACN,CAAC,KAAK,YAAL,IACD,KAAK,yBAAL,CAA+B,QAAQ,OAAR,CAFzB,CADiB;;;AAhHpB,8BAyHL,+CAAmB;AAClB,QAAK,YAAL,GAAoB,IAApB,CADkB;;;AAzHd,8BAgIL,6CAAkB;AACjB,QAAK,YAAL,GAAoB,KAApB,CADiB;;;AAhIb,8BA2IL,2BAAS;;SA3IJ;;;mBA8IS","file":"../../../node_modules/metal-component/src/ComponentRenderer.js","sourcesContent":["'use strict';\n\nimport { EventEmitter, EventHandler } from 'metal-events';\n\n/**\n * Base class that component renderers should extend from. It defines the\n * required methods all renderers should have.\n */\nclass ComponentRenderer extends EventEmitter {\n\t/**\n\t * Constructor function for `ComponentRenderer`.\n\t * @param {!Component} component The component that this renderer is\n\t *     responsible for.\n\t */\n\tconstructor(component) {\n\t\tsuper();\n\t\tthis.component_ = component;\n\n\t\tthis.componentRendererEvents_ = new EventHandler();\n\t\tthis.componentRendererEvents_.add(\n\t\t\tthis.component_.once('render', this.render.bind(this))\n\t\t);\n\t\tthis.on('rendered', this.handleRendered_);\n\n\t\tif (this.component_.constructor.SYNC_UPDATES_MERGED) {\n\t\t\tthis.componentRendererEvents_.add(\n\t\t\t\tthis.component_.on(\n\t\t\t\t\t'stateKeyChanged',\n\t\t\t\t\tthis.handleComponentRendererStateKeyChanged_.bind(this)\n\t\t\t\t)\n\t\t\t);\n\t\t} else {\n\t\t\tthis.componentRendererEvents_.add(\n\t\t\t\tthis.component_.on(\n\t\t\t\t\t'stateChanged',\n\t\t\t\t\tthis.handleComponentRendererStateChanged_.bind(this)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.componentRendererEvents_.removeAllListeners();\n\t\tthis.componentRendererEvents_ = null;\n\t}\n\n\t/**\n\t * Handles a `stateChanged` event from this renderer's component. Calls the\n\t * `update` function if the component has already been rendered for the first\n\t * time.\n\t * @param {!Object<string, Object>} changes Object containing the names\n\t *     of all changed state keys, each mapped to an object with its new\n\t *     (newVal) and previous (prevVal) values.\n\t * @protected\n\t */\n\thandleComponentRendererStateChanged_(changes) {\n\t\tif (this.shouldRerender_(changes)) {\n\t\t\tthis.update(changes);\n\t\t}\n\t}\n\n\t/**\n\t * Handles a `stateKeyChanged` event from this renderer's component. This is\n\t * similar to `handleComponentRendererStateChanged_`, but only called for\n\t * components that have requested updates to happen synchronously.\n\t * @param {!{key: string, newVal: *, prevVal: *}} data\n\t * @protected\n\t */\n\thandleComponentRendererStateKeyChanged_(data) {\n\t\tconst changes = {\n\t\t\tchanges: {\n\t\t\t\t[data.key]: data\n\t\t\t}\n\t\t};\n\t\tif (this.shouldRerender_(changes)) {\n\t\t\tthis.update(changes);\n\t\t}\n\t}\n\n\t/**\n\t * Handles the \"rendered\" event.\n\t * @protected\n\t */\n\thandleRendered_() {\n\t\tthis.isRendered_ = true;\n\t}\n\n\t/**\n\t * Checks if any other state property besides \"element\" has changed.\n\t * @param {!Object} changes\n\t * @return {boolean}\n\t * @protected\n\t */\n\thasChangedBesidesElement_(changes) {\n\t\tvar count = Object.keys(changes).length;\n\t\tif (changes.hasOwnProperty('element')) {\n\t\t\tcount--;\n\t\t}\n\t\treturn count > 0;\n\t}\n\n\t/**\n\t * Renders the component's whole content (including its main element).\n\t */\n\trender() {\n\t\tif (!this.component_.element) {\n\t\t\tthis.component_.element = document.createElement('div');\n\t\t}\n\t\tthis.emit('rendered', !this.isRendered_);\n\t}\n\n\t/**\n\t * Checks if the given changes object should cause a rerender.\n\t * @param {!Object} changes\n\t * @return {boolean}\n\t * @protected\n\t */\n\tshouldRerender_(changes) {\n\t\treturn this.isRendered_ &&\n\t\t\t!this.skipUpdates_ &&\n\t\t\tthis.hasChangedBesidesElement_(changes.changes);\n\t}\n\n\t/**\n\t * Skips updates until `stopSkipUpdates` is called.\n\t */\n\tstartSkipUpdates() {\n\t\tthis.skipUpdates_ = true;\n\t}\n\n\t/**\n\t * Stops skipping updates.\n\t */\n\tstopSkipUpdates() {\n\t\tthis.skipUpdates_ = false;\n\t}\n\n\t/**\n\t * Updates the component's element html. This is automatically called when\n\t * the value of at least one of the component's state keys has changed.\n\t * @param {Object.<string, Object>} changes Object containing the names\n\t *     of all changed state keys, each mapped to an object with its new\n\t *     (newVal) and previous (prevVal) values.\n\t */\n\tupdate() {}\n}\n\nexport default ComponentRenderer;\n"],"sourceRoot":"/source/"}
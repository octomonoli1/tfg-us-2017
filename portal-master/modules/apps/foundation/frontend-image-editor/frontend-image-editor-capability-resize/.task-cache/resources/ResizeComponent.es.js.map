{"version":3,"sources":["/source/ResizeComponent.es.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAYM;;;;;;;;;4BAIL,+BAAW;;;AACV,QAAK,uBAAL,GACE,IADF,CACO,UAAC,SAAD,EAAe;AACpB,WAAK,UAAL,GAAkB,UAAU,KAAV,CADE;AAEpB,WAAK,WAAL,GAAmB,UAAU,MAAV,CAFC;;AAIpB,WAAK,WAAL,GAAmB,OAAK,UAAL,GAAkB,OAAK,WAAL,CAJjB;;AAMpB,WAAK,iBAAL,GAAyB,OAAK,OAAL,CAAa,aAAb,CAA2B,MAAM,OAAK,GAAL,GAAW,QAAjB,CAApD,CANoB;AAOpB,WAAK,gBAAL,GAAwB,OAAK,OAAL,CAAa,aAAb,CAA2B,MAAM,OAAK,GAAL,GAAW,OAAjB,CAAnD,CAPoB;;AASpB,WAAK,eAAL,GAAuB,IAAvB,CAToB;IAAf,CADP,CADU;;;AAJN,4BA0BL,2BAAQ,WAAW;AAClB,UAAO,4BAAmB,OAAnB,CAA2B,KAAK,gBAAL,CAAsB,SAAtB,CAA3B,CAAP,CADkB;;;AA1Bd,4BAqCL,6CAAiB,WAAW;AAC3B,OAAI,YAAY,SAAS,aAAT,CAAuB,QAAvB,CAAZ,CADuB;AAE3B,aAAU,KAAV,GAAkB,UAAU,KAAV,CAFS;AAG3B,aAAU,MAAV,GAAmB,UAAU,MAAV,CAHQ;;AAK3B,aAAU,UAAV,CAAqB,IAArB,EAA2B,YAA3B,CAAwC,SAAxC,EAAmD,CAAnD,EAAsD,CAAtD,EAL2B;;AAO3B,OAAI,SAAS,SAAS,aAAT,CAAuB,QAAvB,CAAT,CAPuB;AAQ3B,UAAO,KAAP,GAAe,KAAK,UAAL,CARY;AAS3B,UAAO,MAAP,GAAgB,KAAK,WAAL,CATW;;AAW3B,OAAI,UAAU,OAAO,UAAP,CAAkB,IAAlB,CAAV,CAXuB;AAY3B,WAAQ,SAAR,CAAkB,SAAlB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAK,UAAL,EAAiB,KAAK,WAAL,CAApD,CAZ2B;;AAc3B,UAAO,QAAQ,YAAR,CAAqB,CAArB,EAAwB,CAAxB,EAA2B,KAAK,UAAL,EAAiB,KAAK,WAAL,CAAnD,CAd2B;;;AArCvB,4BA2DL,yCAAe,OAAO;AACrB,OAAI,WAAW,SAAS,MAAM,cAAN,CAAqB,KAArB,EAA4B,EAArC,CAAX,CADiB;;AAGrB,OAAI,MAAM,cAAN,KAAyB,KAAK,gBAAL,EAAuB;AACnD,SAAK,UAAL,GAAkB,QAAlB,CADmD;;AAGnD,QAAI,KAAK,eAAL,EAAsB;AACzB,UAAK,WAAL,GAAmB,SAAU,WAAW,KAAK,WAAL,EAAmB,EAAxC,CAAnB,CADyB;AAEzB,UAAK,iBAAL,CAAuB,KAAvB,GAA+B,KAAK,WAAL,CAFN;KAA1B;IAHD,MAOO;AACN,SAAK,WAAL,GAAmB,QAAnB,CADM;;AAGN,QAAI,KAAK,eAAL,EAAsB;AACzB,UAAK,UAAL,GAAkB,SAAU,WAAW,KAAK,WAAL,EAAmB,EAAxC,CAAlB,CADyB;AAEzB,UAAK,gBAAL,CAAsB,KAAtB,GAA8B,KAAK,UAAL,CAFL;KAA1B;IAVD;;;AA9DI,4BAsFL,uDAAsB,OAAO;AAC5B,QAAK,eAAL,GAAuB,CAAC,KAAK,eAAL,CADI;;;SAtFxB;;;;;;;;AAgGN,iBAAgB,KAAhB,GAAwB;;;;;AAKvB,2BAAyB;AACxB,cAAW,eAAK,UAAL;GADZ;EALD;;;AAWA,eAAI,QAAJ,CAAa,eAAb;;mBAEe","sourcesContent":["import Component from 'metal-component/src/Component';\nimport Soy from 'metal-soy/src/Soy';\n\nimport core from 'metal/src/core';\nimport { CancellablePromise } from 'metal-promise/src/promise/Promise';\n\nimport componentTemplates from './ResizeComponent.soy';\nimport controlsTemplates from './ResizeControls.soy';\n\n/**\n * Resize Component\n */\nclass ResizeComponent extends Component {\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\tthis.getImageEditorImageData()\n\t\t\t.then((imageData) => {\n\t\t\t\tthis.imageWidth = imageData.width;\n\t\t\t\tthis.imageHeight = imageData.height;\n\n\t\t\t\tthis.imageRatio_ = this.imageWidth / this.imageHeight;\n\n\t\t\t\tthis.imageHeightInput_ = this.element.querySelector('#' + this.key + 'Height');\n\t\t\t\tthis.imageWidthInput_ = this.element.querySelector('#' + this.key + 'Width');\n\n\t\t\t\tthis.lockProportions = true;\n\t\t\t});\n\t}\n\n\t/**\n\t * Executes the resize operation to get the final version of the image.\n\t *\n\t * @param  {ImageData} imageData ImageData representation of the image.\n\t * @return {CancellablePromise} A promise that will resolve with the\n\t * resized image data representation.\n\t */\n\tprocess(imageData) {\n\t\treturn CancellablePromise.resolve(this.resizeImageData_(imageData));\n\t}\n\n\t/**\n\t * Resizes a given ImageData to the user selected width and height values.\n\t *\n\t * @param  {ImageData} imageData The original ImageData\n\t * @return {ImageData} Resized ImageData to the component width and\n\t * height user selected values.\n\t */\n\tresizeImageData_(imageData) {\n\t\tlet rawCanvas = document.createElement('canvas');\n\t\trawCanvas.width = imageData.width;\n\t\trawCanvas.height = imageData.height;\n\n\t\trawCanvas.getContext('2d').putImageData(imageData, 0, 0);\n\n\t\tlet canvas = document.createElement('canvas');\n\t\tcanvas.width = this.imageWidth;\n\t\tcanvas.height = this.imageHeight;\n\n\t\tlet context = canvas.getContext('2d');\n\t\tcontext.drawImage(rawCanvas, 0, 0, this.imageWidth, this.imageHeight);\n\n\t\treturn context.getImageData(0, 0, this.imageWidth, this.imageHeight);\n\t}\n\n\t/**\n\t * Keeps the width/height ratio when the lockProportions is set to true.\n\t *\n\t * @param  {InputEvent} event\n\t */\n\tsyncDimensions(event) {\n\t\tlet newValue = parseInt(event.delegateTarget.value, 10);\n\n\t\tif (event.delegateTarget === this.imageWidthInput_) {\n\t\t\tthis.imageWidth = newValue;\n\n\t\t\tif (this.lockProportions) {\n\t\t\t\tthis.imageHeight = parseInt((newValue / this.imageRatio_), 10);\n\t\t\t\tthis.imageHeightInput_.value = this.imageHeight;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.imageHeight = newValue;\n\n\t\t\tif (this.lockProportions) {\n\t\t\t\tthis.imageWidth = parseInt((newValue * this.imageRatio_), 10);\n\t\t\t\tthis.imageWidthInput_.value = this.imageWidth;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Toggles the value of the lockProportions attribute. When enabled, changes\n\t * in one of the dimensions will cascade changes to the other in order to keep\n\t * the original image ratio.\n\t *\n\t * @param  {MouseEvent} event\n\t */\n\ttoggleLockProportions(event) {\n\t\tthis.lockProportions = !this.lockProportions;\n\t}\n}\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nResizeComponent.STATE = {\n\t/**\n\t * Injected helper to get the editor image data\n\t * @type {Function}\n\t */\n\tgetImageEditorImageData: {\n\t\tvalidator: core.isFunction\n\t}\n};\n\n// Register component\nSoy.register(ResizeComponent, componentTemplates);\n\nexport default ResizeComponent;"]}
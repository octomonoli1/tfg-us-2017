{"version":3,"sources":["IncrementalDomUtils.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;KAOM;;;;;sBAOE,mDAAoB,MAAM;AAChC,OAAI,SAAS,EAAT,CAD4B;AAEhC,OAAI,KAAK,CAAL,CAAJ,EAAa;AACZ,WAAO,GAAP,GAAa,KAAK,CAAL,CAAb,CADY;IAAb;AAGA,OAAI,WAAW,CAAC,KAAK,CAAL,KAAW,EAAX,CAAD,CAAgB,MAAhB,CAAuB,KAAK,KAAL,CAAW,CAAX,CAAvB,CAAX,CAL4B;AAMhC,QAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,SAAS,MAAT,EAAiB,KAAK,CAAL,EAAQ;AAC5C,WAAO,SAAS,CAAT,CAAP,IAAsB,SAAS,IAAI,CAAJ,CAA/B,CAD4C;IAA7C;AAGA,UAAO,MAAP,CATgC;;;AAP5B,sBAyBE,mDAAoB,KAAK,QAAQ;AACvC,OAAI,OAAO,CAAC,GAAD,EAAM,OAAO,GAAP,EAAY,EAAlB,CAAP,CADmC;AAEvC,OAAI,OAAO,OAAO,IAAP,CAAY,MAAZ,CAAP,CAFmC;AAGvC,QAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,KAAK,MAAL,EAAa,GAAjC,EAAsC;AACrC,QAAI,KAAK,CAAL,MAAY,UAAZ,EAAwB;AAC3B,UAAK,IAAL,CAAU,KAAK,CAAL,CAAV,EAAmB,OAAO,KAAK,CAAL,CAAP,CAAnB,EAD2B;KAA5B;IADD;AAKA,UAAO,IAAP,CARuC;;;AAzBnC,sBAyCE,yCAAe,KAAK;AAC1B,UAAO,CAAC,gBAAK,QAAL,CAAc,GAAd,CAAD,IAAuB,IAAI,CAAJ,MAAW,IAAI,CAAJ,EAAO,WAAP,EAAX,CADJ;;;SAzCtB;;;mBA8CS","file":"../../../node_modules/metal-incremental-dom/src/utils/IncrementalDomUtils.js","sourcesContent":["'use strict';\n\nimport core from 'metal';\n\n/**\n * Utility functions used to handle incremental dom calls.\n */\nclass IncrementalDomUtils {\n\t/**\n\t * Builds the component config object from its incremental dom call's\n\t * arguments.\n\t * @param {!Array} args\n\t * @return {!Object}\n\t */\n\tstatic buildConfigFromCall(args) {\n\t\tvar config = {};\n\t\tif (args[1]) {\n\t\t\tconfig.key = args[1];\n\t\t}\n\t\tvar attrsArr = (args[2] || []).concat(args.slice(3));\n\t\tfor (var i = 0; i < attrsArr.length; i += 2) {\n\t\t\tconfig[attrsArr[i]] = attrsArr[i + 1];\n\t\t}\n\t\treturn config;\n\t}\n\n\t/**\n\t * Builds an incremental dom call array from the given tag and config object.\n\t * @param {string} tag\n\t * @param {!Object} config\n\t * @return {!Array}\n\t */\n\tstatic buildCallFromConfig(tag, config) {\n\t\tvar call = [tag, config.key, []];\n\t\tvar keys = Object.keys(config);\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tif (keys[i] !== 'children') {\n\t\t\t\tcall.push(keys[i], config[keys[i]]);\n\t\t\t}\n\t\t}\n\t\treturn call;\n\t}\n\n\t/**\n\t * Checks if the given tag represents a metal component.\n\t * @param {string} tag\n\t * @param {boolean}\n\t */\n\tstatic isComponentTag(tag) {\n\t\treturn !core.isString(tag) || tag[0] === tag[0].toUpperCase();\n\t}\n}\n\nexport default IncrementalDomUtils;\n"],"sourceRoot":"/source/"}
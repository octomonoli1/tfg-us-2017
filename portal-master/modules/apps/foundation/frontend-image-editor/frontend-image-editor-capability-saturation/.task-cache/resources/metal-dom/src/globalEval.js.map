{"version":3,"sources":["globalEval.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;KAQM;;;;;aAQE,mBAAI,MAAM,cAAc;AAC9B,OAAI,SAAS,SAAS,aAAT,CAAuB,QAAvB,CAAT,CAD0B;AAE9B,UAAO,IAAP,GAAc,IAAd,CAF8B;AAG9B,OAAI,YAAJ,EAAkB;AACjB,iBAAa,MAAb,EADiB;IAAlB,MAEO;AACN,aAAS,IAAT,CAAc,WAAd,CAA0B,MAA1B,EADM;IAFP;AAKA,iBAAI,YAAJ,CAAiB,MAAjB,EAR8B;AAS9B,UAAO,MAAP,CAT8B;;;AAR1B,aA6BE,2BAAQ,KAAK,cAAc,cAAc;AAC/C,OAAI,SAAS,SAAS,aAAT,CAAuB,QAAvB,CAAT,CAD2C;AAE/C,UAAO,GAAP,GAAa,GAAb,CAF+C;;AAI/C,OAAI,WAAW,SAAX,QAAW,GAAW;AACzB,kBAAI,YAAJ,CAAiB,MAAjB,EADyB;AAEzB,oBAAgB,cAAhB,CAFyB;IAAX,CAJgC;AAQ/C,iBAAI,IAAJ,CAAS,MAAT,EAAiB,MAAjB,EAAyB,QAAzB,EAR+C;AAS/C,iBAAI,IAAJ,CAAS,MAAT,EAAiB,OAAjB,EAA0B,QAA1B,EAT+C;;AAW/C,OAAI,YAAJ,EAAkB;AACjB,iBAAa,MAAb,EADiB;IAAlB,MAEO;AACN,aAAS,IAAT,CAAc,WAAd,CAA0B,MAA1B,EADM;IAFP;;AAMA,UAAO,MAAP,CAjB+C;;;AA7B3C,aA0DE,+BAAU,QAAQ,cAAc,cAAc;AACpD,OAAI,WAAW,SAAX,QAAW,GAAW;AACzB,oBAAgB,cAAhB,CADyB;IAAX,CADqC;AAIpD,OAAI,OAAO,IAAP,IAAe,OAAO,IAAP,KAAgB,iBAAhB,EAAmC;AACrD,iBAAM,QAAN,CAAe,QAAf,EADqD;AAErD,WAFqD;IAAtD;AAIA,iBAAI,YAAJ,CAAiB,MAAjB,EARoD;AASpD,OAAI,OAAO,GAAP,EAAY;AACf,WAAO,WAAW,OAAX,CAAmB,OAAO,GAAP,EAAY,YAA/B,EAA6C,YAA7C,CAAP,CADe;IAAhB,MAEO;AACN,iBAAM,QAAN,CAAe,QAAf,EADM;AAEN,WAAO,WAAW,GAAX,CAAe,OAAO,IAAP,EAAa,YAA5B,CAAP,CAFM;IAFP;;;AAnEI,aAmFE,mDAAoB,SAAS,cAAc,cAAc;AAC/D,OAAI,UAAU,QAAQ,gBAAR,CAAyB,QAAzB,CAAV,CAD2D;AAE/D,OAAI,QAAQ,MAAR,EAAgB;AACnB,eAAW,iBAAX,CAA6B,OAA7B,EAAsC,CAAtC,EAAyC,YAAzC,EAAuD,YAAvD,EADmB;IAApB,MAEO,IAAI,YAAJ,EAAkB;AACxB,iBAAM,QAAN,CAAe,YAAf,EADwB;IAAlB;;;AAvFH,aAqGE,+CAAkB,SAAS,OAAO,cAAc,cAAc;AACpE,cAAW,SAAX,CAAqB,QAAQ,IAAR,CAAa,KAAb,CAArB,EAA0C,YAAW;AACpD,QAAI,QAAQ,QAAQ,MAAR,GAAiB,CAAjB,EAAoB;AAC/B,gBAAW,iBAAX,CAA6B,OAA7B,EAAsC,QAAQ,CAAR,EAAW,YAAjD,EAA+D,YAA/D,EAD+B;KAAhC,MAEO,IAAI,YAAJ,EAAkB;AACxB,kBAAM,QAAN,CAAe,YAAf,EADwB;KAAlB;IAHkC,EAMvC,YANH,EADoE;;;SArGhE;;;mBAgHS","file":"../../../node_modules/metal-dom/src/globalEval.js","sourcesContent":["'use strict';\n\nimport { async } from 'metal';\nimport dom from './dom';\n\n/**\n * Utility functions for running javascript code in the global scope.\n */\nclass globalEval {\n\t/**\n\t * Evaluates the given string in the global scope.\n\t * @param {string} text\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t * @return {Element} script\n\t */\n\tstatic run(text, opt_appendFn) {\n\t\tvar script = document.createElement('script');\n\t\tscript.text = text;\n\t\tif (opt_appendFn) {\n\t\t\topt_appendFn(script);\n\t\t} else {\n\t\t\tdocument.head.appendChild(script);\n\t\t}\n\t\tdom.exitDocument(script);\n\t\treturn script;\n\t}\n\n\t/**\n\t * Evaluates the given javascript file in the global scope.\n\t * @param {string} src The file's path.\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the script has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t * @return {Element} script\n\t */\n\tstatic runFile(src, opt_callback, opt_appendFn) {\n\t\tvar script = document.createElement('script');\n\t\tscript.src = src;\n\n\t\tvar callback = function() {\n\t\t\tdom.exitDocument(script);\n\t\t\topt_callback && opt_callback();\n\t\t};\n\t\tdom.once(script, 'load', callback);\n\t\tdom.once(script, 'error', callback);\n\n\t\tif (opt_appendFn) {\n\t\t\topt_appendFn(script);\n\t\t} else {\n\t\t\tdocument.head.appendChild(script);\n\t\t}\n\n\t\treturn script;\n\t}\n\n\t/**\n\t * Evaluates the code referenced by the given script element.\n\t * @param {!Element} script\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the script has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t * @return {Element} script\n\t */\n\tstatic runScript(script, opt_callback, opt_appendFn) {\n\t\tvar callback = function() {\n\t\t\topt_callback && opt_callback();\n\t\t};\n\t\tif (script.type && script.type !== 'text/javascript') {\n\t\t\tasync.nextTick(callback);\n\t\t\treturn;\n\t\t}\n\t\tdom.exitDocument(script);\n\t\tif (script.src) {\n\t\t\treturn globalEval.runFile(script.src, opt_callback, opt_appendFn);\n\t\t} else {\n\t\t\tasync.nextTick(callback);\n\t\t\treturn globalEval.run(script.text, opt_appendFn);\n\t\t}\n\t}\n\n\t/**\n\t * Evaluates any script tags present in the given element.\n\t * @params {!Element} element\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the script has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t */\n\tstatic runScriptsInElement(element, opt_callback, opt_appendFn) {\n\t\tvar scripts = element.querySelectorAll('script');\n\t\tif (scripts.length) {\n\t\t\tglobalEval.runScriptsInOrder(scripts, 0, opt_callback, opt_appendFn);\n\t\t} else if (opt_callback) {\n\t\t\tasync.nextTick(opt_callback);\n\t\t}\n\t}\n\n\t/**\n\t * Runs the given scripts elements in the order that they appear.\n\t * @param {!NodeList} scripts\n\t * @param {number} index\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the script has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t */\n\tstatic runScriptsInOrder(scripts, index, opt_callback, opt_appendFn) {\n\t\tglobalEval.runScript(scripts.item(index), function() {\n\t\t\tif (index < scripts.length - 1) {\n\t\t\t\tglobalEval.runScriptsInOrder(scripts, index + 1, opt_callback, opt_appendFn);\n\t\t\t} else if (opt_callback) {\n\t\t\t\tasync.nextTick(opt_callback);\n\t\t\t}\n\t\t}, opt_appendFn);\n\t}\n}\n\nexport default globalEval;\n"],"sourceRoot":"/source/"}
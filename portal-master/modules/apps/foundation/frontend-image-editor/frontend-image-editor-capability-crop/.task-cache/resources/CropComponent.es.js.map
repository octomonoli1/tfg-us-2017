{"version":3,"sources":["/source/CropComponent.es.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAYM;;;;;;;;;0BASL,2BAAQ,WAAW;AAClB,OAAI,cAAc,KAAK,oBAAL,EAAd,CADc;;AAGlB,OAAI,kBAAkB,UAAU,KAAV,GAAkB,YAAY,WAAZ,CAHtB;AAIlB,OAAI,gBAAgB,UAAU,MAAV,GAAmB,YAAY,YAAZ,CAJrB;;AAMlB,OAAI,cAAc,KAAK,UAAL,CAAgB,KAAK,GAAL,GAAW,aAAX,CAA9B,CANc;AAOlB,OAAI,YAAY;AACf,YAAQ,YAAY,OAAZ,CAAoB,YAApB;AACR,UAAM,YAAY,OAAZ,CAAoB,UAApB,GAAiC,YAAY,UAAZ;AACvC,SAAK,YAAY,OAAZ,CAAoB,SAApB,GAAgC,YAAY,SAAZ;AACrC,WAAO,YAAY,OAAZ,CAAoB,WAApB;IAJJ,CAPc;;AAclB,OAAI,YAAY,SAAS,aAAT,CAAuB,QAAvB,CAAZ,CAdc;AAelB,aAAU,KAAV,GAAkB,UAAU,KAAV,CAfA;AAgBlB,aAAU,MAAV,GAAmB,UAAU,MAAV,CAhBD;;AAkBlB,aAAU,UAAV,CAAqB,IAArB,EAA2B,YAA3B,CAAwC,SAAxC,EAAmD,CAAnD,EAAsD,CAAtD,EAlBkB;;AAoBlB,OAAI,SAAS,SAAS,aAAT,CAAuB,QAAvB,CAAT,CApBc;AAqBlB,OAAI,iBAAiB,UAAU,IAAV,GAAiB,eAAjB,CArBH;AAsBlB,OAAI,kBAAkB,UAAU,KAAV,GAAkB,eAAlB,CAtBJ;AAuBlB,OAAI,gBAAgB,UAAU,GAAV,GAAgB,aAAhB,CAvBF;AAwBlB,OAAI,mBAAmB,UAAU,MAAV,GAAmB,aAAnB,CAxBL;;AA0BlB,UAAO,KAAP,GAAe,eAAf,CA1BkB;AA2BlB,UAAO,MAAP,GAAgB,gBAAhB,CA3BkB;;AA6BlB,OAAI,UAAU,OAAO,UAAP,CAAkB,IAAlB,CAAV,CA7Bc;AA8BlB,WAAQ,SAAR,CAAkB,SAAlB,EAA6B,cAA7B,EAA6C,aAA7C,EAA4D,eAA5D,EAA6E,gBAA7E,EAA+F,CAA/F,EAAkG,CAAlG,EAAqG,eAArG,EAAsH,gBAAtH,EA9BkB;;AAgClB,eAAY,OAAZ,GAhCkB;;AAkClB,UAAO,4BAAmB,OAAnB,CAA2B,QAAQ,YAAR,CAAqB,CAArB,EAAwB,CAAxB,EAA2B,OAAO,KAAP,EAAc,OAAO,MAAP,CAApE,CAAP,CAlCkB;;;SATd;;;;;;;;AAoDN,eAAc,KAAd,GAAsB;;;;;AAKrB,wBAAsB;AACrB,cAAW,eAAK,UAAL;GADZ;EALD;;;AAWA,eAAI,QAAJ,CAAa,aAAb;;mBAEe","sourcesContent":["import Component from 'metal-component/src/Component';\nimport Soy from 'metal-soy/src/Soy';\n\nimport core from 'metal/src/core';\nimport { CancellablePromise } from 'metal-promise/src/promise/Promise';\n\nimport componentTemplates from './CropComponent.soy';\nimport controlsTemplates from './CropControls.soy';\n\n/**\n * Crop Component\n */\nclass CropComponent extends Component {\n\t/**\n\t * Applies the brighntess filter to generate a final\n\t * version of the image.\n\t *\n\t * @param  {Object} imageData An object with several image representations.\n\t * @return {CancellablePromise} A promise that will resolve when the webworker\n\t * finishes processing the image for preview.\n\t */\n\tprocess(imageData) {\n\t\tlet imageCanvas = this.getImageEditorCanvas();\n\n\t\tvar horizontalRatio = imageData.width / imageCanvas.offsetWidth;\n\t\tvar verticalRatio = imageData.height / imageCanvas.offsetHeight;\n\n\t\tlet cropHandles = this.components[this.key + 'CropHandles'];\n\t\tlet selection = {\n\t\t\theight: cropHandles.element.offsetHeight,\n\t\t\tleft: cropHandles.element.offsetLeft - imageCanvas.offsetLeft,\n\t\t\ttop: cropHandles.element.offsetTop - imageCanvas.offsetTop,\n\t\t\twidth: cropHandles.element.offsetWidth\n\t\t};\n\n\t\tlet rawCanvas = document.createElement('canvas');\n\t\trawCanvas.width = imageData.width;\n\t\trawCanvas.height = imageData.height;\n\n\t\trawCanvas.getContext('2d').putImageData(imageData, 0, 0);\n\n\t\tlet canvas = document.createElement('canvas');\n\t\tlet normalizedLeft = selection.left * horizontalRatio;\n\t\tlet normalizedWidth = selection.width * horizontalRatio;\n\t\tlet normalizedTop = selection.top * verticalRatio;\n\t\tlet normalizedHeight = selection.height * verticalRatio;\n\n\t\tcanvas.width = normalizedWidth;\n\t\tcanvas.height = normalizedHeight;\n\n\t\tlet context = canvas.getContext('2d');\n\t\tcontext.drawImage(rawCanvas, normalizedLeft, normalizedTop, normalizedWidth, normalizedHeight, 0, 0, normalizedWidth, normalizedHeight);\n\n\t\tcropHandles.dispose();\n\n\t\treturn CancellablePromise.resolve(context.getImageData(0, 0, canvas.width, canvas.height));\n\t}\n}\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nCropComponent.STATE = {\n\t/**\n\t * Injected helper to get the editor canvas\n\t * @type {Function}\n\t */\n\tgetImageEditorCanvas: {\n\t\tvalidator: core.isFunction\n\t}\n};\n\n// Register component\nSoy.register(CropComponent, componentTemplates);\n\nexport default CropComponent;"]}
{"version":3,"sources":["features.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;KAQM;;;;;WAOE,6DAA0B;AAChC,OAAI,SAAS,mBAAT,KAAiC,SAAjC,EAA4C;AAC/C,aAAS,mBAAT,GAA+B;AAC9B,gBAAW,SAAS,wBAAT,CAAkC,WAAlC,CAAX;AACA,iBAAY,SAAS,wBAAT,CAAkC,YAAlC,CAAZ;KAFD,CAD+C;IAAhD;AAMA,UAAO,SAAS,mBAAT,CAPyB;;;AAP5B,WAsBE,6DAAyB,MAAM;AACrC,OAAI,WAAW,CAAC,QAAD,EAAW,IAAX,EAAiB,GAAjB,EAAsB,EAAtB,CAAX,CADiC;AAErC,OAAI,gBAAgB,cAAO,eAAP,CAAuB,IAAvB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAK,SAAL,CAAe,CAAf,EAAkB,CAAlB,EAAqB,WAArB,EAAnC,CAAhB,CAFiC;AAGrC,OAAI,WAAW,CAAC,gBAAgB,KAAhB,EAAuB,gBAAgB,KAAhB,EAAuB,gBAAgB,KAAhB,EAAuB,OAAO,KAAP,CAAjF,CAHiC;AAIrC,QAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,SAAS,MAAT,EAAiB,GAArC,EAA0C;AACzC,QAAI,SAAS,iBAAT,CAA2B,KAA3B,CAAiC,SAAS,CAAT,IAAc,aAAd,CAAjC,KAAkE,SAAlE,EAA6E;AAChF,YAAO,SAAS,CAAT,EAAY,WAAZ,KAA4B,SAAS,CAAT,CAA5B,CADyE;KAAjF;IADD;AAKA,UAAO,OAAO,KAAP,CAT8B;;;AAtBjC,WAwCE,uDAAuB;AAC7B,OAAI,SAAS,gBAAT,KAA8B,SAA9B,EAAyC;AAC5C,QAAI,kBAAkB,2CAAlB,CADwC;AAE5C,QAAI,UAAU,SAAS,aAAT,CAAuB,KAAvB,CAAV,CAFwC;AAG5C,kBAAI,MAAJ,CAAW,OAAX,EAAoB,eAApB,EAH4C;AAI5C,aAAS,gBAAT,GAA4B,oBAAoB,QAAQ,SAAR,CAJJ;IAA7C;AAMA,UAAO,SAAS,gBAAT,CAPsB;;;SAxCzB;;;AAmDN,UAAS,iBAAT,GAA6B,SAAS,aAAT,CAAuB,KAAvB,CAA7B;AACA,UAAS,mBAAT,GAA+B,SAA/B;AACA,UAAS,gBAAT,GAA4B,SAA5B;;mBAEe","file":"../../../node_modules/metal-dom/src/features.js","sourcesContent":["'use strict';\n\nimport dom from './dom';\nimport { string } from 'metal';\n\n/**\n * Class with static methods responsible for doing browser feature checks.\n */\nclass features {\n\t/**\n\t * Some browsers still supports prefixed animation events. This method can\n\t * be used to retrieve the current browser event name for both, animation\n\t * and transition.\n\t * @return {object}\n\t */\n\tstatic checkAnimationEventName() {\n\t\tif (features.animationEventName_ === undefined) {\n\t\t\tfeatures.animationEventName_ = {\n\t\t\t\tanimation: features.checkAnimationEventName_('animation'),\n\t\t\t\ttransition: features.checkAnimationEventName_('transition')\n\t\t\t};\n\t\t}\n\t\treturn features.animationEventName_;\n\t}\n\n\t/**\n\t * @protected\n\t * @param {string} type Type to test: animation, transition.\n\t * @return {string} Browser event name.\n\t */\n\tstatic checkAnimationEventName_(type) {\n\t\tvar prefixes = ['Webkit', 'MS', 'O', ''];\n\t\tvar typeTitleCase = string.replaceInterval(type, 0, 1, type.substring(0, 1).toUpperCase());\n\t\tvar suffixes = [typeTitleCase + 'End', typeTitleCase + 'End', typeTitleCase + 'End', type + 'end'];\n\t\tfor (var i = 0; i < prefixes.length; i++) {\n\t\t\tif (features.animationElement_.style[prefixes[i] + typeTitleCase] !== undefined) {\n\t\t\t\treturn prefixes[i].toLowerCase() + suffixes[i];\n\t\t\t}\n\t\t}\n\t\treturn type + 'end';\n\t}\n\n\t/**\n\t * Some browsers (like IE9) change the order of element attributes, when html\n\t * is rendered. This method can be used to check if this behavior happens on\n\t * the current browser.\n\t * @return {boolean}\n\t */\n\tstatic checkAttrOrderChange() {\n\t\tif (features.attrOrderChange_ === undefined) {\n\t\t\tvar originalContent = '<div data-component=\"\" data-ref=\"\"></div>';\n\t\t\tvar element = document.createElement('div');\n\t\t\tdom.append(element, originalContent);\n\t\t\tfeatures.attrOrderChange_ = originalContent !== element.innerHTML;\n\t\t}\n\t\treturn features.attrOrderChange_;\n\t}\n}\n\nfeatures.animationElement_ = document.createElement('div');\nfeatures.animationEventName_ = undefined;\nfeatures.attrOrderChange_ = undefined;\n\nexport default features;\n"],"sourceRoot":"/source/"}
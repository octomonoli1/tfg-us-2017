{"version":3,"sources":["IncrementalDomChildren.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAWM;;;;;yBAQE,2BAAQ,UAAU,UAAU;AAClC,eAAY,QAAZ,CADkC;AAElC,eAAY,QAAZ,CAFkC;AAGlC,WAAQ;AACP,YAAQ;AACP,eAAU,EAAV;KADD;IADD,CAHkC;AAQlC,oBAAiB,KAAjB,CARkC;AASlC,kBAAe,IAAf,CATkC;AAUlC,+BAAkB,iBAAlB,CAAoC;AACnC,kBAAc,2BAAd;AACA,iBAAa,0BAAb;AACA,UAAM,0BAAN;IAHD,EAVkC;;;AAR9B,yBAgCE,yBAAO,MAAM,cAAc;AACjC,OAAI,YAAJ,EAAkB;;AAEjB,mBAAe,IAAf,EAFiB;AAGjB,WAHiB;IAAlB;;AAMA,OAAI,gBAAgB,aAAa,IAAb,CAAhB,EAAoC;AACvC,WADuC;IAAxC;;AAIA,OAAI,gBAAK,KAAL,CAAW,KAAK,IAAL,CAAf,EAA2B;AAC1B,QAAI,OAAO,KAAK,IAAL,GAAY,KAAK,IAAL,GAAY,EAAxB,CADe;AAE1B,SAAK,CAAL,IAAU,KAAK,IAAL,CAFgB;AAG1B,mBAAe,IAAf,CAAoB,KAApB,CAA0B,IAA1B,EAAgC,IAAhC,EAH0B;IAA3B,MAIO;AACN,QAAI,QAAO,8BAAoB,mBAApB,CAAwC,KAAK,GAAL,EAAU,KAAK,MAAL,CAAzD,CADE;AAEN,mBAAe,WAAf,CAA2B,KAA3B,CAAiC,IAAjC,EAAuC,KAAvC,EAFM;AAGN,QAAI,KAAK,MAAL,CAAY,QAAZ,EAAsB;AACzB,UAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,KAAK,MAAL,CAAY,QAAZ,CAAqB,MAArB,EAA6B,GAAjD,EAAsD;AACrD,6BAAuB,MAAvB,CAA8B,KAAK,MAAL,CAAY,QAAZ,CAAqB,CAArB,CAA9B,EAAuD,YAAvD,EADqD;MAAtD;KADD;AAKA,mBAAe,YAAf,CAA4B,KAAK,GAAL,CAA5B,CARM;IAJP;;;SA3CI;;;AA4DN,KAAI,SAAJ;AACA,KAAI,cAAJ;AACA,KAAI,eAAe,KAAf;AACJ,KAAI,SAAJ;AACA,KAAI,KAAJ;;;;;;;;;AASA,UAAS,mBAAT,CAA6B,IAA7B,EAAmC,UAAnC,EAA+C;AAC9C,MAAI;AACH,WAAQ,cAAR;KACC,uBAAuB,WAAvB,EAAqC,UAFnC,CAD0C;;AAM9C,MAAI,UAAJ,EAAgB;AACf,SAAM,IAAN,GAAa,KAAK,CAAL,CAAb,CADe;AAEf,OAAI,KAAK,MAAL,GAAc,CAAd,EAAiB;AACpB,UAAM,IAAN,GAAa,IAAb,CADoB;IAArB;GAFD,MAKO;AACN,OAAI,8BAAoB,cAApB,CAAmC,KAAK,CAAL,CAAnC,CAAJ,EAAiD;AAChD,SAAK,CAAL,IAAU,KAAK,CAAL,KAAW,UAAU,QAAV,EAAX,CADsC;IAAjD;AAGA,SAAM,GAAN,GAAY,KAAK,CAAL,CAAZ,CAJM;AAKN,SAAM,MAAN,GAAe,8BAAoB,mBAApB,CAAwC,IAAxC,CAAf,CALM;AAMN,SAAM,MAAN,CAAa,QAAb,GAAwB,EAAxB,CANM;GALP;;AAcA,iBAAe,KAAf,EApB8C;AAqB9C,SAAO,KAAP,CArB8C;EAA/C;;AAwBA,UAAS,cAAT,CAAwB,KAAxB,EAA+B;AAC9B,iBAAe,MAAf,CAAsB,QAAtB,CAA+B,IAA/B,CAAoC,KAApC,EAD8B;EAA/B;;;;;;;AASA,UAAS,2BAAT,GAAuC;AACtC,MAAI,mBAAmB,KAAnB,EAA0B;AAC7B,+BAAkB,gBAAlB,GAD6B;AAE7B,kBAAe,KAAf,CAF6B;AAG7B,aAAU,KAAV,EAH6B;AAI7B,eAAY,IAAZ,CAJ6B;AAK7B,oBAAiB,IAAjB,CAL6B;AAM7B,eAAY,IAAZ,CAN6B;AAO7B,WAAQ,IAAR,CAP6B;GAA9B,MAQO;AACN,oBAAiB,eAAe,MAAf,CADX;GARP;EADD;;;;;;;;AAoBA,UAAS,0BAAT,CAAoC,UAApC,EAAyD;oCAAN;;GAAM;;AACxD,mBAAiB,oBAAoB,IAApB,CAAjB,CADwD;EAAzD;;;;;;;AASA,UAAS,0BAAT,CAAoC,UAApC,EAAyD;qCAAN;;GAAM;;AACxD,sBAAoB,IAApB,EAA0B,IAA1B,EADwD;EAAzD;;;;;;;;AAWA,wBAAuB,WAAvB,GAAqC,mBAArC;;mBAEe","file":"../../../node_modules/metal-incremental-dom/src/children/IncrementalDomChildren.js","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport IncrementalDomAop from '../IncrementalDomAop';\nimport IncrementalDomUtils from '../utils/IncrementalDomUtils';\n\n/**\n * Provides helpers for capturing children elements from incremental dom calls,\n * as well as actually rendering those captured children via incremental dom\n * later.\n */\nclass IncrementalDomChildren {\n\t/**\n\t * Captures all child elements from incremental dom calls.\n\t * @param {!IncrementalDomRenderer} renderer The renderer that is capturing\n\t *   children.\n\t * @param {!function} callback Function to be called when children have all\n\t *     been captured.\n \t */\n\tstatic capture(renderer, callback) {\n\t\trenderer_ = renderer;\n\t\tcallback_ = callback;\n\t\ttree_ = {\n\t\t\tconfig: {\n\t\t\t\tchildren: []\n\t\t\t}\n\t\t};\n\t\tcurrentParent_ = tree_;\n\t\tisCapturing_ = true;\n\t\tIncrementalDomAop.startInterception({\n\t\t\telementClose: handleInterceptedCloseCall_,\n\t\t\telementOpen: handleInterceptedOpenCall_,\n\t\t\ttext: handleInterceptedTextCall_\n\t\t});\n\t}\n\n\t/**\n\t * Renders a children tree through incremental dom.\n\t * @param {!{args: Array, !children: Array, isText: ?boolean}}\n\t * @param {function()=} opt_skipNode Optional function that is called for\n\t *     each node to be rendered. If it returns true, the node will be skipped.\n\t * @protected\n\t */\n\tstatic render(tree, opt_skipNode) {\n\t\tif (isCapturing_) {\n\t\t\t// If capturing, just add the node directly to the captured tree.\n\t\t\taddChildToTree(tree);\n\t\t\treturn;\n\t\t}\n\n\t\tif (opt_skipNode && opt_skipNode(tree)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (core.isDef(tree.text)) {\n\t\t\tlet args = tree.args ? tree.args : [];\n\t\t\targs[0] = tree.text;\n\t\t\tIncrementalDOM.text.apply(null, args);\n\t\t} else {\n\t\t\tlet args = IncrementalDomUtils.buildCallFromConfig(tree.tag, tree.config);\n\t\t\tIncrementalDOM.elementOpen.apply(null, args);\n\t\t\tif (tree.config.children) {\n\t\t\t\tfor (var i = 0; i < tree.config.children.length; i++) {\n\t\t\t\t\tIncrementalDomChildren.render(tree.config.children[i], opt_skipNode);\n\t\t\t\t}\n\t\t\t}\n\t\t\tIncrementalDOM.elementClose(tree.tag);\n\t\t}\n\t}\n}\n\nvar callback_;\nvar currentParent_;\nvar isCapturing_ = false;\nvar renderer_;\nvar tree_;\n\n/**\n * Adds a child element to the tree.\n * @param {!Array} args The arguments passed to the incremental dom call.\n * @param {boolean=} opt_isText Optional flag indicating if the child is a\n *     text element.\n * @protected\n */\nfunction addChildCallToTree_(args, opt_isText) {\n\tvar child = {\n\t\tparent: currentParent_,\n\t\t[IncrementalDomChildren.CHILD_OWNER]: renderer_\n\t};\n\n\tif (opt_isText) {\n\t\tchild.text = args[0];\n\t\tif (args.length > 1) {\n\t\t\tchild.args = args;\n\t\t}\n\t} else {\n\t\tif (IncrementalDomUtils.isComponentTag(args[0])) {\n\t\t\targs[1] = args[1] || renderer_.buildKey();\n\t\t}\n\t\tchild.tag = args[0];\n\t\tchild.config = IncrementalDomUtils.buildConfigFromCall(args);\n\t\tchild.config.children = [];\n\t}\n\n\taddChildToTree(child);\n\treturn child;\n}\n\nfunction addChildToTree(child) {\n\tcurrentParent_.config.children.push(child);\n}\n\n/**\n * Handles an intercepted call to the `elementClose` function from incremental\n * dom.\n * @protected\n */\nfunction handleInterceptedCloseCall_() {\n\tif (currentParent_ === tree_) {\n\t\tIncrementalDomAop.stopInterception();\n\t\tisCapturing_ = false;\n\t\tcallback_(tree_);\n\t\tcallback_ = null;\n\t\tcurrentParent_ = null;\n\t\trenderer_ = null;\n\t\ttree_ = null;\n\t} else {\n\t\tcurrentParent_ = currentParent_.parent;\n\t}\n}\n\n/**\n * Handles an intercepted call to the `elementOpen` function from incremental\n * dom.\n * @param {!function()} originalFn The original function before interception.\n * @protected\n */\nfunction handleInterceptedOpenCall_(originalFn, ...args) {\n\tcurrentParent_ = addChildCallToTree_(args);\n}\n\n/**\n * Handles an intercepted call to the `text` function from incremental dom.\n * @param {!function()} originalFn The original function before interception.\n * @protected\n */\nfunction handleInterceptedTextCall_(originalFn, ...args) {\n\taddChildCallToTree_(args, true);\n}\n\n\n/**\n * Property identifying a specific object as a Metal.js child node, and\n * pointing to the renderer instance that created it.\n * @type {string}\n * @static\n */\nIncrementalDomChildren.CHILD_OWNER = '__metalChildOwner';\n\nexport default IncrementalDomChildren;\n"],"sourceRoot":"/source/"}
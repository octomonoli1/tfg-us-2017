{"version":3,"sources":["/source/ContrastComponent.es.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAcM;;;;;;;;;8BAIL,+BAAW;;AAEV,QAAK,0BAAL,GAAkC,wBAAS,KAAK,yBAAL,EAAgC,EAAzC,CAAlC,CAFU;;AAIV,QAAK,MAAL,GAAc,EAAd,CAJU;;;AAJN,8BAcL,+BAAW;AACV,QAAK,MAAL,GAAc,EAAd,CADU;;;AAdN,8BAyBL,2BAAQ,WAAW;AAClB,UAAO,KAAK,OAAL,CAAa,SAAb,CAAP,CADkB;;;AAzBd,8BAoCL,2BAAQ,WAAW;AAClB,OAAI,gBAAgB,KAAK,UAAL,CAAgB,MAAhB,CAAuB,KAAvB,CADF;AAElB,OAAI,UAAU,KAAK,MAAL,CAAY,aAAZ,CAAV,CAFc;;AAIlB,OAAI,CAAC,OAAD,EAAU;AACb,cAAU,KAAK,YAAL,CAAkB;AAC3B,oBAAe,aAAf;AACA,gBAAW,SAAX;KAFS,CAAV,CADa;;AAMb,SAAK,MAAL,CAAY,aAAZ,IAA6B,OAA7B,CANa;IAAd;;AASA,UAAO,OAAP,CAbkB;;;AApCd,8BAyDL,2CAAiB;AAChB,QAAK,0BAAL,GADgB;;;AAzDZ,8BAoEL,qCAAa,SAAS;;;AACrB,UAAO,gCAAuB,UAAC,OAAD,EAAU,MAAV,EAAqB;AAClD,QAAI,YAAY,OAAK,UAAL,GAAkB,oBAAlB,CADkC;AAElD,QAAI,gBAAgB,IAAI,MAAJ,CAAW,SAAX,CAAhB,CAF8C;;AAIlD,kBAAc,SAAd,GAA0B,UAAC,KAAD;YAAW,QAAQ,MAAM,IAAN;KAAnB,CAJwB;AAKlD,kBAAc,WAAd,CAA0B,OAA1B,EALkD;IAArB,CAA9B,CADqB;;;SApEjB;;;;;;;;AAoFN,mBAAkB,KAAlB,GAA0B;;;;;AAKzB,cAAY;AACX,cAAW,eAAK,QAAL;GADZ;;;;;;;AASA,6BAA2B;AAC1B,cAAW,eAAK,UAAL;GADZ;EAdD;;;AAoBA,eAAI,QAAJ,CAAa,iBAAb;;mBAEe","sourcesContent":["import Component from 'metal-component/src/Component';\nimport Soy from 'metal-soy/src/Soy';\n\nimport core from 'metal/src/core';\nimport debounce from 'metal-debounce/src/debounce';\nimport { CancellablePromise } from 'metal-promise/src/promise/Promise';\nimport Slider from 'metal-slider/src/Slider';\n\nimport componentTemplates from './ContrastComponent.soy';\nimport controlsTemplates from './ContrastControls.soy';\n\n/**\n * Contrast Component\n */\nclass ContrastComponent extends Component {\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\t// Debounced version of requestImageEditorPreview\n\t\tthis.requestImageEditorPreview_ = debounce(this.requestImageEditorPreview, 50);\n\n\t\tthis.cache_ = {};\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdetached() {\n\t\tthis.cache_ = {};\n\t}\n\n\t/**\n\t * Applies a contrast filter to the image.\n\t *\n\t * @param  {ImageData} imageData ImageData representation of the image.\n\t * @return {CancellablePromise} A promise that will resolve when the webworker\n\t * finishes processing the image.\n\t */\n\tpreview(imageData) {\n\t\treturn this.process(imageData);\n\t}\n\n\t/**\n\t * Applies a contrast filter to the image.\n\t *\n\t * @param  {ImageData} imageData ImageData representation of the image.\n\t * @return {CancellablePromise} A promise that will resolve when the webworker\n\t * finishes processing the image.\n\t */\n\tprocess(imageData) {\n\t\tlet contrastValue = this.components.slider.value;\n\t\tlet promise = this.cache_[contrastValue];\n\n\t\tif (!promise) {\n\t\t\tpromise = this.spawnWorker_({\n\t\t\t\tcontrastValue: contrastValue,\n\t\t\t\timageData: imageData\n\t\t\t});\n\n\t\t\tthis.cache_[contrastValue] = promise;\n\t\t}\n\n\t\treturn promise;\n\t}\n\n\t/**\n\t * Notifies the editor that this component wants to generate\n\t * a different preview version of the current image. It debounces\n\t * the calls\n\t */\n\trequestPreview() {\n\t\tthis.requestImageEditorPreview_();\n\t}\n\n\t/**\n\t * Spawns the a webworker to do the image processing in a different thread.\n\t *\n\t * @param  {Object} message An object with the image and contrast value.\n\t * @return {CancellablePromise} A promise that will resolve when the webworker\n\t * finishes processing the image.\n\t */\n\tspawnWorker_(message) {\n\t\treturn new CancellablePromise((resolve, reject) => {\n\t\t\tlet workerURI = this.modulePath + '/ContrastWorker.js';\n\t\t\tlet processWorker = new Worker(workerURI);\n\n\t\t\tprocessWorker.onmessage = (event) => resolve(event.data);\n\t\t\tprocessWorker.postMessage(message);\n\t\t});\n\t}\n}\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nContrastComponent.STATE = {\n\t/**\n\t * Path of this module\n\t * @type {String}\n\t */\n\tmodulePath: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * Injected method to notify the editor this component\n\t * wants to generate a preview version of the image.\n\t * @type {Function}\n\t */\n\trequestImageEditorPreview: {\n\t\tvalidator: core.isFunction\n\t}\n};\n\n// Register component\nSoy.register(ContrastComponent, componentTemplates);\n\nexport default ContrastComponent;"]}
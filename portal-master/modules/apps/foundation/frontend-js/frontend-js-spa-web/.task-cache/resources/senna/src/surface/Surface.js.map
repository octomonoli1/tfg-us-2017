{"version":3,"sources":["/source/Surface.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport globals from '../globals/globals';\nimport { core, Disposable } from 'metal';\nimport dom from 'metal-dom';\nimport CancellablePromise from 'metal-promise';\n\nclass Surface extends Disposable {\n\n\t/**\n\t * Surface class representing the references to elements on the page that\n\t * can potentially be updated by <code>App</code>.\n\t * @param {string} id\n\t * @constructor\n\t */\n\tconstructor(id) {\n\t\tsuper();\n\n\t\tif (!id) {\n\t\t\tthrow new Error('Surface element id not specified. A surface element requires a valid id.');\n\t\t}\n\n\t\t/**\n\t\t * Holds the active child element.\n\t\t * @type {Element}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.activeChild = null;\n\n\t\t/**\n\t\t * Holds the default child element.\n\t\t * @type {Element}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.defaultChild = null;\n\n\t\t/**\n\t\t * Holds the element with the specified surface id, if not found creates a\n\t\t * new element with the specified id.\n\t\t * @type {Element}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.element = null;\n\n\t\t/**\n\t\t * Holds the surface id.\n\t\t * @type {String}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.id = id;\n\n\t\t/**\n\t\t * Holds the default transitionFn for the surfaces.\n\t\t * @param {?Element=} from The visible surface element.\n\t\t * @param {?Element=} to The surface element to be flipped.\n\t\t * @default null\n\t\t */\n\t\tthis.transitionFn = null;\n\n\t\tthis.defaultChild = this.getChild(Surface.DEFAULT);\n\t\tthis.maybeWrapContentAsDefault_();\n\t\tthis.activeChild = this.defaultChild;\n\t}\n\n\t/**\n\t * Adds screen content to a surface. If content hasn't been passed, see if\n\t * an element exists in the DOM that matches the id. By convention, the\n\t * element should already be nested in the right element and should have an\n\t * id that is a concatentation of the surface id + '-' + the screen id.\n\t * @param {!string} screenId The screen id the content belongs too.\n\t * @param {?string|Element=} opt_content The string content or element to\n\t *     add be added as surface content.\n\t * @return {Element}\n\t */\n\taddContent(screenId, opt_content) {\n\t\tvar child = this.defaultChild;\n\n\t\tif (core.isDefAndNotNull(opt_content)) {\n\t\t\tchild = this.getChild(screenId);\n\t\t\tif (child) {\n\t\t\t\tdom.removeChildren(child);\n\t\t\t} else {\n\t\t\t\tchild = this.createChild(screenId);\n\t\t\t\tthis.transition(child, null);\n\t\t\t}\n\t\t\tdom.append(child, opt_content);\n\t\t}\n\n\t\tvar element = this.getElement();\n\n\t\tif (element && child) {\n\t\t\tdom.append(element, child);\n\t\t}\n\n\t\treturn child;\n\t}\n\n\t/**\n\t * Creates child node for the surface.\n\t * @param {!string} screenId The screen id.\n\t * @return {Element}\n\t */\n\tcreateChild(screenId) {\n\t\tvar child = globals.document.createElement('div');\n\t\tchild.setAttribute('id', this.makeId_(screenId));\n\t\treturn child;\n\t}\n\n\t/**\n\t * Gets child node of the surface.\n\t * @param {!string} screenId The screen id.\n\t * @return {?Element}\n\t */\n\tgetChild(screenId) {\n\t\treturn globals.document.getElementById(this.makeId_(screenId));\n\t}\n\n\t/**\n\t * Gets the surface element from element, and sets it to the el property of\n\t * the current instance.\n\t * <code>this.element</code> will be used.\n\t * @return {?Element} The current surface element.\n\t */\n\tgetElement() {\n\t\tif (this.element) {\n\t\t\treturn this.element;\n\t\t}\n\t\tthis.element = globals.document.getElementById(this.id);\n\t\treturn this.element;\n\t}\n\n\t/**\n\t * Gets the surface id.\n\t * @return {String}\n\t */\n\tgetId() {\n\t\treturn this.id;\n\t}\n\n\t/**\n\t * Gets the surface transition function.\n\t * See <code>Surface.defaultTransition</code>.\n\t * @return {?Function=} The transition function.\n\t */\n\tgetTransitionFn() {\n\t\treturn this.transitionFn;\n\t}\n\n\t/**\n\t * Makes the id for the element that holds content for a screen.\n\t * @param {!string} screenId The screen id the content belongs too.\n\t * @return {String}\n\t * @private\n\t */\n\tmakeId_(screenId) {\n\t\treturn this.id + '-' + screenId;\n\t}\n\n\t/**\n\t * If default child is missing, wraps surface content as default child. If\n\t * surface have static content, make sure to place a\n\t * <code>surfaceId-default</code> element inside surface, only contents\n\t * inside the default child will be replaced by navigation.\n\t */\n\tmaybeWrapContentAsDefault_() {\n\t\tvar element = this.getElement();\n\t\tif (element && !this.defaultChild) {\n\t\t\tvar fragment = globals.document.createDocumentFragment();\n\t\t\twhile (element.firstChild) {\n\t\t\t\tfragment.appendChild(element.firstChild);\n\t\t\t}\n\t\t\tthis.defaultChild = this.addContent(Surface.DEFAULT, fragment);\n\t\t\tthis.transition(null, this.defaultChild);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the surface id.\n\t * @param {!string} id\n\t */\n\tsetId(id) {\n\t\tthis.id = id;\n\t}\n\n\t/**\n\t * Sets the surface transition function.\n\t * See <code>Surface.defaultTransition</code>.\n\t * @param {?Function=} transitionFn The transition function.\n\t */\n\tsetTransitionFn(transitionFn) {\n\t\tthis.transitionFn = transitionFn;\n\t}\n\n\t/**\n\t * Shows screen content from a surface.\n\t * @param {String} screenId The screen id to show.\n\t * @return {CancellablePromise} Pauses the navigation until it is resolved.\n\t */\n\tshow(screenId) {\n\t\tvar from = this.activeChild;\n\t\tvar to = this.getChild(screenId);\n\t\tif (!to) {\n\t\t\tto = this.defaultChild;\n\t\t}\n\t\tthis.activeChild = to;\n\t\treturn this.transition(from, to).thenAlways(() => {\n\t\t\tif (from && from !== to) {\n\t\t\t\tdom.exitDocument(from);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Removes screen content from a surface.\n\t * @param {!string} screenId The screen id to remove.\n\t */\n\tremove(screenId) {\n\t\tvar child = this.getChild(screenId);\n\t\tif (child) {\n\t\t\tdom.exitDocument(child);\n\t\t}\n\t}\n\n\t/**\n\t * @return {String}\n\t */\n\ttoString() {\n\t\treturn this.id;\n\t}\n\n\t/**\n\t * Invokes the transition function specified on <code>transition</code> attribute.\n\t * @param {?Element=} from\n\t * @param {?Element=} to\n\t * @return {?CancellablePromise=} This can return a promise, which will pause the\n\t *     navigation until it is resolved.\n\t */\n\ttransition(from, to) {\n\t\tvar transitionFn = this.transitionFn || Surface.defaultTransition;\n\t\treturn CancellablePromise.resolve(transitionFn.call(this, from, to));\n\t}\n\n}\n\n/**\n   * Holds the default surface name. Elements on the page must contain a child\n   * element containing the default content, this element must be as following:\n   *\n   * Example:\n   * <code>\n   *   <div id=\"mysurface\">\n   *     <div id=\"mysurface-default\">Default surface content.</div>\n   *   </div>\n   * </code>\n   *\n   * The default content is relevant for the initial page content. When a\n   * screen doesn't provide content for the surface the default content is\n   * restored into the page.\n   *\n   * @type {!String}\n   * @default default\n   * @static\n   */\nSurface.DEFAULT = 'default';\n\n/**\n * Holds the default transition for all surfaces. Each surface could have its\n * own transition.\n *\n * Example:\n *\n * <code>\n * surface.setTransitionFn(function(from, to) {\n *   if (from) {\n *     from.style.display = 'none';\n *     from.classList.remove('flipped');\n *   }\n *   if (to) {\n *     to.style.display = 'block';\n *     to.classList.add('flipped');\n *   }\n *   return null;\n * });\n * </code>\n *\n * @param {?Element=} from The visible surface element.\n * @param {?Element=} to The surface element to be flipped.\n * @static\n */\nSurface.defaultTransition = function(from, to) {\n\tif (from) {\n\t\tfrom.style.display = 'none';\n\t\tfrom.classList.remove('flipped');\n\t}\n\tif (to) {\n\t\tto.style.display = 'block';\n\t\tto.classList.add('flipped');\n\t}\n};\n\nexport default Surface;\n"]}
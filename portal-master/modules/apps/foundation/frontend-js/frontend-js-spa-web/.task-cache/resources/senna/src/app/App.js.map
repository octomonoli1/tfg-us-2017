{"version":3,"sources":["/source/App.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport { array, async, core } from 'metal';\nimport dom from 'metal-dom';\nimport CancellablePromise from 'metal-promise';\nimport { EventEmitter, EventHandler } from 'metal-events';\nimport utils from '../utils/utils';\nimport globals from '../globals/globals';\nimport Route from '../route/Route';\nimport Screen from '../screen/Screen';\nimport Surface from '../surface/Surface';\nimport Uri from 'metal-uri';\n\nclass App extends EventEmitter {\n\n\t/**\n\t * App class that handle routes and screens lifecycle.\n\t * @constructor\n\t * @extends {EventEmitter}\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds the active screen.\n\t\t * @type {?Screen}\n\t\t * @protected\n\t\t */\n\t\tthis.activeScreen = null;\n\n\t\t/**\n\t\t * Holds the active path containing the query parameters.\n\t\t * @type {?string}\n\t\t * @protected\n\t\t */\n\t\tthis.activePath = null;\n\n\t\t/**\n\t\t * Allows prevent navigate from dom prevented event.\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t * @protected\n\t\t */\n\t\tthis.allowPreventNavigate = true;\n\n\t\t/**\n\t\t * Holds link base path.\n\t\t * @type {!string}\n\t\t * @default ''\n\t\t * @protected\n\t\t */\n\t\tthis.basePath = '';\n\n\t\t/**\n\t\t * Captures scroll position from scroll event.\n\t\t * @type {!boolean}\n\t\t * @default true\n\t\t * @protected\n\t\t */\n\t\tthis.captureScrollPositionFromScrollEvent = true;\n\n\t\t/**\n\t\t * Holds the default page title.\n\t\t * @type {string}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.defaultTitle = globals.document.title;\n\n\t\t/**\n\t\t * Holds the form selector to define forms that are routed.\n\t\t * @type {!string}\n\t\t * @default form[enctype=\"multipart/form-data\"]:not([data-senna-off])\n\t\t * @protected\n\t\t */\n\t\tthis.formSelector = 'form[enctype=\"multipart/form-data\"]:not([data-senna-off])';\n\n\t\t/**\n\t\t * Holds the link selector to define links that are routed.\n\t\t * @type {!string}\n\t\t * @default a:not([data-senna-off])\n\t\t * @protected\n\t\t */\n\t\tthis.linkSelector = 'a:not([data-senna-off])';\n\n\t\t/**\n\t\t * Holds the loading css class.\n\t\t * @type {!string}\n\t\t * @default senna-loading\n\t\t * @protected\n\t\t */\n\t\tthis.loadingCssClass = 'senna-loading';\n\n\t\t/**\n\t\t * Using the History API to manage your URLs is awesome and, as it happens,\n\t\t * a crucial feature of good web apps. One of its downsides, however, is\n\t\t * that scroll positions are stored and then, more importantly, restored\n\t\t * whenever you traverse the history. This often means unsightly jumps as\n\t\t * the scroll position changes automatically, and especially so if your app\n\t\t * does transitions, or changes the contents of the page in any way.\n\t\t * Ultimately this leads to an horrible user experience. The good news is,\n\t\t * however, that there’s a potential fix: history.scrollRestoration.\n\t\t * https://developers.google.com/web/updates/2015/09/history-api-scroll-restoration\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.nativeScrollRestorationSupported = ('scrollRestoration' in globals.window.history);\n\n\t\t/**\n\t\t * Holds a deferred with the current navigation.\n\t\t * @type {?CancellablePromise}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.pendingNavigate = null;\n\n\t\t/**\n\t\t * Holds the window horizontal scroll position when the navigation using\n\t\t * back or forward happens to be restored after the surfaces are updated.\n\t\t * @type {!Number}\n\t\t * @default 0\n\t\t * @protected\n\t\t */\n\t\tthis.popstateScrollLeft = 0;\n\n\t\t/**\n\t\t * Holds the window vertical scroll position when the navigation using\n\t\t * back or forward happens to be restored after the surfaces are updated.\n\t\t * @type {!Number}\n\t\t * @default 0\n\t\t * @protected\n\t\t */\n\t\tthis.popstateScrollTop = 0;\n\n\t\t/**\n\t\t * Holds the redirect path containing the query parameters.\n\t\t * @type {?string}\n\t\t * @protected\n\t\t */\n\t\tthis.redirectPath = null;\n\n\t\t/**\n\t\t * Holds the screen routes configuration.\n\t\t * @type {?Array}\n\t\t * @default []\n\t\t * @protected\n\t\t */\n\t\tthis.routes = [];\n\n\t\t/**\n\t\t * Maps the screen instances by the url containing the parameters.\n\t\t * @type {?Object}\n\t\t * @default {}\n\t\t * @protected\n\t\t */\n\t\tthis.screens = {};\n\n\t\t/**\n\t\t * When set to true the first erroneous popstate fired on page load will be\n\t\t * ignored, only if <code>globals.window.history.state</code> is also\n\t\t * <code>null</code>.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis.skipLoadPopstate = false;\n\n\t\t/**\n\t\t * Maps that index the surfaces instances by the surface id.\n\t\t * @type {?Object}\n\t\t * @default {}\n\t\t * @protected\n\t\t */\n\t\tthis.surfaces = {};\n\n\t\t/**\n\t\t * When set to true, moves the scroll position after popstate, or to the\n\t\t * top of the viewport for new navigation. If false, the browser will\n\t\t * take care of scroll restoration.\n\t\t * @type {!boolean}\n\t\t * @default true\n\t\t * @protected\n\t\t */\n\t\tthis.updateScrollPosition = true;\n\n\t\tthis.appEventHandlers_ = new EventHandler();\n\n\t\tthis.appEventHandlers_.add(\n\t\t\tdom.on(globals.window, 'scroll', this.onScroll_.bind(this)),\n\t\t\tdom.on(globals.window, 'load', this.onLoad_.bind(this)),\n\t\t\tdom.on(globals.window, 'popstate', this.onPopstate_.bind(this))\n\t\t);\n\n\t\tthis.on('startNavigate', this.onStartNavigate_);\n\t\tthis.on('beforeNavigate', this.onBeforeNavigate_);\n\t\tthis.on('beforeNavigate', this.onBeforeNavigateDefault_, true);\n\n\t\tthis.setLinkSelector(this.linkSelector);\n\t\tthis.setFormSelector(this.formSelector);\n\t}\n\n\t/**\n\t * Adds one or more screens to the application.\n\t *\n\t * Example:\n\t *\n\t * <code>\n\t *   app.addRoutes({ path: '/foo', handler: FooScreen });\n\t *   or\n\t *   app.addRoutes([{ path: '/foo', handler: function(route) { return new FooScreen(); } }]);\n\t * </code>\n\t *\n\t * @param {Object} or {Array} routes Single object or an array of object.\n\t *     Each object should contain <code>path</code> and <code>screen</code>.\n\t *     The <code>path</code> should be a string or a regex that maps the\n\t *     navigation route to a screen class definition (not an instance), e.g:\n\t *         <code>{ path: \"/home:param1\", handler: MyScreen }</code>\n\t *         <code>{ path: /foo.+/, handler: MyScreen }</code>\n\t * @chainable\n\t */\n\taddRoutes(routes) {\n\t\tif (!Array.isArray(routes)) {\n\t\t\troutes = [routes];\n\t\t}\n\t\troutes.forEach((route) => {\n\t\t\tif (!(route instanceof Route)) {\n\t\t\t\troute = new Route(route.path, route.handler);\n\t\t\t}\n\t\t\tthis.routes.push(route);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds one or more surfaces to the application.\n\t * @param {Surface|String|Array.<Surface|String>} surfaces\n\t *     Surface element id or surface instance. You can also pass an Array\n\t *     whichcontains surface instances or id. In case of ID, these should be\n\t *     the id of surface element.\n\t * @chainable\n\t */\n\taddSurfaces(surfaces) {\n\t\tif (!Array.isArray(surfaces)) {\n\t\t\tsurfaces = [surfaces];\n\t\t}\n\t\tsurfaces.forEach((surface) => {\n\t\t\tif (core.isString(surface)) {\n\t\t\t\tsurface = new Surface(surface);\n\t\t\t}\n\t\t\tthis.surfaces[surface.getId()] = surface;\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns if can navigate to path.\n\t * @param {!string} url\n\t * @return {boolean}\n\t */\n\tcanNavigate(url) {\n\t\tvar path = utils.getUrlPath(url);\n\t\tvar uri = new Uri(url);\n\n\t\tif (!this.isLinkSameOrigin_(uri.getHostname())) {\n\t\t\tconsole.log('Offsite link clicked');\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.isSameBasePath_(path)) {\n\t\t\tconsole.log('Link clicked outside app\\'s base path');\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.findRoute(path)) {\n\t\t\tconsole.log('No route for ' + path);\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Clear screens cache.\n\t * @chainable\n\t */\n\tclearScreensCache() {\n\t\tObject.keys(this.screens).forEach((path) => {\n\t\t\tif (path === this.activePath) {\n\t\t\t\tthis.activeScreen.clearCache();\n\t\t\t} else {\n\t\t\t\tthis.removeScreen(path);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves or create a screen instance to a path.\n\t * @param {!string} path Path containing the querystring part.\n\t * @return {Screen}\n\t */\n\tcreateScreenInstance(path, route) {\n\t\tif (!this.pendingNavigate && path === this.activePath) {\n\t\t\tconsole.log('Already at destination, refresh navigation');\n\t\t\treturn this.activeScreen;\n\t\t}\n\t\t/* jshint newcap: false */\n\t\tvar screen = this.screens[path];\n\t\tif (!screen) {\n\t\t\tvar handler = route.getHandler();\n\t\t\tif (handler === Screen || Screen.isImplementedBy(handler.prototype)) {\n\t\t\t\tscreen = new handler();\n\t\t\t} else {\n\t\t\t\tscreen = handler(route) || new Screen();\n\t\t\t}\n\t\t\tconsole.log('Create screen for [' + path + '] [' + screen + ']');\n\t\t}\n\t\treturn screen;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tif (this.activeScreen) {\n\t\t\tthis.removeScreen(this.activePath);\n\t\t}\n\t\tthis.clearScreensCache();\n\t\tthis.formEventHandler_.removeListener();\n\t\tthis.linkEventHandler_.removeListener();\n\t\tthis.appEventHandlers_.removeAllListeners();\n\t\tsuper.disposeInternal();\n\t}\n\n\t/**\n\t * Dispatches to the first route handler that matches the current path, if\n\t * any.\n\t * @return {CancellablePromise} Returns a pending request cancellable promise.\n\t */\n\tdispatch() {\n\t\treturn this.navigate(utils.getCurrentBrowserPath(), true);\n\t}\n\n\t/**\n\t * Starts navigation to a path.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t * @return {CancellablePromise} Returns a pending request cancellable promise.\n\t */\n\tdoNavigate_(path, opt_replaceHistory) {\n\t\tif (this.activeScreen && this.activeScreen.beforeDeactivate()) {\n\t\t\tthis.pendingNavigate = CancellablePromise.reject(new CancellablePromise.CancellationError('Cancelled by active screen'));\n\t\t\treturn this.pendingNavigate;\n\t\t}\n\n\t\tvar route = this.findRoute(path);\n\t\tif (!route) {\n\t\t\tthis.pendingNavigate = CancellablePromise.reject(new CancellablePromise.CancellationError('No route for ' + path));\n\t\t\treturn this.pendingNavigate;\n\t\t}\n\n\t\tconsole.log('Navigate to [' + path + ']');\n\n\t\tthis.stopPendingNavigate_();\n\n\t\tvar nextScreen = this.createScreenInstance(path, route);\n\n\t\treturn nextScreen.load(path)\n\t\t\t.then(() => {\n\t\t\t\tif (this.activeScreen) {\n\t\t\t\t\tthis.activeScreen.deactivate();\n\t\t\t\t}\n\t\t\t\tthis.prepareNavigateHistory_(path, nextScreen, opt_replaceHistory);\n\t\t\t\tthis.prepareNavigateSurfaces_(nextScreen, this.surfaces);\n\t\t\t})\n\t\t\t.then(() => nextScreen.evaluateStyles(this.surfaces))\n\t\t\t.then(() => nextScreen.flip(this.surfaces))\n\t\t\t.then(() => nextScreen.evaluateScripts(this.surfaces))\n\t\t\t.then(() => this.syncScrollPositionSyncThenAsync_())\n\t\t\t.then(() => this.finalizeNavigate_(path, nextScreen))\n\t\t\t.catch((reason) => {\n\t\t\t\tthis.handleNavigateError_(path, nextScreen, reason);\n\t\t\t\tthrow reason;\n\t\t\t});\n\t}\n\n\t/**\n\t * Finalizes a screen navigation.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!Screen} nextScreen\n\t * @protected\n\t */\n\tfinalizeNavigate_(path, nextScreen) {\n\t\tnextScreen.activate();\n\n\t\tif (this.activeScreen && !this.activeScreen.isCacheable()) {\n\t\t\tif (this.activeScreen !== nextScreen) {\n\t\t\t\tthis.removeScreen(this.activePath);\n\t\t\t}\n\t\t}\n\n\t\tthis.activePath = path;\n\t\tthis.activeScreen = nextScreen;\n\t\tthis.screens[path] = nextScreen;\n\t\tthis.pendingNavigate = null;\n\t\tglobals.capturedFormElement = null;\n\t\tconsole.log('Navigation done');\n\t}\n\n\t/**\n\t * Finds a route for the test path. Returns true if matches has a route,\n\t * otherwise returns null.\n\t * @param {!string} path Path containing the querystring part.\n\t * @return {?Object} Route handler if match any or <code>null</code> if the\n\t *     path is the same as the current url and the path contains a fragment.\n\t */\n\tfindRoute(path) {\n\t\t// Prevents navigation if it's a hash change on the same url.\n\t\tif ((path.lastIndexOf('#') > -1) && utils.isCurrentBrowserPath(path)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tpath = utils.getUrlPathWithoutHash(path);\n\n\t\t// Makes sure that the path substring will be in the expected format\n\t\t// (that is, will end with a \"/\").\n\t\tpath = utils.getUrlPathWithoutHash(path.substr(this.basePath.length));\n\n\t\tfor (var i = 0; i < this.routes.length; i++) {\n\t\t\tvar route = this.routes[i];\n\t\t\tif (route.matchesPath(path)) {\n\t\t\t\treturn route;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets allow prevent navigate.\n\t * @return {boolean}\n\t */\n\tgetAllowPreventNavigate() {\n\t\treturn this.allowPreventNavigate;\n\t}\n\n\t/**\n\t * Gets link base path.\n\t * @return {!string}\n\t */\n\tgetBasePath() {\n\t\treturn this.basePath;\n\t}\n\n\t/**\n\t * Gets the default page title.\n\t * @return {string} defaultTitle\n\t */\n\tgetDefaultTitle() {\n\t\treturn this.defaultTitle;\n\t}\n\n\t/**\n\t * Gets the form selector.\n\t * @return {!string}\n\t */\n\tgetFormSelector() {\n\t\treturn this.formSelector;\n\t}\n\n\t/**\n\t * Gets the link selector.\n\t * @return {!string}\n\t */\n\tgetLinkSelector() {\n\t\treturn this.linkSelector;\n\t}\n\n\t/**\n\t * Gets the loading css class.\n\t * @return {!string}\n\t */\n\tgetLoadingCssClass() {\n\t\treturn this.loadingCssClass;\n\t}\n\n\t/**\n\t * Gets the update scroll position value.\n\t * @return {boolean}\n\t */\n\tgetUpdateScrollPosition() {\n\t\treturn this.updateScrollPosition;\n\t}\n\n\t/**\n\t * Handle navigation error.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!Screen} nextScreen\n\t * @param {!Error} error\n\t * @protected\n\t */\n\thandleNavigateError_(path, nextScreen, err) {\n\t\tconsole.log('Navigation error for [' + nextScreen + '] (' + err + ')');\n\t\tif (!utils.isCurrentBrowserPath(path)) {\n\t\t\tthis.removeScreen(path);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if app has routes.\n\t * @return {boolean}\n\t */\n\thasRoutes() {\n\t\treturn this.routes.length > 0;\n\t}\n\n\t/**\n\t * Tests if hostname is an offsite link.\n\t * @param {!string} hostname Link hostname to compare with\n\t *     <code>globals.window.location.hostname</code>.\n\t * @return {boolean}\n\t * @protected\n\t */\n\tisLinkSameOrigin_(hostname) {\n\t\treturn hostname === globals.window.location.hostname;\n\t}\n\n\t/**\n\t * Tests if link element has the same app's base path.\n\t * @param {!string} path Link path containing the querystring part.\n\t * @return {boolean}\n\t * @protected\n\t */\n\tisSameBasePath_(path) {\n\t\treturn path.indexOf(this.basePath) === 0;\n\t}\n\n\t/**\n\t * Lock the document scroll in order to avoid the browser native back and\n\t * forward navigation to change the scroll position. In the end of\n\t * navigation lifecycle scroll is repositioned.\n\t * @protected\n\t */\n\tlockHistoryScrollPosition_() {\n\t\tvar state = globals.window.history.state;\n\t\tif (!state) {\n\t\t\treturn;\n\t\t}\n\t\t// Browsers are inconsistent when re-positioning the scroll history on\n\t\t// popstate. At some browsers, history scroll happens before popstate, then\n\t\t// lock the scroll on the last known position as soon as possible after the\n\t\t// current JS execution context and capture the current value. Some others,\n\t\t// history scroll happens after popstate, in this case, we bind an once\n\t\t// scroll event to lock the las known position. Lastly, the previous two\n\t\t// behaviors can happen even on the same browser, hence the race will decide\n\t\t// the winner.\n\t\tvar winner = false;\n\t\tvar switchScrollPositionRace = function() {\n\t\t\tglobals.document.removeEventListener('scroll', switchScrollPositionRace, false);\n\t\t\tif (!winner) {\n\t\t\t\tglobals.window.scrollTo(state.scrollLeft, state.scrollTop);\n\t\t\t\twinner = true;\n\t\t\t}\n\t\t};\n\t\tasync.nextTick(switchScrollPositionRace);\n\t\tglobals.document.addEventListener('scroll', switchScrollPositionRace, false);\n\t}\n\n\t/**\n\t * If supported by the browser, disables native scroll restoration and\n\t * stores current value.\n\t */\n\tmaybeDisableNativeScrollRestoration() {\n\t\tif (this.nativeScrollRestorationSupported) {\n\t\t\tthis.nativeScrollRestoration_ = globals.window.history.scrollRestoration;\n\t\t\tglobals.window.history.scrollRestoration = 'manual';\n\t\t}\n\t}\n\n\t/**\n\t * Maybe navigate to a path.\n\t * @param {string} href Information about the link's href.\n\t * @param {Event} event Dom event that initiated the navigation.\n\t */\n\tmaybeNavigate_(href, event) {\n\t\tif (!this.canNavigate(href)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.allowPreventNavigate && event.defaultPrevented) {\n\t\t\tconsole.log('Navigate prevented');\n\t\t\treturn;\n\t\t}\n\n\t\tglobals.capturedFormElement = event.capturedFormElement;\n\n\t\tvar navigateFailed = false;\n\t\ttry {\n\t\t\tthis.navigate(utils.getUrlPath(href));\n\t\t} catch (err) {\n\t\t\t// Do not prevent link navigation in case some synchronous error occurs\n\t\t\tnavigateFailed = true;\n\t\t}\n\n\t\tif (!navigateFailed) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n\n\t/**\n\t * Maybe reposition scroll to hashed anchor.\n\t */\n\tmaybeRepositionScrollToHashedAnchor() {\n\t\tvar hash = globals.window.location.hash;\n\t\tif (hash) {\n\t\t\tvar anchorElement = globals.document.getElementById(hash.substring(1));\n\t\t\tif (anchorElement) {\n\t\t\t\tglobals.window.scrollTo(anchorElement.offsetLeft, anchorElement.offsetTop);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * If supported by the browser, restores native scroll restoration to the\n\t * value captured by `maybeDisableNativeScrollRestoration`.\n\t */\n\tmaybeRestoreNativeScrollRestoration() {\n\t\tif (this.nativeScrollRestorationSupported && this.nativeScrollRestoration_) {\n\t\t\tglobals.window.history.scrollRestoration = this.nativeScrollRestoration_;\n\t\t}\n\t}\n\n\t/**\n\t * Navigates to the specified path if there is a route handler that matches.\n\t * @param {!string} path Path to navigate containing the base path.\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t * @return {CancellablePromise} Returns a pending request cancellable promise.\n\t */\n\tnavigate(path, opt_replaceHistory) {\n\t\tif (!utils.isHtml5HistorySupported()) {\n\t\t\tthrow new Error('HTML5 History is not supported. Senna will not intercept navigation.');\n\t\t}\n\n\t\t// When reloading the same path do replaceState instead of pushState to\n\t\t// avoid polluting history with states with the same path.\n\t\tif (path === this.activePath) {\n\t\t\topt_replaceHistory = true;\n\t\t}\n\n\t\tthis.emit('beforeNavigate', {\n\t\t\tpath: path,\n\t\t\treplaceHistory: !!opt_replaceHistory\n\t\t});\n\n\t\treturn this.pendingNavigate;\n\t}\n\n\t/**\n\t * Befores navigation to a path.\n\t * @param {!Event} event Event facade containing <code>path</code> and\n\t *     <code>replaceHistory</code>.\n\t * @protected\n\t */\n\tonBeforeNavigate_(event) {\n\t\tif (globals.capturedFormElement) {\n\t\t\tevent.form = globals.capturedFormElement;\n\t\t}\n\t}\n\n\t/**\n\t * Befores navigation to a path. Runs after external listeners.\n\t * @param {!Event} event Event facade containing <code>path</code> and\n\t *     <code>replaceHistory</code>.\n\t * @protected\n\t */\n\tonBeforeNavigateDefault_(event) {\n\t\tif (this.pendingNavigate) {\n\t\t\tif (this.pendingNavigate.path === event.path) {\n\t\t\t\tconsole.log('Waiting...');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.emit('startNavigate', {\n\t\t\tform: event.form,\n\t\t\tpath: event.path,\n\t\t\treplaceHistory: event.replaceHistory\n\t\t});\n\t}\n\n\t/**\n\t * Intercepts document clicks and test link elements in order to decide\n\t * whether Surface app can navigate.\n\t * @param {!Event} event Event facade\n\t * @protected\n\t */\n\tonDocClickDelegate_(event) {\n\t\tif (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey || event.button) {\n\t\t\tconsole.log('Navigate aborted, invalid mouse button or modifier key pressed.');\n\t\t\treturn;\n\t\t}\n\t\tthis.maybeNavigate_(event.delegateTarget.href, event);\n\t}\n\n\t/**\n\t * Intercepts document form submits and test action path in order to decide\n\t * whether Surface app can navigate.\n\t * @param {!Event} event Event facade\n\t * @protected\n\t */\n\tonDocSubmitDelegate_(event) {\n\t\tvar form = event.delegateTarget;\n\t\tif (form.method === 'get') {\n\t\t\tconsole.log('GET method not supported');\n\t\t\treturn;\n\t\t}\n\t\tevent.capturedFormElement = form;\n\t\tthis.maybeNavigate_(form.action, event);\n\t}\n\n\t/**\n\t * Listens to the window's load event in order to avoid issues with some browsers\n\t * that trigger popstate calls on the first load. For more information see\n\t * http://stackoverflow.com/questions/6421769/popstate-on-pages-load-in-chrome.\n\t * @protected\n\t */\n\tonLoad_() {\n\t\tthis.skipLoadPopstate = true;\n\t\tsetTimeout(() => {\n\t\t\t// The timeout ensures that popstate events will be unblocked right\n\t\t\t// after the load event occured, but not in the same event-loop cycle.\n\t\t\tthis.skipLoadPopstate = false;\n\t\t}, 0);\n\t\t// Try to reposition scroll to the hashed anchor when page loads.\n\t\tthis.maybeRepositionScrollToHashedAnchor();\n\t}\n\n\t/**\n\t * Handles browser history changes and fires app's navigation if the state\n\t * belows to us. If we detect a popstate and the state is <code>null</code>,\n\t * assume it is navigating to an external page or to a page we don't have\n\t * route, then <code>globals.window.location.reload()</code> is invoked in order to\n\t * reload the content to the current url.\n\t * @param {!Event} event Event facade\n\t * @protected\n\t */\n\tonPopstate_(event) {\n\t\tif (this.skipLoadPopstate) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar state = event.state;\n\n\t\tif (!state) {\n\t\t\tif (globals.window.location.hash) {\n\t\t\t\t// If senna is on an redirect path and a hash popstate happens\n\t\t\t\t// to a different url, reload the browser. This behavior doesn't\n\t\t\t\t// require senna to route hashed links and is closer to native\n\t\t\t\t// browser behavior.\n\t\t\t\tif (this.redirectPath && !utils.isCurrentBrowserPath(this.redirectPath)) {\n\t\t\t\t\tthis.reloadPage();\n\t\t\t\t}\n\t\t\t\t// Always try to reposition scroll to the hashed anchor when\n\t\t\t\t// hash popstate happens.\n\t\t\t\tthis.maybeRepositionScrollToHashedAnchor();\n\t\t\t} else {\n\t\t\t\tthis.reloadPage();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (state.senna) {\n\t\t\tconsole.log('History navigation to [' + state.path + ']');\n\t\t\tthis.popstateScrollTop = state.scrollTop;\n\t\t\tthis.popstateScrollLeft = state.scrollLeft;\n\t\t\tif (!this.nativeScrollRestorationSupported) {\n\t\t\t\tthis.lockHistoryScrollPosition_();\n\t\t\t}\n\t\t\tthis.navigate(state.path, true);\n\t\t}\n\t}\n\n\t/**\n\t * Listens document scroll changes in order to capture the possible lock\n\t * scroll position for history scrolling.\n\t * @protected\n\t */\n\tonScroll_() {\n\t\tif (this.captureScrollPositionFromScrollEvent) {\n\t\t\tthis.saveHistoryCurrentPageScrollPosition_();\n\t\t}\n\t}\n\n\t/**\n\t * Starts navigation to a path.\n\t * @param {!Event} event Event facade containing <code>path</code> and\n\t *     <code>replaceHistory</code>.\n\t * @protected\n\t */\n\tonStartNavigate_(event) {\n\t\tthis.maybeDisableNativeScrollRestoration();\n\t\tthis.captureScrollPositionFromScrollEvent = false;\n\t\tdom.addClasses(globals.document.documentElement, this.loadingCssClass);\n\n\t\tvar endNavigatePayload = {\n\t\t\tform: event.form,\n\t\t\tpath: event.path\n\t\t};\n\n\t\tthis.pendingNavigate = this.doNavigate_(event.path, event.replaceHistory)\n\t\t\t.catch((reason) => {\n\t\t\t\tendNavigatePayload.error = reason;\n\t\t\t\tthrow reason;\n\t\t\t})\n\t\t\t.thenAlways(() => {\n\t\t\t\tif (!this.pendingNavigate) {\n\t\t\t\t\tdom.removeClasses(globals.document.documentElement, this.loadingCssClass);\n\t\t\t\t\tthis.maybeRestoreNativeScrollRestoration();\n\t\t\t\t\tthis.captureScrollPositionFromScrollEvent = true;\n\t\t\t\t}\n\t\t\t\tthis.emit('endNavigate', endNavigatePayload);\n\t\t\t});\n\n\t\tthis.pendingNavigate.path = event.path;\n\t}\n\n\t/**\n\t * Prefetches the specified path if there is a route handler that matches.\n\t * @param {!string} path Path to navigate containing the base path.\n\t * @return {CancellablePromise} Returns a pending request cancellable promise.\n\t */\n\tprefetch(path) {\n\t\tvar route = this.findRoute(path);\n\t\tif (!route) {\n\t\t\treturn CancellablePromise.reject(new CancellablePromise.CancellationError('No route for ' + path));\n\t\t}\n\n\t\tconsole.log('Prefetching [' + path + ']');\n\n\t\tvar nextScreen = this.createScreenInstance(path, route);\n\n\t\treturn nextScreen.load(path)\n\t\t\t.then(() => this.screens[path] = nextScreen)\n\t\t\t.catch((reason) => {\n\t\t\t\tthis.handleNavigateError_(path, nextScreen, reason);\n\t\t\t\tthrow reason;\n\t\t\t});\n\t}\n\n\t/**\n\t * Prepares screen flip. Updates history state and surfaces content.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!Screen} nextScreen\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t */\n\tprepareNavigateHistory_(path, nextScreen, opt_replaceHistory) {\n\t\tvar title = nextScreen.getTitle();\n\t\tif (!core.isString(title)) {\n\t\t\ttitle = this.getDefaultTitle();\n\t\t}\n\t\tvar redirectPath = nextScreen.beforeUpdateHistoryPath(path);\n\t\tvar historyState = {\n\t\t\tform: core.isDefAndNotNull(globals.capturedFormElement),\n\t\t\tredirectPath: redirectPath,\n\t\t\tpath: path,\n\t\t\tsenna: true,\n\t\t\tscrollTop: 0,\n\t\t\tscrollLeft: 0\n\t\t};\n\t\tif (opt_replaceHistory) {\n\t\t\thistoryState.scrollTop = this.popstateScrollTop;\n\t\t\thistoryState.scrollLeft = this.popstateScrollLeft;\n\t\t}\n\t\tthis.updateHistory_(title, redirectPath, nextScreen.beforeUpdateHistoryState(historyState), opt_replaceHistory);\n\t\tthis.redirectPath = redirectPath;\n\t}\n\n\t/**\n\t * Prepares screen flip. Updates history state and surfaces content.\n\t * @param {!Screen} nextScreen\n\t * @param {!object} surfaces Map of surfaces to flip keyed by surface id.\n\t */\n\tprepareNavigateSurfaces_(nextScreen, surfaces) {\n\t\tObject.keys(surfaces).forEach((id) => {\n\t\t\tvar surfaceContent = nextScreen.getSurfaceContent(id);\n\t\t\tsurfaces[id].addContent(nextScreen.getId(), surfaceContent);\n\t\t\tconsole.log('Screen [' + nextScreen.getId() + '] add content to surface ' +\n\t\t\t\t'[' + surfaces[id] + '] [' + (core.isDefAndNotNull(surfaceContent) ? '...' : 'empty') + ']');\n\t\t});\n\t}\n\n\t/**\n\t * Reloads the page by performing `window.location.reload()`.\n\t */\n\treloadPage() {\n\t\tglobals.window.location.reload();\n\t}\n\n\t/**\n\t * Removes route instance from app routes.\n\t * @param {Route} route\n\t * @return {boolean} True if an element was removed.\n\t */\n\tremoveRoute(route) {\n\t\treturn array.remove(this.routes, route);\n\t}\n\n\t/**\n\t * Removes a screen.\n\t * @param {!string} path Path containing the querystring part.\n\t */\n\tremoveScreen(path) {\n\t\tvar screen = this.screens[path];\n\t\tif (screen) {\n\t\t\tObject.keys(this.surfaces).forEach((surfaceId) => this.surfaces[surfaceId].remove(screen.getId()));\n\t\t\tscreen.dispose();\n\t\t\tdelete this.screens[path];\n\t\t}\n\t}\n\n\t/**\n\t * Saves scroll position from page offset into history state.\n\t */\n\tsaveHistoryCurrentPageScrollPosition_() {\n\t\tvar state = globals.window.history.state;\n\t\tif (state && state.senna) {\n\t\t\tstate.scrollTop = globals.window.pageYOffset;\n\t\t\tstate.scrollLeft = globals.window.pageXOffset;\n\t\t\tglobals.window.history.replaceState(state, null, null);\n\t\t}\n\t}\n\n\t/**\n\t * Sets allow prevent navigate.\n\t * @param {boolean} allowPreventNavigate\n\t */\n\tsetAllowPreventNavigate(allowPreventNavigate) {\n\t\tthis.allowPreventNavigate = allowPreventNavigate;\n\t}\n\n\t/**\n\t * Sets link base path.\n\t * @param {!string} path\n\t */\n\tsetBasePath(basePath) {\n\t\tthis.basePath = basePath;\n\t}\n\n\t/**\n\t * Sets the default page title.\n\t * @param {string} defaultTitle\n\t */\n\tsetDefaultTitle(defaultTitle) {\n\t\tthis.defaultTitle = defaultTitle;\n\t}\n\n\t/**\n\t * Sets the form selector.\n\t * @param {!string} formSelector\n\t */\n\tsetFormSelector(formSelector) {\n\t\tthis.formSelector = formSelector;\n\t\tif (this.formEventHandler_) {\n\t\t\tthis.formEventHandler_.removeListener();\n\t\t}\n\t\tthis.formEventHandler_ = dom.delegate(document, 'submit', this.formSelector, this.onDocSubmitDelegate_.bind(this));\n\t}\n\n\t/**\n\t * Sets the link selector.\n\t * @param {!string} linkSelector\n\t */\n\tsetLinkSelector(linkSelector) {\n\t\tthis.linkSelector = linkSelector;\n\t\tif (this.linkEventHandler_) {\n\t\t\tthis.linkEventHandler_.removeListener();\n\t\t}\n\t\tthis.linkEventHandler_ = dom.delegate(document, 'click', this.linkSelector, this.onDocClickDelegate_.bind(this));\n\t}\n\n\t/**\n\t * Sets the loading css class.\n\t * @param {!string} loadingCssClass\n\t */\n\tsetLoadingCssClass(loadingCssClass) {\n\t\tthis.loadingCssClass = loadingCssClass;\n\t}\n\n\t/**\n\t * Sets the update scroll position value.\n\t * @param {boolean} updateScrollPosition\n\t */\n\tsetUpdateScrollPosition(updateScrollPosition) {\n\t\tthis.updateScrollPosition = updateScrollPosition;\n\t}\n\n\t/**\n\t * Cancels pending navigate with <code>Cancel pending navigation</code> error.\n\t * @protected\n\t */\n\tstopPendingNavigate_() {\n\t\tif (this.pendingNavigate) {\n\t\t\tthis.pendingNavigate.cancel('Cancel pending navigation');\n\t\t\tthis.pendingNavigate = null;\n\t\t}\n\t}\n\n\t/**\n\t * Sync document scroll position twice, the first one synchronous and then\n\t * one inside <code>async.nextTick</code>. Relevant to browsers that fires\n\t * scroll restoration asynchronously after popstate.\n\t * @protected\n\t * @return {?CancellablePromise=}\n\t */\n\tsyncScrollPositionSyncThenAsync_() {\n\t\tvar state = globals.window.history.state;\n\t\tif (!state) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar scrollTop = state.scrollTop;\n\t\tvar scrollLeft = state.scrollLeft;\n\n\t\tvar sync = () => {\n\t\t\tif (this.updateScrollPosition) {\n\t\t\t\tglobals.window.scrollTo(scrollLeft, scrollTop);\n\t\t\t}\n\t\t};\n\n\t\treturn new CancellablePromise((resolve) => sync() & async.nextTick(() => sync() & resolve()));\n\t}\n\n\t/**\n\t * Updates or replace browser history.\n\t * @param {?string} title Document title.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!object} state\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t * @protected\n\t */\n\tupdateHistory_(title, path, state, opt_replaceHistory) {\n\t\tif (opt_replaceHistory) {\n\t\t\tglobals.window.history.replaceState(state, title, path);\n\t\t} else {\n\t\t\tglobals.window.history.pushState(state, title, path);\n\t\t}\n\t\tglobals.document.title = title;\n\t}\n\n}\n\nexport default App;\n"]}
{"version":3,"sources":["/source/features.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;KAQM,Q;;;;;WAOE,uB,sCAA0B;AAChC,OAAI,SAAS,mBAAT,KAAiC,SAArC,EAAgD;AAC/C,aAAS,mBAAT,GAA+B;AAC9B,gBAAW,SAAS,wBAAT,CAAkC,WAAlC,CADmB;AAE9B,iBAAY,SAAS,wBAAT,CAAkC,YAAlC;AAFkB,KAA/B;AAIA;AACD,UAAO,SAAS,mBAAhB;AACA,G;;WAOM,wB,qCAAyB,I,EAAM;AACrC,OAAI,WAAW,CAAC,QAAD,EAAW,IAAX,EAAiB,GAAjB,EAAsB,EAAtB,CAAf;AACA,OAAI,gBAAgB,cAAO,eAAP,CAAuB,IAAvB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAK,SAAL,CAAe,CAAf,EAAkB,CAAlB,EAAqB,WAArB,EAAnC,CAApB;AACA,OAAI,WAAW,CAAC,gBAAgB,KAAjB,EAAwB,gBAAgB,KAAxC,EAA+C,gBAAgB,KAA/D,EAAsE,OAAO,KAA7E,CAAf;AACA,QAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAAS,MAA7B,EAAqC,GAArC,EAA0C;AACzC,QAAI,SAAS,iBAAT,CAA2B,KAA3B,CAAiC,SAAS,CAAT,IAAc,aAA/C,MAAkE,SAAtE,EAAiF;AAChF,YAAO,SAAS,CAAT,EAAY,WAAZ,KAA4B,SAAS,CAAT,CAAnC;AACA;AACD;AACD,UAAO,OAAO,KAAd;AACA,G;;WAQM,oB,mCAAuB;AAC7B,OAAI,SAAS,gBAAT,KAA8B,SAAlC,EAA6C;AAC5C,QAAI,kBAAkB,2CAAtB;AACA,QAAI,UAAU,SAAS,aAAT,CAAuB,KAAvB,CAAd;AACA,kBAAI,MAAJ,CAAW,OAAX,EAAoB,eAApB;AACA,aAAS,gBAAT,GAA4B,oBAAoB,QAAQ,SAAxD;AACA;AACD,UAAO,SAAS,gBAAhB;AACA,G;;;;;AAGF,UAAS,iBAAT,GAA6B,SAAS,aAAT,CAAuB,KAAvB,CAA7B;AACA,UAAS,mBAAT,GAA+B,SAA/B;AACA,UAAS,gBAAT,GAA4B,SAA5B;;mBAEe,Q","sourcesContent":["'use strict';\n\nimport dom from './dom';\nimport { string } from 'metal';\n\n/**\n * Class with static methods responsible for doing browser feature checks.\n */\nclass features {\n\t/**\n\t * Some browsers still supports prefixed animation events. This method can\n\t * be used to retrieve the current browser event name for both, animation\n\t * and transition.\n\t * @return {object}\n\t */\n\tstatic checkAnimationEventName() {\n\t\tif (features.animationEventName_ === undefined) {\n\t\t\tfeatures.animationEventName_ = {\n\t\t\t\tanimation: features.checkAnimationEventName_('animation'),\n\t\t\t\ttransition: features.checkAnimationEventName_('transition')\n\t\t\t};\n\t\t}\n\t\treturn features.animationEventName_;\n\t}\n\n\t/**\n\t * @protected\n\t * @param {string} type Type to test: animation, transition.\n\t * @return {string} Browser event name.\n\t */\n\tstatic checkAnimationEventName_(type) {\n\t\tvar prefixes = ['Webkit', 'MS', 'O', ''];\n\t\tvar typeTitleCase = string.replaceInterval(type, 0, 1, type.substring(0, 1).toUpperCase());\n\t\tvar suffixes = [typeTitleCase + 'End', typeTitleCase + 'End', typeTitleCase + 'End', type + 'end'];\n\t\tfor (var i = 0; i < prefixes.length; i++) {\n\t\t\tif (features.animationElement_.style[prefixes[i] + typeTitleCase] !== undefined) {\n\t\t\t\treturn prefixes[i].toLowerCase() + suffixes[i];\n\t\t\t}\n\t\t}\n\t\treturn type + 'end';\n\t}\n\n\t/**\n\t * Some browsers (like IE9) change the order of element attributes, when html\n\t * is rendered. This method can be used to check if this behavior happens on\n\t * the current browser.\n\t * @return {boolean}\n\t */\n\tstatic checkAttrOrderChange() {\n\t\tif (features.attrOrderChange_ === undefined) {\n\t\t\tvar originalContent = '<div data-component=\"\" data-ref=\"\"></div>';\n\t\t\tvar element = document.createElement('div');\n\t\t\tdom.append(element, originalContent);\n\t\t\tfeatures.attrOrderChange_ = originalContent !== element.innerHTML;\n\t\t}\n\t\treturn features.attrOrderChange_;\n\t}\n}\n\nfeatures.animationElement_ = document.createElement('div');\nfeatures.animationEventName_ = undefined;\nfeatures.attrOrderChange_ = undefined;\n\nexport default features;\n"]}
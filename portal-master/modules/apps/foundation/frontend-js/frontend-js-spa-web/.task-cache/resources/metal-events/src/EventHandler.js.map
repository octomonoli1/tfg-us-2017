{"version":3,"sources":["/source/EventHandler.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAUM,Y;;;AACL,0BAAc;AAAA;;AAAA,gDACb,sBADa;;;;;;;;AASb,SAAK,aAAL,GAAqB,EAArB;AATa;AAUb;;;;;;;;;yBAOD,G,kBAAM;AACL,QAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,UAAU,MAA9B,EAAsC,GAAtC,EAA2C;AAC1C,SAAK,aAAL,CAAmB,IAAnB,CAAwB,UAAU,CAAV,CAAxB;AACA;AACD,G;;yBAMD,e,8BAAkB;AACjB,QAAK,aAAL,GAAqB,IAArB;AACA,G;;yBAKD,kB,iCAAqB;AACpB,QAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,aAAL,CAAmB,MAAvC,EAA+C,GAA/C,EAAoD;AACnD,SAAK,aAAL,CAAmB,CAAnB,EAAsB,cAAtB;AACA;;AAED,QAAK,aAAL,GAAqB,EAArB;AACA,G;;;;;mBAGa,Y","sourcesContent":["'use strict';\n\nimport { Disposable } from 'metal';\n\n/**\n * EventHandler utility. It's useful for easily removing a group of\n * listeners from different EventEmitter instances.\n * @constructor\n * @extends {Disposable}\n */\nclass EventHandler extends Disposable {\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * An array that holds the added event handles, so the listeners can be\n\t\t * removed later.\n\t\t * @type {Array.<EventHandle>}\n\t\t * @protected\n\t\t */\n\t\tthis.eventHandles_ = [];\n\t}\n\n\t/**\n\t * Adds event handles to be removed later through the `removeAllListeners`\n\t * method.\n\t * @param {...(!EventHandle)} var_args\n\t */\n\tadd() {\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tthis.eventHandles_.push(arguments[i]);\n\t\t}\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.eventHandles_ = null;\n\t}\n\n\t/**\n\t * Removes all listeners that have been added through the `add` method.\n\t */\n\tremoveAllListeners() {\n\t\tfor (var i = 0; i < this.eventHandles_.length; i++) {\n\t\t\tthis.eventHandles_[i].removeListener();\n\t\t}\n\n\t\tthis.eventHandles_ = [];\n\t}\n}\n\nexport default EventHandler;\n"]}
import com.liferay.gradle.util.FileUtil
import com.liferay.gradle.util.copy.StripPathSegmentsAction

configurations {
	alloyUI
	jQuery
	lexicon
	liferayAMDLoader
	lodash
	svg4everybody
}

task buildAlloyUI(type: Copy)
task buildJQuery(type: Copy)
task buildJQueryPluginsForm
task buildLexicon(type: Copy)
task buildLiferayAMDLoader(type: Copy)
task buildLodash(type: Copy)
task buildSvg4everybody(type: Copy)

String alloyUIVersion = "3.0.3-deprecated.39"
String jqueryPluginsFormVersion = "3.51"
String jQueryVersion = "2.1.4"
String lexiconVersion = "1.0.4"
String liferayAMDLoaderVersion = "1.5.2"
String lodashVersion = "3.10.1"
String svg4everybodyVersion = "2.0.0"

File jsDestinationDir = file("tmp/META-INF/resources")

buildAlloyUI {
	File alloyDestinationDir = new File(jsDestinationDir, "aui")

	doFirst {
		delete alloyDestinationDir
	}

	doLast {
		File auiDeprecatedCssFile = new File(alloyDestinationDir, "aui_deprecated.css")

		File auiSkinDeprecatedCssFile = new File(alloyDestinationDir, "aui-skin-deprecated/css/aui-skin-deprecated.css")
		FileTree cssFileTree = fileTree(dir: alloyDestinationDir, include: "*-deprecated/assets/skins/sam/*-deprecated.css")

		FileUtil.concatenate(auiDeprecatedCssFile, files(auiSkinDeprecatedCssFile, cssFileTree))

		ant.replaceregexp(file: auiDeprecatedCssFile, flags: "g", match: "url\\(([^)]+)\\)", replace: "url(@theme_image_path@/aui/\\1)")

		ant.replace(file: auiDeprecatedCssFile) {
			replacefilter token: "../images/", value: ""
			replacefilter token: "../../../../../build/aui-skin-base/images/", value: ""
			replacefilter token: "../../../../../build/aui-skin-classic/images/", value: ""
			replacefilter token: "../../../../../build/aui-skin-deprecated/images/", value: ""
		}
	}

	eachFile new StripPathSegmentsAction(6)

	from {
		zipTree(configurations.alloyUI.singleFile)
	}

	include "META-INF/resources/webjars/alloy-ui/${alloyUIVersion}/build/"
	includeEmptyDirs = false
	into alloyDestinationDir
}

buildJQuery {
	eachFile new StripPathSegmentsAction(6)

	from {
		zipTree(configurations.jQuery.singleFile)
	}

	include "META-INF/resources/webjars/jquery/${jQueryVersion}/dist/jquery.js"
	includeEmptyDirs = false
	into new File(jsDestinationDir, "jquery")
}

buildJQueryPluginsForm {
	File jQueryPluginsFormJsFile = file("src/main/resources/META-INF/resources/jquery/form.js")

	doLast {
		FileUtil.get(project, "https://raw.githubusercontent.com/malsup/form/${jqueryPluginsFormVersion}/jquery.form.js", jQueryPluginsFormJsFile)

		String text = jQueryPluginsFormJsFile.text

		text = text.replace("typeof define === 'function'", "false && typeof define === 'function'")

		text = ";(function(jQuery){" + System.getProperty("line.separator") + text + '})(AUI.$);'

		jQueryPluginsFormJsFile.text = text
	}

	onlyIf {
		!jQueryPluginsFormJsFile.exists()
	}
}

buildLexicon {
	File lexiconDestinationDir = new File(jsDestinationDir, "lexicon")

	doFirst {
		delete lexiconDestinationDir
	}

	eachFile new StripPathSegmentsAction(7)

	from {
		zipTree(configurations.lexicon.singleFile)
	}

	include "META-INF/resources/webjars/lexicon/${lexiconVersion}/release/js/"
	includeEmptyDirs = false
	into lexiconDestinationDir
}

buildLiferayAMDLoader {
	eachFile new StripPathSegmentsAction(6)

	from {
		zipTree(configurations.liferayAMDLoader.singleFile)
	}

	include "META-INF/resources/webjars/liferay-amd-loader/${liferayAMDLoaderVersion}/dist/loader.js"
	includeEmptyDirs = false
	into new File(jsDestinationDir, "loader")
}

buildLodash {
	eachFile new StripPathSegmentsAction(5)

	filter {
		String line ->

		line.replace "typeof define == 'function'", "false && typeof define == 'function'"
	}

	from {
		zipTree(configurations.lodash.singleFile)
	}

	include "META-INF/resources/webjars/lodash/${lodashVersion}/lodash.js"
	includeEmptyDirs = false
	into new File(jsDestinationDir, "lodash")
}

buildSvg4everybody {
	eachFile new StripPathSegmentsAction(6)

	filter {
		String line ->

		line.replace '"function" == typeof define', 'false && "function" == typeof define'
	}

	from {
		zipTree(configurations.svg4everybody.singleFile)
	}

	include "META-INF/resources/webjars/svg4everybody/${svg4everybodyVersion}/dist/svg4everybody.js"
	includeEmptyDirs = false
	into new File(jsDestinationDir, "misc")
}

classes {
	dependsOn buildAlloyUI
	dependsOn buildJQuery
	dependsOn buildJQueryPluginsForm
	dependsOn buildLexicon
	dependsOn buildLiferayAMDLoader
	dependsOn buildLodash
	dependsOn buildSvg4everybody
}

dependencies {
	alloyUI group: "com.liferay.webjars", name: "com.liferay.webjars.alloy-ui", transitive: false, version: alloyUIVersion

	jQuery group: "org.webjars.npm", name: "jquery", transitive: false, version: jQueryVersion

	lexicon group: "com.liferay.webjars", name: "com.liferay.webjars.lexicon", transitive: false, version: lexiconVersion

	liferayAMDLoader group: "com.liferay.webjars", name: "com.liferay.webjars.liferay-amd-loader", transitive: false, version: liferayAMDLoaderVersion

	lodash group: "org.webjars.bower", name: "lodash", transitive: false, version: lodashVersion

	provided group: "com.liferay.portal", name: "com.liferay.portal.kernel", version: "2.0.0"
	provided group: "com.liferay.portal", name: "com.liferay.util.taglib", version: "2.0.0"
	provided group: "javax.portlet", name: "portlet-api", version: "2.0"
	provided group: "javax.servlet", name: "javax.servlet-api", version: "3.0.1"
	provided group: "javax.servlet.jsp", name: "javax.servlet.jsp-api", version: "2.3.1"
	provided group: "org.osgi", name: "org.osgi.core", version: "5.0.0"
	provided group: "org.osgi", name: "org.osgi.service.component.annotations", version: "1.3.0"

	svg4everybody group: "org.webjars.npm", name: "svg4everybody", transitive: false, version: svg4everybodyVersion
}
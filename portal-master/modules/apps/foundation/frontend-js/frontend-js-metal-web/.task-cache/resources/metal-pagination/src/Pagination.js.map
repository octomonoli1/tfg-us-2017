{"version":3,"sources":["/source/Pagination.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAUM,U;;;;;;;;;uBAIL,O,sBAAU;;;;;;AAMT,QAAK,UAAL,GAAkB;AACjB,UAAM,KAAK;AADM,IAAlB;;AAIA,QAAK,EAAL,CAAQ,WAAW,MAAX,CAAkB,cAA1B,EAA0C,KAAK,uBAA/C,EAAwE,IAAxE;AACA,G;;uBAOD,uB,oCAAwB,K,EAAO;AAC9B,QAAK,SAAL,CAAe,MAAM,KAArB;AACA,G;;uBAOD,gB,6BAAiB,K,EAAO;AACvB,QAAK,IAAL,CACC,WAAW,MAAX,CAAkB,cADnB,EAEC;AACC,eAAW,KAAK,UADjB;AAEC,YAAQ,KAAK,MAFd;AAGC,WAAO,KAHR;AAIC,WAAO,KAAK;AAJb,IAFD;AASA,G;;uBAOD,mB,kCAAsB;AACrB,UAAO,KAAK,MAAL,GAAc,KAAK,IAA1B;AACA,G;;uBAOD,mB,kCAAsB;AACrB,UAAO,KAAK,MAAL,GAAc,KAAK,KAA1B;AACA,G;;uBAKD,I,mBAAO;AACN,OAAI,OAAO,KAAK,IAAhB;OACC,QAAQ,KAAK,KADd;;AAGA,QAAK,gBAAL,CAAsB;AACrB,UAAO,KAAK,QAAL,IAAkB,SAAS,QAAQ,CAApC,GAA0C,CAA1C,GAA8C,KAAK,GAAL,CAAS,KAAT,EAAgB,EAAE,IAAlB;AAD/B,IAAtB;AAGA,G;;uBAMD,W,wBAAY,K,EAAO;AAClB,OAAI,OAAO,MAAM,cAAjB;;AAEA,SAAM,cAAN;;AAEA,OAAI,QAAQ,SAAS,KAAK,YAAL,CAAkB,YAAlB,CAAT,CAAZ;;AAEA,QAAK,gBAAL,CAAsB;AACrB,UAAM;AADe,IAAtB;AAGA,G;;uBAMD,e,4BAAgB,K,EAAO;AACtB,OAAI,UAAU,MAAM,cAApB;;AAEA,SAAM,cAAN;;AAEA,OAAI,QAAQ,SAAS,QAAQ,YAAR,CAAqB,oBAArB,CAAT,CAAZ;;AAEA,WAAQ,KAAR;AACC,SAAK,CAAL;AACC,UAAK,IAAL;AACA;AACD,SAAK,CAAL;AACC,UAAK,IAAL;AACA;AANF;AAQA,G;;uBAKD,I,mBAAO;AACN,OAAI,OAAO,KAAK,IAAhB;OACC,QAAQ,KAAK,KADd;;AAGA,QAAK,gBAAL,CAAsB;AACrB,UAAO,KAAK,QAAL,IAAkB,SAAS,CAA5B,GAAkC,QAAQ,CAA1C,GAA8C,KAAK,GAAL,CAAS,CAAT,EAAY,EAAE,IAAd;AAD/B,IAAtB;AAGA,G;;uBASD,S,sBAAU,K,EAAO;AAChB,QAAK,IAAL,GAAY,MAAM,IAAlB;;AAEA,QAAK,UAAL,GAAkB,KAAlB;AACA,G;;;;;AAEF,eAAI,QAAJ,CAAa,UAAb;;;;;;;AAOA,YAAW,KAAX,GAAmB;;;;;;;;;;AAUlB,YAAU;AACT,cAAW,gBAAK,SADP;AAET,UAAO;AAFE,GAVQ;;;;;;;AAoBlB,UAAQ;AACP,cAAW,gBAAK,QADT;AAEP,UAAO;AAFA,GApBU;;;;;;;AA8BlB,QAAM;AACL,cAAW,gBAAK,QADX;AAEL,UAAO;AAFF,GA9BY;;;;;;;AAwClB,gBAAc;AACb,cAAW,gBAAK,SADH;AAEb,UAAO;AAFM,GAxCI;;;;;;;AAkDlB,WAAS;AACR,cAAW,gBAAK,QADR;AAER,UAAO;AACN,UAAM,MADA;AAEN,UAAM;AAFA;AAFC,GAlDS;;;;;;;;;AAiElB,SAAO;AACN,cAAW,gBAAK,QADV;AAEN,UAAO;AAFD;AAjEW,EAAnB;;AAuEA,YAAW,MAAX,GAAoB;AACnB,kBAAgB;AADG,EAApB;;mBAIe,U;AACoD,yBAAc,QAAd,CAAuB,YAAvB,EAAqC,UAArC","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport templates from './Pagination.soy';\nimport Component from 'metal-component';\nimport Soy from 'metal-soy';\n\n/**\n * UI Component that navigate through paged data.\n */\nclass Pagination extends Component {\n\t/**\n\t * @inheritDoc\n\t */\n\tcreated() {\n\t\t/**\n\t\t * Contains the previous page value\n\t\t * @type {Object}\n\t\t * @default {page: this.page}\n\t\t */\n\t\tthis.lastState_ = {\n\t\t\tpage: this.page\n\t\t};\n\n\t\tthis.on(Pagination.Events.CHANGE_REQUEST, this.defaultChangeRequestFn_, true);\n\t}\n\n\t/**\n\t * Default `changeRequest` function, sets new state of pagination.\n\t * @param {EventFacade} event\n\t * @protected\n\t */\n\tdefaultChangeRequestFn_(event) {\n\t\tthis.setState_(event.state);\n\t}\n\n\t/**\n\t * Fires `changeRequest` event.\n\t * @param {Object} state\n\t * @protected\n\t */\n\tdispatchRequest_(state) {\n\t\tthis.emit(\n\t\t\tPagination.Events.CHANGE_REQUEST,\n\t\t\t{\n\t\t\t\tlastState: this.lastState_,\n\t\t\t\toffset: this.offset,\n\t\t\t\tstate: state,\n\t\t\t\ttotal: this.total\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * Retrieve page number including offset e.g., if offset is 100 and\n\t * active page is 5, this method returns 105.\n\t * @return {number} current page number plus offset\n\t */\n\tgetOffsetPageNumber() {\n\t\treturn this.offset + this.page;\n\t}\n\n\t/**\n\t * Retrieve total number of pages including offset e.g., if offset is\n\t * 100 and total 10, this method returns 110.\n\t * @return {number} total page number plus offset\n\t */\n\tgetOffsetTotalPages() {\n\t\treturn this.offset + this.total;\n\t}\n\n\t/**\n\t* Navigate to the next page.\n\t*/\n\tnext() {\n\t\tvar page = this.page,\n\t\t\ttotal = this.total;\n\n\t\tthis.dispatchRequest_({\n\t\t\tpage: (this.circular && (page === total - 1)) ? 0 : Math.min(total, ++page)\n\t\t});\n\t}\n\n\t/**\n\t * `onClick` handler for pagination items.\n\t * @param {EventFacade} event\n\t */\n\tonClickItem(event) {\n\t\tvar item = event.delegateTarget;\n\n\t\tevent.preventDefault();\n\n\t\tvar index = parseInt(item.getAttribute('data-index'));\n\n\t\tthis.dispatchRequest_({\n\t\t\tpage: index\n\t\t});\n\t}\n\n\t/**\n\t * `onClick` handler for pagination items.\n\t * @param {EventFacade} event\n\t */\n\tonClickControls(event) {\n\t\tvar control = event.delegateTarget;\n\n\t\tevent.preventDefault();\n\n\t\tvar index = parseInt(control.getAttribute('data-control-index'));\n\n\t\tswitch (index) {\n\t\t\tcase 0:\n\t\t\t\tthis.prev();\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tthis.next();\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Navigate to the previous page.\n\t */\n\tprev() {\n\t\tvar page = this.page,\n\t\t\ttotal = this.total;\n\n\t\tthis.dispatchRequest_({\n\t\t\tpage: (this.circular && (page === 0)) ? total - 1 : Math.max(0, --page)\n\t\t});\n\t}\n\n\t/**\n\t * Set the new pagination state. The state is a payload object\n\t * containing the page number, e.g. `{page:1}`.\n\t * @param {Object} state\n\t * @return {Object}\n\t * @protected\n\t */\n\tsetState_(state) {\n\t\tthis.page = state.page;\n\n\t\tthis.lastState_ = state;\n\t}\n}\nSoy.register(Pagination, templates);\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nPagination.STATE = {\n\t/**\n\t * When enabled this property allows the navigation to go back to\n\t * the beggining when it reaches the last page, the opposite behavior\n\t * is also true. Incremental page navigation could happen clicking the\n\t * control arrows or invoking <code>.next()</code> and\n\t * <code>.prev()</code> methods.\n\t * @type {boolean}\n\t * @default true\n\t */\n\tcircular: {\n\t\tvalidator: core.isBoolean,\n\t\tvalue: true\n\t},\n\n\t/**\n\t * Initial page offset.\n\t * @type {number}\n\t * @default 1\n\t */\n\toffset: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: 1\n\t},\n\n\t/**\n\t * Page to display on initial paint.\n\t * @type {number}\n\t * @default 0\n\t */\n\tpage: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: 0\n\t},\n\n\t/**\n\t * Determines if pagination controls (Next and Prev) are rendered.\n\t * @type {boolean}\n\t * @default true\n\t */\n\tshowControls: {\n\t\tvalidator: core.isBoolean,\n\t\tvalue: true\n\t},\n\n\t/**\n\t * Collection of strings used to label elements of the UI.\n\t * @type {Object}\n\t * @default {next: 'Next', prev: 'Prev'}\n\t */\n\tstrings: {\n\t\tvalidator: core.isObject,\n\t\tvalue: {\n\t\t\tnext: 'Next',\n\t\t\tprev: 'Prev'\n\t\t}\n\t},\n\n\t/**\n\t * Total number of page links available. If set, the new\n\t * <a href=\"Pagination.html#config_items\">items</a> node list will\n\t * be rendered.\n\t * @type {number}\n\t * @default 0\n\t */\n\ttotal: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: 0\n\t}\n};\n\nPagination.Events = {\n\tCHANGE_REQUEST: 'changeRequest'\n};\n\nexport default Pagination;\nimport JQueryAdapter from 'metal-jquery-adapter/src/JQueryAdapter';JQueryAdapter.register('pagination', Pagination);"]}
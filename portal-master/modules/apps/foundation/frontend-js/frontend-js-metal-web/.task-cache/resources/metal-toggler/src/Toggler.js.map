{"version":3,"sources":["/source/Toggler.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport dom from 'metal-dom';\nimport { EventHandler } from 'metal-events';\nimport State from 'metal-state';\n\n/**\n * Toggler component.\n */\nclass Toggler extends State {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\n\t\tthis.headerEventHandler_ = new EventHandler();\n\n\t\tthis.on('headerChanged', this.syncHeader);\n\t\tthis.syncHeader();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tsuper.disposeInternal();\n\t\tthis.headerEventHandler_.removeAllListeners();\n\t}\n\n\t/**\n\t * Gets the content to be toggled by the given header element.\n\t * @param {!Element} header\n\t * @protected\n\t */\n\tgetContentElement_(header) {\n\t\tif (core.isElement(this.content)) {\n\t\t\treturn this.content;\n\t\t}\n\n\t\tvar content = dom.next(header, this.content);\n\t\tif (content) {\n\t\t\treturn content;\n\t\t}\n\n\t\tcontent = header.querySelector(this.content);\n\t\tif (content) {\n\t\t\treturn content;\n\t\t}\n\n\t\treturn this.container.querySelector(this.content);\n\t}\n\n\t/**\n\t * Handles a `click` event on the header.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleClick_(event) {\n\t\tthis.toggle(event.delegateTarget || event.currentTarget);\n\t}\n\n\t/**\n\t * Handles a `keydown` event on the header.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleKeydown_(event) {\n\t\tif (event.keyCode === 13 || event.keyCode === 32) {\n\t\t\tthis.toggle(event.delegateTarget || event.currentTarget);\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n\n\t/**\n\t * Syncs the component according to the value of the `header` state,\n\t * attaching events to the new element and detaching from any previous one.\n\t */\n\tsyncHeader() {\n\t\tthis.headerEventHandler_.removeAllListeners();\n\t\tif (this.header) {\n\t\t\tif (core.isString(this.header)) {\n\t\t\t\tthis.headerEventHandler_.add(\n\t\t\t\t\tdom.delegate(this.container, 'click', this.header, this.handleClick_.bind(this)),\n\t\t\t\t\tdom.delegate(this.container, 'keydown', this.header, this.handleKeydown_.bind(this))\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.headerEventHandler_.add(\n\t\t\t\t\tdom.on(this.header, 'click', this.handleClick_.bind(this)),\n\t\t\t\t\tdom.on(this.header, 'keydown', this.handleKeydown_.bind(this))\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Toggles the content's visibility.\n\t */\n\ttoggle(header) {\n\t\tvar content = this.getContentElement_(header);\n\t\tdom.toggleClasses(content, Toggler.CSS_EXPANDED);\n\t\tdom.toggleClasses(content, Toggler.CSS_COLLAPSED);\n\n\t\tif (dom.hasClass(content, Toggler.CSS_EXPANDED)) {\n\t\t\tdom.addClasses(header, Toggler.CSS_HEADER_EXPANDED);\n\t\t\tdom.removeClasses(header, Toggler.CSS_HEADER_COLLAPSED);\n\t\t} else {\n\t\t\tdom.removeClasses(header, Toggler.CSS_HEADER_EXPANDED);\n\t\t\tdom.addClasses(header, Toggler.CSS_HEADER_COLLAPSED);\n\t\t}\n\t}\n}\n\n/**\n * State configuration.\n */\nToggler.STATE = {\n\t/**\n\t * The element where the header/content selectors will be looked for.\n\t * @type {string|!Element}\n\t */\n\tcontainer: {\n\t\tsetter: dom.toElement,\n\t\tvalidator: value => core.isString(value) || core.isElement(value),\n\t\tvalue: document\n\t},\n\n\t/**\n\t * The element that should be expanded/collapsed by this toggler.\n\t * @type {string|!Element}\n\t */\n\tcontent: {\n\t\tvalidator: value => core.isString(value) || core.isElement(value)\n\t},\n\n\t/**\n\t * The element that should be trigger toggling.\n\t * @type {string|!Element}\n\t */\n\theader: {\n\t\tvalidator: value => core.isString(value) || core.isElement(value)\n\t}\n};\n\n/**\n * The CSS class added to the content when it's collapsed.\n */\nToggler.CSS_COLLAPSED = 'toggler-collapsed';\n\n/**\n * The CSS class added to the content when it's expanded.\n */\nToggler.CSS_EXPANDED = 'toggler-expanded';\n\n/**\n * The CSS class added to the header when the content is collapsed.\n */\nToggler.CSS_HEADER_COLLAPSED = 'toggler-header-collapsed';\n\n/**\n * The CSS class added to the header when the content is expanded.\n */\nToggler.CSS_HEADER_EXPANDED = 'toggler-header-expanded';\n\nexport default Toggler;\nimport JQueryAdapter from 'metal-jquery-adapter/src/JQueryAdapter';JQueryAdapter.register('toggler', Toggler);"]}
{"version":3,"sources":["/source/DragAutoScroll.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport State from 'metal-state';\nimport Position from 'metal-position';\n\n/**\n * Helper called by the `Drag` instance that scrolls elements when the\n * mouse is near their boundaries.\n */\nclass DragAutoScroll extends State {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\n\t\t/**\n\t\t * The handler for the current call to `setTimeout`.\n\t\t * @type {?number}\n\t\t * @protected\n\t\t */\n\t\tthis.scrollTimeout_ = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tsuper.disposeInternal();\n\t\tthis.stop();\n\t}\n\n\t/**\n\t * Gets the region for the given scroll container, without including scroll.\n\t * @param {!Element} scrollContainer\n\t * @return {!Object}\n\t * @protected\n\t */\n\tgetRegionWithoutScroll_(scrollContainer) {\n\t\tif (core.isDocument(scrollContainer)) {\n\t\t\tvar height = window.innerHeight;\n\t\t\tvar width = window.innerWidth;\n\t\t\treturn Position.makeRegion(height, height, 0, width, 0, width);\n\t\t} else {\n\t\t\treturn Position.getRegion(scrollContainer);\n\t\t}\n\t}\n\n\t/**\n\t * Schedules a function to scroll the given containers.\n\t * @param {!Array<!Element>} scrollContainers\n\t * @param {number} mouseX\n\t * @param {number} mouseY\n\t */\n\tscroll(scrollContainers, mouseX, mouseY) {\n\t\tthis.stop();\n\t\tthis.scrollTimeout_ = setTimeout(\n\t\t\tthis.scrollInternal_.bind(this, scrollContainers, mouseX, mouseY),\n\t\t\tthis.delay\n\t\t);\n\t}\n\n\t/**\n\t * Adds the given deltas to the given element's scroll position.\n\t * @param {!Element} element\n\t * @param {number} deltaX\n\t * @param {number} deltaY\n\t * @protected\n\t */\n\tscrollElement_(element, deltaX, deltaY) {\n\t\tif (core.isDocument(element)) {\n\t\t\twindow.scrollBy(deltaX, deltaY);\n\t\t} else {\n\t\t\telement.scrollTop += deltaY;\n\t\t\telement.scrollLeft += deltaX;\n\t\t}\n\t}\n\n\t/**\n\t * Scrolls the given containers if the mouse is near their boundaries.\n\t * @param {!Array<!Element>} scrollContainers\n\t * @param {number} mouseX\n\t * @param {number} mouseY\n\t * @protected\n\t */\n\tscrollInternal_(scrollContainers, mouseX, mouseY) {\n\t\tfor (var i = 0; i < scrollContainers.length; i++) {\n\t\t\tvar scrollRegion = this.getRegionWithoutScroll_(scrollContainers[i]);\n\t\t\tif (!Position.pointInsideRegion(mouseX, mouseY, scrollRegion)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar deltaX = 0;\n\t\t\tvar deltaY = 0;\n\t\t\tvar scrollTop = Position.getScrollTop(scrollContainers[i]);\n\t\t\tvar scrollLeft = Position.getScrollLeft(scrollContainers[i]);\n\t\t\tif (scrollLeft > 0 && Math.abs(mouseX - scrollRegion.left) <= this.maxDistance) {\n\t\t\t\tdeltaX -= this.speed;\n\t\t\t} else if (Math.abs(mouseX - scrollRegion.right) <= this.maxDistance) {\n\t\t\t\tdeltaX += this.speed;\n\t\t\t}\n\t\t\tif (scrollTop > 0 && Math.abs(mouseY - scrollRegion.top) <= this.maxDistance) {\n\t\t\t\tdeltaY -= this.speed;\n\t\t\t} else if (Math.abs(mouseY - scrollRegion.bottom) <= this.maxDistance) {\n\t\t\t\tdeltaY += this.speed;\n\t\t\t}\n\n\t\t\tif (deltaX || deltaY) {\n\t\t\t\tthis.scrollElement_(scrollContainers[i], deltaX, deltaY);\n\t\t\t\tthis.scroll(scrollContainers, mouseX, mouseY);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Stops any auto scrolling that was scheduled to happen in the future.\n\t */\n\tstop() {\n\t\tclearTimeout(this.scrollTimeout_);\n\t}\n}\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nDragAutoScroll.STATE = {\n\t/**\n\t * The delay in ms before an element is scrolled automatically.\n\t * @type {number}\n\t * @default 200\n\t */\n\tdelay: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: 50\n\t},\n\n\t/**\n\t * The maximum distance the mouse needs to be from an element before\n\t * it will be scrolled automatically.\n\t * @type {number}\n\t * @default 10\n\t */\n\tmaxDistance: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: 20\n\t},\n\n\t/**\n\t * The number of pixels that will be scrolled each time.\n\t * @type {number}\n\t * @default 10\n\t */\n\tspeed: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: 20\n\t}\n};\n\nexport default DragAutoScroll;\n"]}
{"version":3,"sources":["/source/DragDrop.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport { array, core, object } from 'metal';\nimport dom from 'metal-dom';\nimport Drag from './Drag';\nimport Position from 'metal-position';\nimport 'metal-events';\n\n/**\n * Adds the functionality of dropping dragged elements to specific\n * targets to the `Drag` class.\n * @extends {Drag}\n */\nclass DragDrop extends Drag {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\n\t\t/**\n\t\t * The currently active targets, that is, the ones that the dragged source is over.\n\t\t * @type {!Array<!Element>}\n\t\t * @protected\n\t\t */\n\t\tthis.activeTargets_ = [];\n\t}\n\n\t/**\n\t * Adds a target to this `DragDrop` instance.\n\t * @param {!Element} target\n\t */\n\taddTarget(target) {\n\t\tthis.targets.push(target);\n\t\tthis.targets = this.targets;\n\t}\n\n\t/**\n\t * Overrides the original method from `Drag` to include the target on the event object.\n\t * @return {!Object}\n\t * @protected\n\t * @override\n\t */\n\tbuildEventObject_() {\n\t\tvar obj = super.buildEventObject_();\n\t\tobj.target = this.activeTargets_[0];\n\t\tobj.allActiveTargets = this.activeTargets_;\n\t\treturn obj;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tcleanUpAfterDragging_() {\n\t\tsuper.cleanUpAfterDragging_();\n\t\tthis.targets.forEach(target => target.removeAttribute('aria-dropeffect'));\n\t\tif (this.activeTargets_.length) {\n\t\t\tdom.removeClasses(this.activeTargets_[0], this.targetOverClass);\n\t\t}\n\t\tthis.activeTargets_ = [];\n\t}\n\n\t/**\n\t * Finds all targets that the dragged element is currently over.\n\t * @return {!Array<!Element>} The current active targets.\n\t * @protected\n\t */\n\tfindAllActiveTargets_() {\n\t\tvar activeTargets = [];\n\t\tvar mainRegion;\n\t\tvar sourceRegion = this.getSourceRegion_();\n\t\tvar targets = this.targets;\n\t\ttargets.forEach(function(target, index) {\n\t\t\tvar region = Position.getRegion(target);\n\t\t\tif (targets[index] !== this.activeDragPlaceholder_ && Position.intersectRegion(region, sourceRegion)) {\n\t\t\t\tif (!mainRegion || Position.insideRegion(mainRegion, region)) {\n\t\t\t\t\tactiveTargets = [targets[index]].concat(activeTargets);\n\t\t\t\t\tmainRegion = region;\n\t\t\t\t} else {\n\t\t\t\t\tactiveTargets.push(targets[index]);\n\t\t\t\t}\n\t\t\t}\n\t\t}.bind(this));\n\t\treturn activeTargets;\n\t}\n\n\t/**\n\t * Gets the active source's region, to be used when calculating which targets are active.\n\t * @return {!Object}\n\t * @protected\n\t */\n\tgetSourceRegion_() {\n\t\tif (core.isDefAndNotNull(this.mousePos_)) {\n\t\t\tvar x = this.mousePos_.x;\n\t\t\tvar y = this.mousePos_.y;\n\t\t\treturn Position.makeRegion(y, 0, x, x, y, 0);\n\t\t} else {\n\t\t\t// We need to remove the scroll data from the region, since the other regions we'll\n\t\t\t// be comparing to won't take that information into account.\n\t\t\tvar region = object.mixin({}, this.sourceRegion_);\n\t\t\tregion.left -= document.body.scrollLeft;\n\t\t\tregion.right -= document.body.scrollLeft;\n\t\t\tregion.top -= document.body.scrollTop;\n\t\t\tregion.bottom -= document.body.scrollTop;\n\t\t\treturn region;\n\t\t}\n\t}\n\n\t/**\n\t * Triggers when the `container` state changes. Overrides default method so\n\t * it will also update `targets` when container changes.\n\t * @param {!Object} data\n\t * @param {!Object} event\n\t * @protected\n\t */\n\thandleContainerChanged_(data, event) {\n\t\tsuper.handleContainerChanged_(data, event);\n\t\tif (this.prevTargetsSelector_) {\n\t\t\tthis.targets = this.prevTargetsSelector_;\n\t\t}\n\t}\n\n\t/**\n\t * Removes a target from this `DragDrop` instance.\n\t * @param {!Element} target\n\t */\n\tremoveTarget(target) {\n\t\tarray.remove(this.targets, target);\n\t\tthis.targets = this.targets;\n\t}\n\n\t/**\n\t * Sets the `targets` state property.\n\t * @param {Element|string} val\n\t * @return {!Array<!Element>}\n\t * @protected\n\t */\n\tsetterTargetsFn_(val) {\n\t\tthis.prevTargetsSelector_ = core.isString(val) ? val : null;\n\t\treturn this.toElements_(val);\n\t}\n\n\t/**\n\t * Overrides the original method from `Drag` to also set the \"aria-dropeffect\"\n\t * attribute, if set, for all targets.\n\t * @return {[type]} [description]\n\t */\n\tstartDragging_() {\n\t\tif (this.ariaDropEffect) {\n\t\t\tthis.targets.forEach(target => target.setAttribute('aria-dropeffect', this.ariaDropEffect));\n\t\t}\n\t\tsuper.startDragging_();\n\t}\n\n\t/**\n\t * Overrides original method from `Drag` to also be enable finding the target\n\t * the dragged element is over at the new position.\n\t * @param {number} deltaX\n\t * @param {number} deltaY\n\t * @override\n\t */\n\tupdatePosition(deltaX, deltaY) {\n\t\tsuper.updatePosition(deltaX, deltaY);\n\n\t\tvar newTargets = this.findAllActiveTargets_();\n\t\tif (newTargets[0] !== this.activeTargets_[0]) {\n\t\t\tif (this.activeTargets_[0]) {\n\t\t\t\tdom.removeClasses(this.activeTargets_[0], this.targetOverClass);\n\t\t\t\tthis.emit(DragDrop.Events.TARGET_LEAVE, this.buildEventObject_());\n\t\t\t}\n\n\t\t\tthis.activeTargets_ = newTargets;\n\t\t\tif (this.activeTargets_[0]) {\n\t\t\t\tdom.addClasses(this.activeTargets_[0], this.targetOverClass);\n\t\t\t\tthis.emit(DragDrop.Events.TARGET_ENTER, this.buildEventObject_());\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nDragDrop.STATE = {\n\t/**\n\t * The \"aria-dropeffect\" value to be set for all targets. If not set,\n\t * this html attribute will have to be set manually on the targets.\n\t * @type {string}\n\t */\n\tariaDropEffect: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * The CSS class that should be added to drop targets when a source\n\t * is being dragged over them.\n\t * @type {string}\n\t * @default 'dropOver'\n\t */\n\ttargetOverClass: {\n\t\tvalidator: core.isString,\n\t\tvalue: 'targetOver'\n\t},\n\n\t/**\n\t * Elements that the sources can be dropped on. Can be either a single\n\t * element or a selector for multiple elements.\n\t * @type {!Element|string}\n\t */\n\ttargets: {\n\t\tsetter: 'setterTargetsFn_',\n\t\tvalidator: 'validateElementOrString_'\n\t}\n};\n\n/**\n * Holds the names of events that can be emitted by `DragDrop`.\n * @type {!Object}\n * @static\n */\nDragDrop.Events = {\n\tDRAG: 'drag',\n\tEND: 'end',\n\tTARGET_ENTER: 'targetEnter',\n\tTARGET_LEAVE: 'targetLeave'\n};\n\nexport default DragDrop;\n"]}
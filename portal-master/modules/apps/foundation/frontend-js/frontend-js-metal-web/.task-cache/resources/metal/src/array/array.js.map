{"version":3,"sources":["/source/array.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;KAIM,K;;;;;QAOE,K,kBAAM,I,EAAM,I,EAAM;AACxB,OAAI,KAAK,MAAL,KAAgB,KAAK,MAAzB,EAAiC;AAChC,WAAO,KAAP;AACA;AACD,QAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAzB,EAAiC,GAAjC,EAAsC;AACrC,QAAI,KAAK,CAAL,MAAY,KAAK,CAAL,CAAhB,EAAyB;AACxB,YAAO,KAAP;AACA;AACD;AACD,UAAO,IAAP;AACA,G;;QAOM,iB,8BAAkB,G,EAAK;AAC7B,QAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,IAAI,MAAxB,EAAgC,GAAhC,EAAqC;AACpC,QAAI,IAAI,CAAJ,MAAW,SAAf,EAA0B;AACzB,YAAO,IAAI,CAAJ,CAAP;AACA;AACD;AACD,G;;QAQM,O,oBAAQ,G,EAAK,U,EAAY;AAC/B,OAAI,SAAS,cAAc,EAA3B;AACA,QAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,IAAI,MAAxB,EAAgC,GAAhC,EAAqC;AACpC,QAAI,MAAM,OAAN,CAAc,IAAI,CAAJ,CAAd,CAAJ,EAA2B;AAC1B,WAAM,OAAN,CAAc,IAAI,CAAJ,CAAd,EAAsB,MAAtB;AACA,KAFD,MAEO;AACN,YAAO,IAAP,CAAY,IAAI,CAAJ,CAAZ;AACA;AACD;AACD,UAAO,MAAP;AACA,G;;QASM,M,mBAAO,G,EAAK,G,EAAK;AACvB,OAAI,IAAI,IAAI,OAAJ,CAAY,GAAZ,CAAR;AACA,OAAI,EAAJ;AACA,OAAM,KAAK,KAAK,CAAhB,EAAqB;AACpB,UAAM,QAAN,CAAe,GAAf,EAAoB,CAApB;AACA;AACD,UAAO,EAAP;AACA,G;;QAQM,Q,qBAAS,G,EAAK,C,EAAG;AACvB,UAAO,MAAM,SAAN,CAAgB,MAAhB,CAAuB,IAAvB,CAA4B,GAA5B,EAAiC,CAAjC,EAAoC,CAApC,EAAuC,MAAvC,KAAkD,CAAzD;AACA,G;;QAYM,K,kBAAM,G,EAAK,K,EAAO,O,EAAS;AACjC,OAAI,SAAS,EAAb;AACA,OAAI,MAAM,eAAK,KAAL,CAAW,OAAX,IAAsB,OAAtB,GAAgC,IAAI,MAA9C;AACA,QAAK,IAAI,IAAI,KAAb,EAAoB,IAAI,GAAxB,EAA6B,GAA7B,EAAkC;AACjC,WAAO,IAAP,CAAY,IAAI,CAAJ,CAAZ;AACA;AACD,UAAO,MAAP;AACA,G;;;;;mBAGa,K","sourcesContent":["'use strict';\n\nimport core from '../core';\n\nclass array {\n\t/**\n\t * Checks if the given arrays have the same content.\n\t * @param {!Array<*>} arr1\n\t * @param {!Array<*>} arr2\n\t * @return {boolean}\n\t */\n\tstatic equal(arr1, arr2) {\n\t\tif (arr1.length !== arr2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (var i = 0; i < arr1.length; i++) {\n\t\t\tif (arr1[i] !== arr2[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the first value in the given array that isn't undefined.\n\t * @param {!Array} arr\n\t * @return {*}\n\t */\n\tstatic firstDefinedValue(arr) {\n\t\tfor (var i = 0; i < arr.length; i++) {\n\t\t\tif (arr[i] !== undefined) {\n\t\t\t\treturn arr[i];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Transforms the input nested array to become flat.\n\t * @param {Array.<*|Array.<*>>} arr Nested array to flatten.\n\t * @param {Array.<*>} opt_output Optional output array.\n\t * @return {Array.<*>} Flat array.\n\t */\n\tstatic flatten(arr, opt_output) {\n\t\tvar output = opt_output || [];\n\t\tfor (var i = 0; i < arr.length; i++) {\n\t\t\tif (Array.isArray(arr[i])) {\n\t\t\t\tarray.flatten(arr[i], output);\n\t\t\t} else {\n\t\t\t\toutput.push(arr[i]);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Removes the first occurrence of a particular value from an array.\n\t * @param {Array.<T>} arr Array from which to remove value.\n\t * @param {T} obj Object to remove.\n\t * @return {boolean} True if an element was removed.\n\t * @template T\n\t */\n\tstatic remove(arr, obj) {\n\t\tvar i = arr.indexOf(obj);\n\t\tvar rv;\n\t\tif ( (rv = i >= 0) ) {\n\t\t\tarray.removeAt(arr, i);\n\t\t}\n\t\treturn rv;\n\t}\n\n\t/**\n\t * Removes from an array the element at index i\n\t * @param {Array} arr Array or array like object from which to remove value.\n\t * @param {number} i The index to remove.\n\t * @return {boolean} True if an element was removed.\n\t */\n\tstatic removeAt(arr, i) {\n\t\treturn Array.prototype.splice.call(arr, i, 1).length === 1;\n\t}\n\n\t/**\n\t * Slices the given array, just like Array.prototype.slice, but this\n\t * is faster and working on all array-like objects (like arguments).\n\t * @param {!Object} arr Array-like object to slice.\n\t * @param {number} start The index that should start the slice.\n\t * @param {number=} opt_end The index where the slice should end, not\n\t *   included in the final array. If not given, all elements after the\n\t *   start index will be included.\n\t * @return {!Array}\n\t */\n\tstatic slice(arr, start, opt_end) {\n\t\tvar sliced = [];\n\t\tvar end = core.isDef(opt_end) ? opt_end : arr.length;\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tsliced.push(arr[i]);\n\t\t}\n\t\treturn sliced;\n\t}\n}\n\nexport default array;\n"]}
{"version":3,"sources":["/source/ProgressBar.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAUM,W;;;;;;;;;wBAQL,c,2BAAe,K,EAAO;AACrB,OAAI,QAAQ,KAAK,GAAjB,EAAsB;AACrB,YAAQ,KAAK,GAAb;AACA;AACD,OAAI,QAAQ,KAAK,GAAjB,EAAsB;AACrB,YAAQ,KAAK,GAAb;AACA;AACD,UAAO,KAAP;AACA,G;;wBAMD,O,oBAAQ,G,EAAK;AACZ,OAAI,MAAM,KAAK,KAAf,EAAsB;AACrB,SAAK,KAAL,GAAa,GAAb;AACA;AACD,G;;wBAMD,O,oBAAQ,G,EAAK;AACZ,OAAI,MAAM,KAAK,KAAf,EAAsB;AACrB,SAAK,KAAL,GAAa,GAAb;AACA;AACD,G;;;;;;;;;;AAQF,aAAY,KAAZ,GAAoB;;;;;;AAMnB,YAAU;AACT,cAAW,gBAAK;AADP,GANS;;;;;;AAcnB,SAAO;AACN,cAAW,0BAAS;AACnB,WAAO,CAAC,gBAAK,eAAL,CAAqB,KAArB,CAAD,IAAgC,gBAAK,QAAL,CAAc,KAAd,CAAvC;AACA;AAHK,GAdY;;;;;;;AAyBnB,OAAK;AACJ,cAAW,gBAAK,QADZ;AAEJ,UAAO;AAFH,GAzBc;;;;;;;AAmCnB,OAAK;AACJ,cAAW,gBAAK,QADZ;AAEJ,UAAO;AAFH,GAnCc;;;;;;AA4CnB,SAAO;AACN,WAAQ,gBADF;AAEN,cAAW,gBAAK,QAFV;AAGN,UAAO;AAHD;AA5CY,EAApB;AAkDA,eAAI,QAAJ,CAAa,WAAb;;mBAEe,W;AACoD,yBAAc,QAAd,CAAuB,aAAvB,EAAsC,WAAtC","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport Component from 'metal-component';\nimport Soy from 'metal-soy';\nimport templates from './ProgressBar.soy';\n\n/**\n * UI Component that renders a progress bar.\n */\nclass ProgressBar extends Component {\n\t/**\n\t * Setter function for the `value` state key. Makes sure the value\n\t * is between the current `min` and `max` state keys.\n\t * @param {number} value\n\t * @return {number}\n\t * @protected\n\t */\n\tsetterValueFn_(value) {\n\t\tif (value < this.min) {\n\t\t\tvalue = this.min;\n\t\t}\n\t\tif (value > this.max) {\n\t\t\tvalue = this.max;\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Synchronization logic for the `max` state.\n\t * @param {number} max\n\t */\n\tsyncMax(max) {\n\t\tif (max < this.value) {\n\t\t\tthis.value = max;\n\t\t}\n\t}\n\n\t/**\n\t * Synchronization logic for the `min` state.\n\t * @param {number} min\n\t */\n\tsyncMin(min) {\n\t\tif (min > this.value) {\n\t\t\tthis.value = min;\n\t\t}\n\t}\n}\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nProgressBar.STATE = {\n\t/**\n\t * Optional CSS classes to be added to the inner progress bar element,\n\t * like 'progress-bar-danger'.\n\t * @type {string}\n\t */\n\tbarClass: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * An optional label to be rendered inside the progress bar.\n\t * @type {string}\n\t */\n\tlabel: {\n\t\tvalidator: label => {\n\t\t\treturn !core.isDefAndNotNull(label) || core.isString(label);\n\t\t}\n\t},\n\n\t/**\n\t * The maximum value of the progress bar. When the value is at its\n\t * max, the bar will be fully extended.\n\t * @type {number}\n\t */\n\tmax: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: 100\n\t},\n\n\t/**\n\t * The minimum value of the progress bar. When the value is at its\n\t * max, the bar will be fully collapsed.\n\t * @type {number}\n\t */\n\tmin: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: 0\n\t},\n\n\t/**\n\t * The current value of the progress bar.\n\t * @type {number}\n\t */\n\tvalue: {\n\t\tsetter: 'setterValueFn_',\n\t\tvalidator: core.isNumber,\n\t\tvalue: 0\n\t}\n};\nSoy.register(ProgressBar, templates);\n\nexport default ProgressBar;\nimport JQueryAdapter from 'metal-jquery-adapter/src/JQueryAdapter';JQueryAdapter.register('progressBar', ProgressBar);"]}
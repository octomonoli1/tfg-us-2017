{"version":3,"sources":["/source/Scrollspy.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport dom from 'metal-dom';\nimport Position from 'metal-position';\nimport State from 'metal-state';\n\n/**\n * Scrollspy utility.\n */\nclass Scrollspy extends State {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\n\t\t/**\n\t\t * Holds the regions cache.\n\t\t * @type {!Array}\n\t\t * @private\n\t\t * @default []\n\t\t */\n\t\tthis.regions = [];\n\n\t\t/**\n\t\t * Holds event handle that listens scroll shared event emitter proxy.\n\t\t * @type {!EventHandle}\n\t\t * @protected\n\t\t */\n\t\tthis.scrollHandle_ = dom.on(this.scrollElement, 'scroll', this.checkPosition.bind(this));\n\n\t\tthis.init();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.deactivateAll();\n\t\tthis.scrollHandle_.dispose();\n\t\tsuper.disposeInternal();\n\t}\n\n\t/**\n\t * Activates index matching element.\n\t * @param {number} index\n\t */\n\tactivate(index) {\n\t\tif (this.activeIndex >= 0) {\n\t\t\tthis.deactivate(this.activeIndex);\n\t\t}\n\t\tthis.activeIndex = index;\n\t\tdom.addClasses(this.getElementForIndex(index), this.activeClass);\n\t}\n\n\t/**\n\t * Checks position of elements and activate the one in region.\n\t */\n\tcheckPosition() {\n\t\tvar scrollHeight = this.getScrollHeight_();\n\t\tvar scrollTop = Position.getScrollTop(this.scrollElement);\n\n\t\tif (scrollHeight < scrollTop + this.offset) {\n\t\t\tthis.activate(this.regions.length - 1);\n\t\t\treturn;\n\t\t}\n\n\t\tvar index = this.findBestRegionAt_();\n\t\tif (index !== this.activeIndex) {\n\t\t\tif (index === -1) {\n\t\t\t\tthis.deactivateAll();\n\t\t\t} else {\n\t\t\t\tthis.activate(index);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Deactivates index matching element.\n\t * @param {number} index\n\t */\n\tdeactivate(index) {\n\t\tdom.removeClasses(this.getElementForIndex(index), this.activeClass);\n\t}\n\n\t/**\n\t * Deactivates all elements.\n\t */\n\tdeactivateAll() {\n\t\tfor (var i = 0; i < this.regions.length; i++) {\n\t\t\tthis.deactivate(i);\n\t\t}\n\t\tthis.activeIndex = -1;\n\t}\n\n\t/**\n\t * Finds best region to activate.\n\t * @return {number} The index of best region found.\n\t */\n\tfindBestRegionAt_() {\n\t\tvar index = -1;\n\t\tvar origin = this.getCurrentPosition();\n\t\tif (this.regions.length > 0 && origin >= this.regions[0].top) {\n\t\t\tfor (var i = 0; i < this.regions.length; i++) {\n\t\t\t\tvar region = this.regions[i];\n\t\t\t\tvar lastRegion = i === this.regions.length - 1;\n\t\t\t\tif ((origin >= region.top) && (lastRegion || (origin < this.regions[i + 1].top))) {\n\t\t\t\t\tindex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn index;\n\t}\n\n\t/**\n\t * Gets the current position in the page.\n\t * @return {number}\n\t */\n\tgetCurrentPosition() {\n\t\tvar scrollTop = Position.getScrollTop(this.scrollElement);\n\t\treturn scrollTop + this.offset + this.scrollElementRegion_.top;\n\t}\n\n\t/**\n\t * Returns the element that should be used for the link at the given index.\n\t * @param {number} index\n\t * @return {!Element}\n\t */\n\tgetElementForIndex(index) {\n\t\treturn this.resolveElement(this.regions[index].link);\n\t}\n\n\t/**\n\t * Gets the scroll height of `scrollElement`.\n\t * @return {number}\n\t * @protected\n\t */\n\tgetScrollHeight_() {\n\t\tvar scrollHeight = Position.getHeight(this.scrollElement);\n\t\tscrollHeight += this.scrollElementRegion_.top;\n\t\tscrollHeight -= Position.getClientHeight(this.scrollElement);\n\t\treturn scrollHeight;\n\t}\n\n\t/**\n\t * Initializes the behavior of scrollspy. It's important to have this as a\n\t * separate function so subclasses can override it (babel doesn't allow using\n\t * `this` on constructors before calling `super()`).\n\t */\n\tinit() {\n\t\tthis.refresh();\n\t\tthis.on('elementChanged', this.refresh);\n\t\tthis.on('offsetChanged', this.checkPosition);\n\t\tthis.on('scrollElementChanged', this.onScrollElementChanged_);\n\t\tthis.on('selectorChanged', this.refresh);\n\t}\n\n\t/**\n\t * Fired when the value of the `scrollElement` state changes.\n\t * Refreshes the spy and updates the event handler to listen to the new scroll element.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\tonScrollElementChanged_(event) {\n\t\tthis.refresh();\n\n\t\tthis.scrollHandle_.dispose();\n\t\tthis.scrollHandle_ = dom.on(event.newVal, 'scroll', this.checkPosition.bind(this));\n\t}\n\n\t/**\n\t * Refreshes all regions from document. Relevant when spying elements that\n\t * nodes can be added and removed.\n\t */\n\trefresh() {\n\t\t// Removes the \"active\" class from all current regions.\n\t\tthis.deactivateAll();\n\n\t\tthis.scrollElementRegion_ = Position.getRegion(this.scrollElement);\n\t\tthis.scrollHeight_ = this.getScrollHeight_();\n\n\t\tthis.regions = [];\n\t\tvar links = this.element.querySelectorAll(this.selector);\n\t\tvar scrollTop = Position.getScrollTop(this.scrollElement);\n\t\tfor (var i = 0; i < links.length; ++i) {\n\t\t\tvar link = links[i];\n\t\t\tif (link.hash && (link.hash.length > 1)) {\n\t\t\t\tvar element = document.getElementById(link.hash.substring(1));\n\t\t\t\tif (element) {\n\t\t\t\t\tvar region = Position.getRegion(element);\n\t\t\t\t\tthis.regions.push({\n\t\t\t\t\t\tlink: link,\n\t\t\t\t\t\ttop: region.top + scrollTop,\n\t\t\t\t\t\tbottom: region.bottom + scrollTop\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.sortRegions_();\n\n\t\t// Removes the \"active\" class from all new regions and then activate the right one for\n\t\t// the current position.\n\t\tthis.deactivateAll();\n\t\tthis.checkPosition();\n\t}\n\n\t/**\n\t * Sorts regions from lower to higher on y-axis.\n\t * @protected\n\t */\n\tsortRegions_() {\n\t\tthis.regions.sort(function(a, b) {\n\t\t\treturn a.top - b.top;\n\t\t});\n\t}\n}\n\nScrollspy.STATE = {\n\t/**\n\t * Class to be used as active class.\n\t * @type {string}\n\t */\n\tactiveClass: {\n\t\tvalidator: core.isString,\n\t\tvalue: 'active'\n\t},\n\n\t/**\n\t * The index of the currently active link.\n\t * @type {number}\n\t */\n\tactiveIndex: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: -1\n\t},\n\n\t/**\n\t * Function that receives the matching element as argument and return\n\t * itself. Relevant when the `activeClass` must be applied to a different\n\t * element, e.g. a parentNode.\n\t * @type {function}\n\t * @default core.identityFunction\n\t */\n\tresolveElement: {\n\t\tvalidator: core.isFunction,\n\t\tvalue: core.identityFunction\n\t},\n\n\t/**\n\t * The scrollElement element to be used as scrollElement area for scrollspy.\n\t * The scrollElement is where the scroll event is listened from.\n\t * @type {Element|Window}\n\t */\n\tscrollElement: {\n\t\tsetter: dom.toElement,\n\t\tvalue: document\n\t},\n\n\t/**\n\t * Defines the offset that triggers scrollspy.\n\t * @type {number}\n\t * @default 0\n\t */\n\toffset: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: 0\n\t},\n\n\t/**\n\t * Element to be used as alignment reference of scrollspy.\n\t * @type {Element}\n\t */\n\telement: {\n\t\tsetter: dom.toElement\n\t},\n\n\t/**\n\t * Selector to query elements inside `element` to be activated.\n\t * @type {Element}\n\t * @default 'a'\n\t */\n\tselector: {\n\t\tvalidator: core.isString,\n\t\tvalue: 'a'\n\t}\n};\n\nexport default Scrollspy;\nimport JQueryAdapter from 'metal-jquery-adapter/src/JQueryAdapter';JQueryAdapter.register('scrollspy', Scrollspy);"]}
{"version":3,"sources":["/source/unescape.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBC,WAAS,QAAT,CAAkB,GAAlB,EAAuB;;AAErB,QAAI,OAAO,EAAC,SAAS,GAAV,EAAe,QAAQ,GAAvB,EAA4B,QAAQ,GAApC,EAAyC,UAAU,GAAnD,EAAX;AACA,QAAI,MAAM,SAAS,aAAT,CAAuB,KAAvB,CAAV;;;;;;;AAOA,WAAO,IAAI,OAAJ,CAAY,oBAAZ,EAAkC,UAAS,CAAT,EAAY,MAAZ,EAAoB;;AAE3D,UAAI,QAAQ,KAAK,CAAL,CAAZ;AACA,UAAI,KAAJ,EAAW;AACT,eAAO,KAAP;AACD;;AAED,UAAI,OAAO,MAAP,CAAc,CAAd,MAAqB,GAAzB,EAA8B;;AAE5B,YAAI,IAAI,OAAO,MAAM,OAAO,MAAP,CAAc,CAAd,CAAb,CAAR;AACA,YAAI,CAAC,MAAM,CAAN,CAAL,EAAe;AACb,kBAAQ,OAAO,YAAP,CAAoB,CAApB,CAAR;AACD;AACF;;AAED,UAAI,CAAC,KAAL,EAAY;;;AAGV,YAAI,SAAJ,GAAgB,IAAI,GAApB;;AAEA,gBAAQ,IAAI,UAAJ,CAAe,SAAf,CAAyB,KAAzB,CAA+B,CAA/B,EAAkC,CAAC,CAAnC,CAAR;AACD;;AAED,WAAK,CAAL,IAAU,KAAV;AACA,aAAO,KAAP;AACD,KAzBM,CAAP;AA0BD;;oBAEa,Q;;;;;;;AAMf,MAAI,uBAAuB,iBAA3B","sourcesContent":["'use strict';\n\n// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Unescapes an HTML string using a DOM to resolve non-XML, non-numeric\n * entities. This function is XSS-safe and whitespace-preserving.\n * @private\n * @param {string} str The string to unescape.\n * @return {string} The unescaped {@code str} string.\n */\n function unescape(str) {\n   /** @type {!Object<string, string>} */\n   var seen = {'&amp;': '&', '&lt;': '<', '&gt;': '>', '&quot;': '\"'};\n   var div = document.createElement('div');\n\n   // Match as many valid entity characters as possible. If the actual entity\n   // happens to be shorter, it will still work as innerHTML will return the\n   // trailing characters unchanged. Since the entity characters do not include\n   // open angle bracket, there is no chance of XSS from the innerHTML use.\n   // Since no whitespace is passed to innerHTML, whitespace is preserved.\n   return str.replace(HTML_ENTITY_PATTERN_, function(s, entity) {\n     // Check for cached entity.\n     var value = seen[s];\n     if (value) {\n       return value;\n     }\n     // Check for numeric entity.\n     if (entity.charAt(0) === '#') {\n       // Prefix with 0 so that hex entities (e.g. &#x10) parse as hex numbers.\n       var n = Number('0' + entity.substr(1));\n       if (!isNaN(n)) {\n         value = String.fromCharCode(n);\n       }\n     }\n     // Fall back to innerHTML otherwise.\n     if (!value) {\n       // Append a non-entity character to avoid a bug in Webkit that parses\n       // an invalid entity at the end of innerHTML text as the empty string.\n       div.innerHTML = s + ' ';\n       // Then remove the trailing character from the result.\n       value = div.firstChild.nodeValue.slice(0, -1);\n     }\n     // Cache and return.\n     seen[s] = value;\n     return value;\n   });\n }\n\nexport default unescape;\n\n/**\n * Regular expression that matches an HTML entity.\n * @type {!RegExp}\n */\nvar HTML_ENTITY_PATTERN_ = /&([^;\\s<&]+);?/g;\n"]}
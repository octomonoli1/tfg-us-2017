{"version":3,"sources":["/source/Drag.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport { core, object } from 'metal';\nimport dom from 'metal-dom';\nimport DragAutoScroll from './helpers/DragAutoScroll';\nimport DragScrollDelta from './helpers/DragScrollDelta';\nimport DragShim from './helpers/DragShim';\nimport { EventHandler } from 'metal-events';\nimport Position from 'metal-position';\nimport State from 'metal-state';\n\n/**\n * Responsible for making elements draggable. Handles all the logic\n * for dragging elements. Dropping is handled by `DragDrop`.\n * @extends {State}\n */\nclass Drag extends State {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\n\t\t/**\n\t\t * The drag placeholder that is active at the moment.\n\t\t * @type {Element}\n\t\t * @protected\n\t\t */\n\t\tthis.activeDragPlaceholder_ = null;\n\n\t\t/**\n\t\t * The drag source that is active at the moment.\n\t\t * @type {Element}\n\t\t * @protected\n\t\t */\n\t\tthis.activeDragSource_ = null;\n\n\t\t/**\n\t\t * The distance that has been dragged.\n\t\t * @type {number}\n\t\t * @protected\n\t\t */\n\t\tthis.distanceDragged_ = 0;\n\n\t\t/**\n\t\t * Flag indicating if one of the sources are being dragged.\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.dragging_ = false;\n\n\t\t/**\n\t\t * The `EventHandler` instance that holds events that keep track of the drag action.\n\t\t * @type {!EventHandler}\n\t\t * @protected\n\t\t */\n\t\tthis.dragHandler_ = new EventHandler();\n\n\t\t/**\n\t\t * `DragScrollDelta` instance.\n\t\t * @type {!DragScrollDelta}\n\t\t * @protected\n\t\t */\n\t\tthis.dragScrollDelta_ = new DragScrollDelta();\n\n\t\t/**\n\t\t * The current x and y positions of the mouse (or null if not dragging).\n\t\t * @type {{x: number, y: number}}\n\t\t * @protected\n\t\t */\n\t\tthis.mousePos_ = null;\n\n\t\t/**\n\t\t * The distance between the mouse position and the dragged source position\n\t\t * (or null if not dragging).\n\t\t * @type {{x: number, y: number}}\n\t\t * @protected\n\t\t */\n\t\tthis.mouseSourceDelta_ = null;\n\n\t\t/**\n\t\t * The `EventHandler` instance that holds events for the source (or sources).\n\t\t * @type {!EventHandler}\n\t\t * @protected\n\t\t */\n\t\tthis.sourceHandler_ = new EventHandler();\n\n\t\t/**\n\t\t * The current region values of the element being dragged, relative to\n\t\t * the document (or null if not dragging).\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis.sourceRegion_ = null;\n\n\t\t/**\n\t\t * The current x and y positions of the element being dragged relative to its\n\t\t * `offsetParent`, or to the viewport if there's no `offsetParent`\n\t\t * (or null if not dragging).\n\t\t * @type {{x: number, y: number}}\n\t\t * @protected\n\t\t */\n\t\tthis.sourceRelativePos_ = null;\n\n\t\tthis.attachSourceEvents_();\n\t\tthis.on(Drag.Events.DRAG, this.defaultDragFn_, true);\n\t\tthis.on(Drag.Events.END, this.defaultEndFn_, true);\n\t\tthis.on('sourcesChanged', this.handleSourcesChanged_.bind(this));\n\t\tthis.on('containerChanged', this.handleContainerChanged_.bind(this));\n\t\tthis.dragScrollDelta_.on('scrollDelta', this.handleScrollDelta_.bind(this));\n\t\tdom.on(document, 'keydown', this.handleKeyDown_.bind(this));\n\t}\n\n\t/**\n\t * Attaches the necessary events to the source (or sources).\n\t * @protected\n\t */\n\tattachSourceEvents_() {\n\t\tvar toAttach = {\n\t\t\tkeydown: this.handleSourceKeyDown_.bind(this),\n\t\t\tmousedown: this.handleDragStartEvent_.bind(this),\n\t\t\ttouchstart: this.handleDragStartEvent_.bind(this)\n\t\t};\n\t\tvar eventTypes = Object.keys(toAttach);\n\t\tfor (var i = 0; i < eventTypes.length; i++) {\n\t\t\tvar listenerFn = toAttach[eventTypes[i]];\n\t\t\tif (core.isString(this.sources)) {\n\t\t\t\tthis.sourceHandler_.add(dom.delegate(this.container, eventTypes[i], this.sources, listenerFn));\n\t\t\t} else {\n\t\t\t\tthis.sourceHandler_.add(dom.on(this.sources, eventTypes[i], listenerFn));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Builds the object with data to be passed to a drag event.\n\t * @return {!Object}\n\t * @protected\n\t */\n\tbuildEventObject_() {\n\t\treturn {\n\t\t\tplaceholder: this.activeDragPlaceholder_,\n\t\t\tsource: this.activeDragSource_,\n\t\t\trelativeX: this.sourceRelativePos_.x,\n\t\t\trelativeY: this.sourceRelativePos_.y,\n\t\t\tx: this.sourceRegion_.left,\n\t\t\ty: this.sourceRegion_.top\n\t\t};\n\t}\n\n\t/**\n\t * Calculates the initial positions for the drag action.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\tcalculateInitialPosition_(event) {\n\t\tthis.sourceRegion_ = object.mixin({}, Position.getRegion(this.activeDragSource_, true));\n\t\tthis.sourceRelativePos_ = {\n\t\t\tx: this.activeDragSource_.offsetLeft,\n\t\t\ty: this.activeDragSource_.offsetTop\n\t\t};\n\t\tif (core.isDef(event.clientX)) {\n\t\t\tthis.mousePos_ = {\n\t\t\t\tx: event.clientX,\n\t\t\t\ty: event.clientY\n\t\t\t};\n\t\t\tthis.mouseSourceDelta_ = {\n\t\t\t\tx: this.sourceRegion_.left - this.mousePos_.x,\n\t\t\t\ty: this.sourceRegion_.top - this.mousePos_.y\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given event can start a drag operation.\n\t * @param {!Event} event\n\t * @return {boolean}\n\t * @protected\n\t */\n\tcanStartDrag_(event) {\n\t\treturn !this.disabled &&\n\t\t\t(!core.isDef(event.button) || event.button === 0) &&\n\t\t\t!this.isDragging() &&\n\t\t\tthis.isWithinHandle_(event.target);\n\t}\n\n\t/**\n\t * Resets all variables to their initial values and detaches drag listeners.\n\t * @protected\n\t */\n\tcleanUpAfterDragging_() {\n\t\tif (this.activeDragPlaceholder_) {\n\t\t\tthis.activeDragPlaceholder_.setAttribute('aria-grabbed', 'false');\n\t\t\tdom.removeClasses(this.activeDragPlaceholder_, this.draggingClass);\n\t\t\tif (this.dragPlaceholder === Drag.Placeholder.CLONE) {\n\t\t\t\tdom.exitDocument(this.activeDragPlaceholder_);\n\t\t\t}\n\t\t}\n\t\tthis.activeDragPlaceholder_ = null;\n\t\tthis.activeDragSource_ = null;\n\t\tthis.sourceRegion_ = null;\n\t\tthis.sourceRelativePos_ = null;\n\t\tthis.mousePos_ = null;\n\t\tthis.mouseSourceDelta_ = null;\n\t\tthis.dragging_ = false;\n\t\tthis.dragHandler_.removeAllListeners();\n\t}\n\n\t/**\n\t * Clones the active drag source and adds the clone to the document.\n\t * @return {!Element}\n\t * @protected\n\t */\n\tcloneActiveDrag_() {\n\t\tvar placeholder = this.activeDragSource_.cloneNode(true);\n\t\tplaceholder.style.position = 'absolute';\n\t\tplaceholder.style.left = this.sourceRelativePos_.x + 'px';\n\t\tplaceholder.style.top = this.sourceRelativePos_.y + 'px';\n\t\tdom.append(this.activeDragSource_.parentNode, placeholder);\n\t\treturn placeholder;\n\t}\n\n\t/**\n\t * Constrains the given region according to the current state configuration.\n\t * @param {!Object} region\n\t * @protected\n\t */\n\tconstrain_(region) {\n\t\tthis.constrainToAxis_(region);\n\t\tthis.constrainToSteps_(region);\n\t\tthis.constrainToRegion_(region);\n\t}\n\n\t/**\n\t * Constrains the given region according to the chosen drag axis, if any.\n\t * @param {!Object} region\n\t * @protected\n\t */\n\tconstrainToAxis_(region) {\n\t\tif (this.axis === 'x') {\n\t\t\tregion.top = this.sourceRegion_.top;\n\t\t\tregion.bottom = this.sourceRegion_.bottom;\n\t\t} else if (this.axis === 'y') {\n\t\t\tregion.left = this.sourceRegion_.left;\n\t\t\tregion.right = this.sourceRegion_.right;\n\t\t}\n\t}\n\n\t/**\n\t * Constrains the given region within the region defined by the `constrain` state.\n\t * @param {!Object} region\n\t * @protected\n\t */\n\tconstrainToRegion_(region) {\n\t\tvar constrain = this.constrain;\n\t\tif (!constrain) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (core.isFunction(constrain)) {\n\t\t\tobject.mixin(region, constrain(region));\n\n\t\t} else {\n\t\t\tif (core.isElement(constrain)) {\n\t\t\t\tconstrain = Position.getRegion(constrain, true);\n\t\t\t}\n\t\t\tif (region.left < constrain.left) {\n\t\t\t\tregion.left = constrain.left;\n\t\t\t} else if (region.right > constrain.right) {\n\t\t\t\tregion.left -= region.right - constrain.right;\n\t\t\t}\n\t\t\tif (region.top < constrain.top) {\n\t\t\t\tregion.top = constrain.top;\n\t\t\t} else if (region.bottom > constrain.bottom) {\n\t\t\t\tregion.top -= region.bottom - constrain.bottom;\n\t\t\t}\n\t\t\tregion.right = region.left + region.width;\n\t\t\tregion.bottom = region.top + region.height;\n\t\t}\n\t}\n\n\t/**\n\t * Constrains the given region to change according to the `steps` state.\n\t * @param {!Object} region\n\t * @protected\n\t */\n\tconstrainToSteps_(region) {\n\t\tvar deltaX = region.left - this.sourceRegion_.left;\n\t\tvar deltaY = region.top - this.sourceRegion_.top;\n\t\tregion.left -= deltaX % this.steps.x;\n\t\tregion.right = region.left + region.width;\n\t\tregion.top -= deltaY % this.steps.y;\n\t\tregion.bottom = region.top + region.height;\n\t}\n\n\t/**\n\t * Creates the active drag placeholder, unless it already exists.\n\t * @protected\n\t */\n\tcreateActiveDragPlaceholder_() {\n\t\tvar dragPlaceholder = this.dragPlaceholder;\n\t\tif (dragPlaceholder === Drag.Placeholder.CLONE) {\n\t\t\tthis.activeDragPlaceholder_ = this.cloneActiveDrag_();\n\t\t} else if (core.isElement(dragPlaceholder)) {\n\t\t\tthis.activeDragPlaceholder_ = dragPlaceholder;\n\t\t} else {\n\t\t\tthis.activeDragPlaceholder_ = this.activeDragSource_;\n\t\t}\n\t}\n\n\t/**\n\t * The default behavior for the `Drag.Events.DRAG` event. Can be prevented\n\t * by calling the `preventDefault` function on the event's facade. Moves\n\t * the placeholder to the new calculated source position.\n\t * @protected\n\t */\n\tdefaultDragFn_() {\n\t\tthis.moveToPosition_(this.activeDragPlaceholder_);\n\t}\n\n\t/**\n\t * The default behavior for the `Drag.Events.END` event. Can be prevented\n\t * by calling the `preventDefault` function on the event's facade. Moves\n\t * the source element to the final calculated position.\n\t * @protected\n\t */\n\tdefaultEndFn_() {\n\t\tthis.moveToPosition_(this.activeDragSource_);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.cleanUpAfterDragging_();\n\t\tthis.dragHandler_ = null;\n\t\tthis.dragScrollDelta_.dispose();\n\t\tthis.dragScrollDelta_ = null;\n\t\tthis.sourceHandler_.removeAllListeners();\n\t\tthis.sourceHandler_ = null;\n\t\tsuper.disposeInternal();\n\t}\n\n\t/**\n\t * Gets the active drag source.\n\t * @return {Element}\n\t */\n\tgetActiveDrag() {\n\t\treturn this.activeDragSource_;\n\t}\n\n\t/**\n\t * Handles events that can end a drag action, like \"mouseup\" and \"touchend\".\n\t * Triggered when the mouse drag action ends.\n\t * @protected\n\t */\n\thandleDragEndEvent_() {\n\t\tif (this.autoScroll) {\n\t\t\tthis.autoScroll.stop();\n\t\t}\n\t\tthis.dragScrollDelta_.stop();\n\t\tDragShim.hideDocShim();\n\t\tthis.emit(Drag.Events.END, this.buildEventObject_());\n\t\tthis.cleanUpAfterDragging_();\n\t}\n\n\t/**\n\t * Handles events that can move a draggable element, like \"mousemove\" and \"touchmove\".\n\t * Tracks the movement on the screen to update the drag action.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleDragMoveEvent_(event) {\n\t\tvar position = event.targetTouches ? event.targetTouches[0] : event;\n\t\tvar distanceX = position.clientX - this.mousePos_.x;\n\t\tvar distanceY = position.clientY - this.mousePos_.y;\n\t\tthis.mousePos_.x = position.clientX;\n\t\tthis.mousePos_.y = position.clientY;\n\t\tif (!this.isDragging() && !this.hasReachedMinimumDistance_(distanceX, distanceY)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.isDragging()) {\n\t\t\tthis.startDragging_();\n\t\t\tthis.dragScrollDelta_.start(this.activeDragPlaceholder_, this.scrollContainers);\n\t\t}\n\t\tif (this.autoScroll) {\n\t\t\tthis.autoScroll.scroll(this.scrollContainers, this.mousePos_.x, this.mousePos_.y);\n\t\t}\n\t\tthis.updatePositionFromMouse();\n\t}\n\n\t/**\n\t * Handles events that can start a drag action, like \"mousedown\" and \"touchstart\".\n\t * When this is triggered and the sources were not already being dragged, more\n\t * listeners will be attached to keep track of the drag action.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleDragStartEvent_(event) {\n\t\tthis.activeDragSource_ = event.delegateTarget || event.currentTarget;\n\n\t\tif (this.canStartDrag_(event)) {\n\t\t\tthis.calculateInitialPosition_(event.targetTouches ? event.targetTouches[0] : event);\n\t\t\tevent.preventDefault();\n\t\t\tif (event.type === 'keydown') {\n\t\t\t\tthis.startDragging_();\n\t\t\t} else {\n\t\t\t\tthis.dragHandler_.add.apply(\n\t\t\t\t\tthis.dragHandler_,\n\t\t\t\t\tDragShim.attachDocListeners(this.useShim, {\n\t\t\t\t\t\tmousemove: this.handleDragMoveEvent_.bind(this),\n\t\t\t\t\t\ttouchmove: this.handleDragMoveEvent_.bind(this),\n\t\t\t\t\t\tmouseup: this.handleDragEndEvent_.bind(this),\n\t\t\t\t\t\ttouchend: this.handleDragEndEvent_.bind(this)\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tthis.distanceDragged_ = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles a `keydown` event on the document. Ends the drag if ESC was the pressed key.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleKeyDown_(event) {\n\t\tif (event.keyCode === 27 && this.isDragging()) {\n\t\t\tthis.handleDragEndEvent_();\n\t\t}\n\t}\n\n\t/**\n\t * Handles a \"scrollDelta\" event. Updates the position data for the source,\n\t * as well as the placeholder's position on the screen when \"move\" is set to true.\n\t * @param {!Object} event\n\t * @protected\n\t */\n\thandleScrollDelta_(event) {\n\t\tthis.mouseSourceDelta_.x += event.deltaX;\n\t\tthis.mouseSourceDelta_.y += event.deltaY;\n\t\tthis.updatePositionFromMouse();\n\t}\n\n\t/**\n\t * Handles a `keydown` event from `KeyboardDrag`. Does the appropriate drag action\n\t * for the pressed key.\n\t * @param {!Object} event\n\t * @protected\n\t */\n\thandleSourceKeyDown_(event) {\n\t\tif (this.isDragging()) {\n\t\t\tvar currentTarget = event.delegateTarget || event.currentTarget;\n\t\t\tif (currentTarget !== this.activeDragSource_) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (event.keyCode >= 37 && event.keyCode <= 40) {\n\t\t\t\t// Arrow keys during drag move the source.\n\t\t\t\tvar deltaX = 0;\n\t\t\t\tvar deltaY = 0;\n\t\t\t\tvar speedX = this.keyboardSpeed >= this.steps.x ? this.keyboardSpeed : this.steps.x;\n\t\t\t\tvar speedY = this.keyboardSpeed >= this.steps.y ? this.keyboardSpeed : this.steps.y;\n\t\t\t\tif (event.keyCode === 37) {\n\t\t\t\t\tdeltaX -= speedX;\n\t\t\t\t} else if (event.keyCode === 38) {\n\t\t\t\t\tdeltaY -= speedY;\n\t\t\t\t} else if (event.keyCode === 39) {\n\t\t\t\t\tdeltaX += speedX;\n\t\t\t\t} else {\n\t\t\t\t\tdeltaY += speedY;\n\t\t\t\t}\n\t\t\t\tthis.updatePositionFromDelta(deltaX, deltaY);\n\t\t\t\tevent.preventDefault();\n\t\t\t} else if (event.keyCode === 13 || event.keyCode === 32 || event.keyCode === 27) {\n\t\t\t\t// Enter, space or esc during drag will end it.\n\t\t\t\tthis.handleDragEndEvent_();\n\t\t\t}\n\t\t} else if (event.keyCode === 13 || event.keyCode === 32) {\n\t\t\t// Enter or space will start the drag action.\n\t\t\tthis.handleDragStartEvent_(event);\n\t\t}\n\t}\n\n\t/**\n\t * Triggers when the `container` state changes. Detaches events attached to the\n\t * previous container and attaches them to the new value instead.\n\t * @protected\n\t */\n\thandleContainerChanged_() {\n\t\tif (core.isString(this.sources)) {\n\t\t\tthis.sourceHandler_.removeAllListeners();\n\t\t\tthis.attachSourceEvents_();\n\t\t}\n\t\tif (this.prevScrollContainersSelector_) {\n\t\t\tthis.scrollContainers = this.prevScrollContainersSelector_;\n\t\t}\n\t}\n\n\t/**\n\t * Triggers when the `sources` state changes. Detaches events attached to the\n\t * previous sources and attaches them to the new value instead.\n\t * @protected\n\t */\n\thandleSourcesChanged_() {\n\t\tthis.sourceHandler_.removeAllListeners();\n\t\tthis.attachSourceEvents_();\n\t}\n\n\t/**\n\t * Checks if the minimum distance for dragging has been reached after\n\t * adding the given values.\n\t * @param {number} distanceX\n\t * @param {number} distanceY\n\t * @return {boolean}\n\t * @protected\n\t */\n\thasReachedMinimumDistance_(distanceX, distanceY) {\n\t\tthis.distanceDragged_ += Math.abs(distanceX) + Math.abs(distanceY);\n\t\treturn this.distanceDragged_ >= this.minimumDragDistance;\n\t}\n\n\t/**\n\t * Checks if one of the sources are being dragged.\n\t * @return {boolean}\n\t */\n\tisDragging() {\n\t\treturn this.dragging_;\n\t}\n\n\t/**\n\t * Checks if the given element is within a valid handle.\n\t * @param {!Element} element\n\t * @protected\n\t */\n\tisWithinHandle_(element) {\n\t\tvar handles = this.handles;\n\t\tif (!handles) {\n\t\t\treturn true;\n\t\t} else if (core.isString(handles)) {\n\t\t\treturn dom.match(element, handles + ', ' + handles + ' *');\n\t\t} else {\n\t\t\treturn dom.contains(handles, element);\n\t\t}\n\t}\n\n\t/**\n\t * Moves the given element to the current source coordinates.\n\t * @param {!Element} element\n\t * @protected\n\t */\n\tmoveToPosition_(element) {\n\t\telement.style.left = this.sourceRelativePos_.x + 'px';\n\t\telement.style.top = this.sourceRelativePos_.y + 'px';\n\t}\n\n\t/**\n\t * Setter for the `autoScroll` state key.\n\t * @param {*} val\n\t * @return {!DragAutoScroll}\n\t */\n\tsetterAutoScrollFn_(val) {\n\t\tif (val !== false) {\n\t\t\treturn new DragAutoScroll(val);\n\t\t}\n\t}\n\n\t/**\n\t * Setter for the `constrain` state key.\n\t * @param {!Element|Object|string} val\n\t * @return {!Element|Object}\n\t * @protected\n\t */\n\tsetterConstrainFn(val) {\n\t\tif (core.isString(val)) {\n\t\t\tval = dom.toElement(val);\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t * Sets the `scrollContainers` state key.\n\t * @param {Element|string} val\n\t * @return {!Array<!Element>}\n\t * @protected\n\t */\n\tsetterScrollContainersFn_(val) {\n\t\tthis.prevScrollContainersSelector_ = core.isString(val) ? val : null;\n\t\tvar elements = this.toElements_(val);\n\t\telements.push(document);\n\t\treturn elements;\n\t}\n\n\t/**\n\t * Starts dragging the selected source.\n\t * @protected\n\t */\n\tstartDragging_() {\n\t\tthis.dragging_ = true;\n\t\tthis.createActiveDragPlaceholder_();\n\t\tdom.addClasses(this.activeDragPlaceholder_, this.draggingClass);\n\t\tthis.activeDragPlaceholder_.setAttribute('aria-grabbed', 'true');\n\t\tthis.emit(Drag.Events.START);\n\t}\n\n\t/**\n\t * Converts the given element or selector into an array of elements.\n\t * @param {Element|string} elementOrSelector\n\t * @return {!Array<!Element>}\n\t * @protected\n\t */\n\ttoElements_(elementOrSelector) {\n\t\tif (core.isString(elementOrSelector)) {\n\t\t\tvar matched = this.container.querySelectorAll(elementOrSelector);\n\t\t\treturn Array.prototype.slice.call(matched, 0);\n\t\t} else if (elementOrSelector) {\n\t\t\treturn [elementOrSelector];\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * Updates the dragged element's position using the given calculated region.\n\t * @param {!Object} newRegion\n\t */\n\tupdatePosition(newRegion) {\n\t\tthis.constrain_(newRegion);\n\t\tvar deltaX = newRegion.left - this.sourceRegion_.left;\n\t\tvar deltaY = newRegion.top - this.sourceRegion_.top;\n\t\tif (deltaX !== 0 || deltaY !== 0) {\n\t\t\tthis.sourceRegion_ = newRegion;\n\t\t\tthis.sourceRelativePos_.x += deltaX;\n\t\t\tthis.sourceRelativePos_.y += deltaY;\n\t\t\tthis.emit(Drag.Events.DRAG, this.buildEventObject_());\n\t\t}\n\t}\n\n\t/**\n\t * Updates the dragged element's position, moving its placeholder if `move`\n\t * is set to true.\n\t * @param {number} deltaX\n\t * @param {number} deltaY\n\t */\n\tupdatePositionFromDelta(deltaX, deltaY) {\n\t\tvar newRegion = object.mixin({}, this.sourceRegion_);\n\t\tnewRegion.left += deltaX;\n\t\tnewRegion.right += deltaX;\n\t\tnewRegion.top += deltaY;\n\t\tnewRegion.bottom += deltaY;\n\t\tthis.updatePosition(newRegion);\n\t}\n\n\t/**\n\t * Updates the dragged element's position, according to the current mouse position.\n\t */\n\tupdatePositionFromMouse() {\n\t\tvar newRegion = {\n\t\t\theight: this.sourceRegion_.height,\n\t\t\tleft: this.mousePos_.x + this.mouseSourceDelta_.x,\n\t\t\ttop: this.mousePos_.y + this.mouseSourceDelta_.y,\n\t\t\twidth: this.sourceRegion_.width\n\t\t};\n\t\tnewRegion.right = newRegion.left + newRegion.width;\n\t\tnewRegion.bottom = newRegion.top + newRegion.height;\n\t\tthis.updatePosition(newRegion);\n\t}\n\n\t/**\n\t * Validates the given value, making sure that it's either an element or a string.\n\t * @param {*} val\n\t * @return {boolean}\n\t * @protected\n\t */\n\tvalidateElementOrString_(val) {\n\t\treturn core.isString(val) || core.isElement(val);\n\t}\n\n\t/**\n\t * Validates the value of the `constrain` state.\n\t * @param {*} val\n\t * @return {boolean}\n\t * @protected\n\t */\n\tvalidatorConstrainFn(val) {\n\t\treturn core.isString(val) || core.isObject(val);\n\t}\n}\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nDrag.STATE = {\n\t/**\n\t * Configuration object for the `DragAutoScroll` instance that will be used for\n\t * automatically scrolling the elements in `scrollContainers` during drag when\n\t * the mouse is near their boundaries. If set to `false`, auto scrolling will be\n\t * disabled (default).\n\t * @type {!Object|boolean}\n\t * @default false\n\t */\n\tautoScroll: {\n\t\tsetter: 'setterAutoScrollFn_',\n\t\tvalue: false,\n\t\twriteOnce: true\n\t},\n\n\t/**\n\t * The axis that allows dragging. Can be set to just x, just y or both (default).\n\t * @type {string}\n\t */\n\taxis: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * Object with the boundaries, that the dragged element should not leave\n\t * while being dragged. If not set, the element is free to be dragged\n\t * to anywhere on the page. Can be either already an object with the\n\t * boundaries relative to the document, or an element to use the boundaries\n\t * from, or even a selector for finding that element.\n\t * @type {!Element|Object|function()|string}\n\t */\n\tconstrain: {\n\t\tsetter: 'setterConstrainFn',\n\t\tvalidator: 'validatorConstrainFn'\n\t},\n\n\t/**\n\t * An element that contains all sources, targets and scroll containers. This\n\t * will be used when delegate events are attached or when looking for elements\n\t * by selector. Defaults to `document`.\n\t * @type {!Element|string}\n\t * @default document\n\t */\n\tcontainer: {\n\t\tsetter: dom.toElement,\n\t\tvalidator: 'validateElementOrString_',\n\t\tvalue: document\n\t},\n\n\t/**\n\t * Flag indicating if drag operations are disabled. When set to true, it\n\t * dragging won't work.\n\t * @type {boolean}\n\t * @default false\n\t */\n\tdisabled: {\n\t\tvalidator: core.isBoolean,\n\t\tvalue: false\n\t},\n\n\t/**\n\t * The CSS class that should be added to the node being dragged.\n\t * @type {string}\n\t * @default 'dragging'\n\t */\n\tdraggingClass: {\n\t\tvalidator: core.isString,\n\t\tvalue: 'dragging'\n\t},\n\n\t/**\n\t * The placeholder element that should be moved during drag. Can be either\n\t * an element or the \"clone\" string, indicating that a clone of the source\n\t * being dragged should be used. If nothing is set, the original source element\n\t * will be used.\n\t * @type {Element|?string}\n\t */\n\tdragPlaceholder: {\n\t\tvalidator: 'validateElementOrString_'\n\t},\n\n\t/**\n\t * Elements inside the source that should be the drag handles. Can be\n\t * either a single element or a selector for multiple elements.\n\t * @type {Element|?string}\n\t */\n\thandles: {\n\t\tvalidator: 'validateElementOrString_'\n\t},\n\n\t/**\n\t * The number of pixels that the source should move when dragged via\n\t * the keyboard controls.\n\t * @default 10\n\t */\n\tkeyboardSpeed: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: 10\n\t},\n\n\t/**\n\t * The minimum distance, in pixels, that the mouse needs to move before\n\t * the action is considered a drag.\n\t * @type {number}\n\t * @default 5\n\t */\n\tminimumDragDistance: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: 5,\n\t\twriteOnce: true\n\t},\n\n\t/**\n\t * Elements with scroll, besides the document, that contain any of the given\n\t * sources. Can be either a single element or a selector for multiple elements.\n\t * @type {Element|string}\n\t */\n\tscrollContainers: {\n\t\tsetter: 'setterScrollContainersFn_',\n\t\tvalidator: 'validateElementOrString_'\n\t},\n\n\t/**\n\t * Elements that should be draggable. Can be either a single element\n\t * or a selector for multiple elements.\n\t * @type {!Element|string}\n\t */\n\tsources: {\n\t\tvalidator: 'validateElementOrString_'\n\t},\n\n\t/**\n\t * The number of pixels that the source element should move at a time,\n\t * for each axis. When set to a value higher than 1, dragging won't be\n\t * a continuous movement, since the source element will move by multiple\n\t * pixels on each step.\n\t * @type {!{x: number, y: number}}\n\t */\n\tsteps: {\n\t\tvalidator: core.isObject,\n\t\tvalueFn: () => {\n\t\t\treturn {\n\t\t\t\tx: 1,\n\t\t\t\ty: 1\n\t\t\t};\n\t\t}\n\t},\n\n\t/**\n\t * Flag indicating if a shim should be used for capturing document events.\n\t * This is important for allowing dragging nodes over iframes. If false,\n\t * events will be listened in the document itself instead.\n\t * @type {boolean}\n\t * @default true\n\t */\n\tuseShim: {\n\t\tvalue: true\n\t}\n};\n\n/**\n * Holds the names of events that can be emitted by `Drag`.\n * @type {!Object}\n * @static\n */\nDrag.Events = {\n\tDRAG: 'drag',\n\tEND: 'end',\n\tSTART: 'start'\n};\n\n/**\n * Holds the values that can be passed to the `dragPlaceholder` state key.\n * @type {!Object}\n * @static\n */\nDrag.Placeholder = {\n\tCLONE: 'clone'\n};\n\nexport default Drag;\n"]}
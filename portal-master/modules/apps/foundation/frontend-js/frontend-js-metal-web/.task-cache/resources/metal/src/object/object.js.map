{"version":3,"sources":["/source/object.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;KAEM,M;;;;;SAOE,K,kBAAM,M,EAAQ;AACpB,OAAI,GAAJ,EAAS,MAAT;AACA,QAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,UAAU,MAA9B,EAAsC,GAAtC,EAA2C;AAC1C,aAAS,UAAU,CAAV,CAAT;AACA,SAAK,GAAL,IAAY,MAAZ,EAAoB;AACnB,YAAO,GAAP,IAAc,OAAO,GAAP,CAAd;AACA;AACD;AACD,UAAO,MAAP;AACA,G;;SASM,e,4BAAgB,I,EAAM,O,EAAS;AACrC,OAAI,QAAQ,WAAW,MAAvB;AACA,OAAI,QAAQ,KAAK,KAAL,CAAW,GAAX,CAAZ;AACA,UAAO,MAAM,MAAN,CAAa,UAAC,IAAD,EAAO,GAAP;AAAA,WAAe,KAAK,GAAL,CAAf;AAAA,IAAb,EAAuC,KAAvC,CAAP;AACA,G;;SASM,G,gBAAI,G,EAAK,E,EAAI;AACnB,OAAI,YAAY,EAAhB;AACA,OAAI,OAAO,OAAO,IAAP,CAAY,GAAZ,CAAX;AACA,QAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAzB,EAAiC,GAAjC,EAAsC;AACrC,cAAU,KAAK,CAAL,CAAV,IAAqB,GAAG,KAAK,CAAL,CAAH,EAAY,IAAI,KAAK,CAAL,CAAJ,CAAZ,CAArB;AACA;AACD,UAAO,SAAP;AACA,G;;SAOM,Y,yBAAa,I,EAAM,I,EAAM;AAC/B,OAAI,SAAS,IAAb,EAAmB;AAClB,WAAO,IAAP;AACA;;AAED,OAAI,QAAQ,OAAO,IAAP,CAAY,IAAZ,CAAZ;AACA,OAAI,QAAQ,OAAO,IAAP,CAAY,IAAZ,CAAZ;AACA,OAAI,MAAM,MAAN,KAAiB,MAAM,MAA3B,EAAmC;AAClC,WAAO,KAAP;AACA;;AAED,QAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,GAAlC,EAAuC;AACtC,QAAI,KAAK,MAAM,CAAN,CAAL,MAAmB,KAAK,MAAM,CAAN,CAAL,CAAvB,EAAuC;AACtC,YAAO,KAAP;AACA;AACD;AACD,UAAO,IAAP;AACA,G;;;;;mBAGa,M","sourcesContent":["'use strict';\n\nclass object {\n\t/**\n\t * Copies all the members of a source object to a target object.\n\t * @param {Object} target Target object.\n\t * @param {...Object} var_args The objects from which values will be copied.\n\t * @return {Object} Returns the target object reference.\n\t */\n\tstatic mixin(target) {\n\t\tvar key, source;\n\t\tfor (var i = 1; i < arguments.length; i++) {\n\t\t\tsource = arguments[i];\n\t\t\tfor (key in source) {\n\t\t\t\ttarget[key] = source[key];\n\t\t\t}\n\t\t}\n\t\treturn target;\n\t}\n\n\t/**\n\t * Returns an object based on its fully qualified external name.\n\t * @param {string} name The fully qualified name.\n\t * @param {object=} opt_obj The object within which to look; default is\n\t *     <code>window</code>.\n\t * @return {?} The value (object or primitive) or, if not found, undefined.\n\t */\n\tstatic getObjectByName(name, opt_obj) {\n\t\tvar scope = opt_obj || window;\n\t\tvar parts = name.split('.');\n\t\treturn parts.reduce((part, key) => part[key], scope);\n\t}\n\n\t/**\n\t * Returns a new object with the same keys as the given one, but with\n\t * their values set to the return values of the specified function.\n\t * @param {!Object} obj\n\t * @param {!function(string, *)} fn\n\t * @return {!Object}\n\t */\n\tstatic map(obj, fn) {\n\t\tvar mappedObj = {};\n\t\tvar keys = Object.keys(obj);\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tmappedObj[keys[i]] = fn(keys[i], obj[keys[i]]);\n\t\t}\n\t\treturn mappedObj;\n\t}\n\n\t/**\n\t * Checks if the two given objects are equal. This is done via a shallow\n\t * check, including only the keys directly contained by the 2 objects.\n\t * @return {boolean}\n\t */\n\tstatic shallowEqual(obj1, obj2) {\n\t\tif (obj1 === obj2) {\n\t\t\treturn true;\n\t\t}\n\n\t\tvar keys1 = Object.keys(obj1);\n\t\tvar keys2 = Object.keys(obj2);\n\t\tif (keys1.length !== keys2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (var i = 0; i < keys1.length; i++) {\n\t\t\tif (obj1[keys1[i]] !== obj2[keys1[i]]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\nexport default object;\n"]}
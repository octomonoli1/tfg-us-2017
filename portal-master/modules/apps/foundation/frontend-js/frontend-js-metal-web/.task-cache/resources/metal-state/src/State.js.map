{"version":3,"sources":["/source/State.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport { array, async, core, object } from 'metal';\nimport { EventEmitter } from 'metal-events';\n\n/**\n * State adds support for having object properties that can be watched for\n * changes, as well as configured with validators, setters and other options.\n * See the `addToState` method for a complete list of available configuration\n * options for each state key.\n * @constructor\n * @extends {EventEmitter}\n */\nclass State extends EventEmitter {\n\tconstructor(opt_config) {\n\t\tsuper();\n\n\t\t/**\n\t\t * Object with information about the batch event that is currently\n\t\t * scheduled, or null if none is.\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis.scheduledBatchData_ = null;\n\n\t\t/**\n\t\t * Object that contains information about all this instance's state keys.\n\t\t * @type {!Object<string, !Object>}\n\t\t * @protected\n\t\t */\n\t\tthis.stateInfo_ = {};\n\n\t\t/**\n\t\t * Object with the most recent values that state properties were set to\n\t\t * through either the constructor or setState calls.\n\t\t * @type {!Object<string, *>}\n\t\t */\n\t\tthis.config = {};\n\n\t\tthis.updateConfig_(opt_config || {});\n\t\tthis.setShouldUseFacade(true);\n\t\tthis.mergeInvalidKeys_();\n\t\tthis.addToStateFromStaticHint_(opt_config);\n\t}\n\n\t/**\n\t * Adds the given key to the state.\n\t * @param {string} name The name of the new state key.\n\t * @param {Object.<string, *>=} config The configuration object for the new\n\t *     key. See `addToState` for supported settings.\n\t * @param {*} initialValue The initial value of the new key.\n\t */\n\taddKeyToState(name, config, initialValue) {\n\t\tthis.buildKeyInfo_(name, config, initialValue);\n\t\tObject.defineProperty(this, name, this.buildKeyPropertyDef_(name));\n\t}\n\n\t/**\n\t * Adds the given key(s) to the state, together with its(their) configs.\n\t * Config objects support the given settings:\n\t *     setter - Function for normalizing state key values. It receives the new\n\t *     value that was set, and returns the value that should be stored.\n\t *\n\t *     validator - Function that validates state key values. When it returns\n\t *     false, the new value is ignored.\n\t *\n\t *     value - The default value for the state key. Note that setting this to\n\t *     an object will cause all class instances to use the same reference to\n\t *     the object. To have each instance use a different reference for objects,\n\t *     use the `valueFn` option instead.\n\t *\n\t *     valueFn - A function that returns the default value for a state key.\n\t *\n\t *     writeOnce - Ignores writes to the state key after it's been first\n\t *     written to. That is, allows writes only when setting the value for the\n\t *     first time.\n\t * @param {!Object.<string, !Object>|string} configsOrName An object that maps\n\t *     configuration options for keys to be added to the state or the name of\n\t *     a single key to be added.\n\t * @param {Object.<string, *>=} opt_initialValuesOrConfig An object that maps\n\t *     state keys to their initial values. These values have higher precedence\n\t *     than the default values specified in the configurations. If a single\n\t *     key name was passed as the first param instead though, then this should\n\t *     be the configuration object for that key.\n\t * @param {boolean|Object|*=} opt_contextOrInitialValue If the first\n\t *     param passed to this method was a config object, this should be the\n\t *     context where the added state keys will be defined (defaults to `this`),\n\t *     or false if they shouldn't be defined at all. If the first param was a\n\t *     single key name though, this should be its initial value.\n\t */\n\taddToState(configsOrName, opt_initialValuesOrConfig, opt_contextOrInitialValue) {\n\t\tif (core.isString(configsOrName)) {\n\t\t\treturn this.addKeyToState(\n\t\t\t\tconfigsOrName,\n\t\t\t\topt_initialValuesOrConfig,\n\t\t\t\topt_contextOrInitialValue\n\t\t\t);\n\t\t}\n\n\t\tvar initialValues = opt_initialValuesOrConfig || {};\n\t\tvar names = Object.keys(configsOrName);\n\n\t\tvar props = {};\n\t\tfor (var i = 0; i < names.length; i++) {\n\t\t\tvar name = names[i];\n\t\t\tthis.buildKeyInfo_(name, configsOrName[name], initialValues[name]);\n\t\t\tprops[name] = this.buildKeyPropertyDef_(name);\n\t\t}\n\n\t\tif (opt_contextOrInitialValue !== false) {\n\t\t\tObject.defineProperties(opt_contextOrInitialValue || this, props);\n\t\t}\n\t}\n\n\t/**\n\t * Adds state keys from super classes static hint `MyClass.STATE = {};`.\n\t * @param {Object.<string, !Object>=} opt_config An object that maps all the\n\t *     configurations for state keys.\n\t * @protected\n\t */\n\taddToStateFromStaticHint_(opt_config) {\n\t\tvar ctor = this.constructor;\n\t\tvar defineContext = false;\n\t\tif (State.mergeStateStatic(ctor)) {\n\t\t\tdefineContext = ctor.prototype;\n\t\t}\n\t\tthis.addToState(ctor.STATE_MERGED, opt_config, defineContext);\n\t}\n\n\t/**\n\t * Checks that the given name is a valid state key name. If it's not, an error\n\t * will be thrown.\n\t * @param {string} name The name to be validated.\n\t * @throws {Error}\n\t * @protected\n\t */\n\tassertValidStateKeyName_(name) {\n\t\tif (this.constructor.INVALID_KEYS_MERGED[name]) {\n\t\t\tthrow new Error('It\\'s not allowed to create a state key with the name \"' + name + '\".');\n\t\t}\n\t}\n\n\t/**\n\t * Builds the info object for the specified state key.\n\t * @param {string} name The name of the key.\n\t * @param {Object} config The config object for the key.\n\t * @param {*} initialValue The initial value of the key.\n\t * @protected\n\t */\n\tbuildKeyInfo_(name, config, initialValue) {\n\t\tthis.assertValidStateKeyName_(name);\n\n\t\tthis.stateInfo_[name] = {\n\t\t\tconfig: config || {},\n\t\t\tinitialValue: initialValue,\n\t\t\tstate: State.KeyStates.UNINITIALIZED\n\t\t};\n\t}\n\n\t/**\n\t * Builds the property definition object for the specified state key.\n\t * @param {string} name The name of the key.\n\t * @return {!Object}\n\t * @protected\n\t */\n\tbuildKeyPropertyDef_(name) {\n\t\treturn {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn this.getStateKeyValue_(name);\n\t\t\t},\n\t\t\tset: function(val) {\n\t\t\t\tthis.setStateKeyValue_(name, val);\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Calls the requested function, running the appropriate code for when it's\n\t * passed as an actual function object or just the function's name.\n\t * @param {!Function|string} fn Function, or name of the function to run.\n\t * @param {!Array} An optional array of parameters to be passed to the\n\t *   function that will be called.\n\t * @return {*} The return value of the called function.\n\t * @protected\n\t */\n\tcallFunction_(fn, args) {\n\t\tif (core.isString(fn)) {\n\t\t\treturn this[fn].apply(this, args);\n\t\t} else if (core.isFunction(fn)) {\n\t\t\treturn fn.apply(this, args);\n\t\t}\n\t}\n\n\t/**\n\t * Calls the state key's setter, if there is one.\n\t * @param {string} name The name of the key.\n\t * @param {*} value The value to be set.\n\t * @param {*} currentValue The current value.\n\t * @return {*} The final value to be set.\n\t * @protected\n\t */\n\tcallSetter_(name, value, currentValue) {\n\t\tvar info = this.stateInfo_[name];\n\t\tvar config = info.config;\n\t\tif (config.setter) {\n\t\t\tvalue = this.callFunction_(config.setter, [value, currentValue]);\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Calls the state key's validator, if there is one.\n\t * @param {string} name The name of the key.\n\t * @param {*} value The value to be validated.\n\t * @return {boolean} Flag indicating if value is valid or not.\n\t * @protected\n\t */\n\tcallValidator_(name, value) {\n\t\tvar info = this.stateInfo_[name];\n\t\tvar config = info.config;\n\t\tif (config.validator) {\n\t\t\treturn this.callFunction_(config.validator, [value, name]);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks if the it's allowed to write on the requested state key.\n\t * @param {string} name The name of the key.\n\t * @return {boolean}\n\t */\n\tcanSetState(name) {\n\t\tvar info = this.stateInfo_[name];\n\t\treturn !info.config.writeOnce || !info.written;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tsuper.disposeInternal();\n\t\tthis.stateInfo_ = null;\n\t\tthis.scheduledBatchData_ = null;\n\t}\n\n\t/**\n\t * Emits the state change batch event.\n\t * @protected\n\t */\n\temitBatchEvent_() {\n\t\tif (!this.isDisposed()) {\n\t\t\tvar data = this.scheduledBatchData_;\n\t\t\tthis.scheduledBatchData_ = null;\n\t\t\tthis.emit('stateChanged', data);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the value of the requested state key.\n\t * Note: this can and should be accomplished by accessing the value as a\n\t * regular property. This should only be used in cases where a function is\n\t * actually needed.\n\t * @param {string} name\n\t * @return {*}\n\t */\n\tget(name) {\n\t\treturn this[name];\n\t}\n\n\t/**\n\t * Returns an object that maps state keys to their values.\n\t * @param {Array<string>=} opt_names A list of names of the keys that should\n\t *   be returned. If none is given, the whole state will be returned.\n\t * @return {Object.<string, *>}\n\t */\n\tgetState(opt_names) {\n\t\tvar state = {};\n\t\tvar names = opt_names || this.getStateKeys();\n\n\t\tfor (var i = 0; i < names.length; i++) {\n\t\t\tstate[names[i]] = this[names[i]];\n\t\t}\n\n\t\treturn state;\n\t}\n\n\t/**\n\t * Gets the config object for the requested state key.\n\t * @param {string} name The key's name.\n\t * @return {Object}\n\t * @protected\n\t */\n\tgetStateKeyConfig(name) {\n\t\treturn (this.stateInfo_[name] || {}).config;\n\t}\n\n\t/**\n\t * Returns an array with all state keys.\n\t * @return {Array.<string>}\n\t */\n\tgetStateKeys() {\n\t\treturn Object.keys(this.stateInfo_);\n\t}\n\n\t/**\n\t * Gets the value of the specified state key. This is passed as that key's\n\t * getter to the `Object.defineProperty` call inside the `addKeyToState` method.\n\t * @param {string} name The name of the key.\n\t * @return {*}\n\t * @protected\n\t */\n\tgetStateKeyValue_(name) {\n\t\tthis.initStateKey_(name);\n\t\treturn this.stateInfo_[name].value;\n\t}\n\n\t/**\n\t * Checks if the value of the state key with the given name has already been\n\t * set. Note that this doesn't run the key's getter.\n\t * @param {string} name The name of the key.\n\t * @return {boolean}\n\t */\n\thasBeenSet(name) {\n\t\tvar info = this.stateInfo_[name];\n\t\treturn info.state === State.KeyStates.INITIALIZED || info.initialValue;\n\t}\n\n\t/**\n\t * Informs of changes to a state key's value through an event. Won't trigger\n\t * the event if the value hasn't changed or if it's being initialized.\n\t * @param {string} name The name of the key.\n\t * @param {*} prevVal The previous value of the key.\n\t * @protected\n\t */\n\tinformChange_(name, prevVal) {\n\t\tif (this.shouldInformChange_(name, prevVal)) {\n\t\t\tvar data = {\n\t\t\t\tkey: name,\n\t\t\t\tnewVal: this[name],\n\t\t\t\tprevVal: prevVal\n\t\t\t};\n\t\t\tthis.emit(name + 'Changed', data);\n\t\t\tthis.emit('stateKeyChanged', data);\n\t\t\tthis.scheduleBatchEvent_(data);\n\t\t}\n\t}\n\n\t/**\n\t * Initializes the specified state key, giving it a first value.\n\t * @param {string} name The name of the key.\n\t * @protected\n\t */\n\tinitStateKey_(name) {\n\t\tvar info = this.stateInfo_[name];\n\t\tif (info.state !== State.KeyStates.UNINITIALIZED) {\n\t\t\treturn;\n\t\t}\n\n\t\tinfo.state = State.KeyStates.INITIALIZING;\n\t\tthis.setInitialValue_(name);\n\t\tif (!info.written) {\n\t\t\tinfo.state = State.KeyStates.INITIALIZING_DEFAULT;\n\t\t\tthis.setDefaultValue_(name);\n\t\t}\n\t\tinfo.state = State.KeyStates.INITIALIZED;\n\t}\n\n\t/**\n\t * Merges an array of values for the STATE property into a single object.\n\t * @param {!Array} values The values to be merged.\n\t * @return {!Object} The merged value.\n\t * @static\n\t * @protected\n\t */\n\tstatic mergeState_(values) {\n\t\treturn object.mixin.apply(null, [{}].concat(values.reverse()));\n\t}\n\n\t/**\n\t * Merges the STATE static variable for the given constructor function.\n\t * @param  {!Function} ctor Constructor function.\n\t * @return {boolean} Returns true if merge happens, false otherwise.\n\t * @static\n\t */\n\tstatic mergeStateStatic(ctor) {\n\t\treturn core.mergeSuperClassesProperty(ctor, 'STATE', State.mergeState_);\n\t}\n\n\t/**\n\t * Merges the values of the `INVALID_KEYS` static for the whole hierarchy of\n\t * the current instance.\n\t * @protected\n\t */\n\tmergeInvalidKeys_() {\n\t\tcore.mergeSuperClassesProperty(this.constructor, 'INVALID_KEYS', function(values) {\n\t\t\treturn array.flatten(values).reduce(function(merged, val) {\n\t\t\t\tif (val) {\n\t\t\t\t\tmerged[val] = true;\n\t\t\t\t}\n\t\t\t\treturn merged;\n\t\t\t}, {});\n\t\t});\n\t}\n\n\t/**\n\t * Removes the requested state key.\n\t * @param {string} name The name of the key.\n\t */\n\tremoveStateKey(name) {\n\t\tthis.stateInfo_[name] = null;\n\t\tdelete this[name];\n\t}\n\n\t/**\n\t * Schedules a state change batch event to be emitted asynchronously.\n\t * @param {!Object} changeData Information about a state key's update.\n\t * @protected\n\t */\n\tscheduleBatchEvent_(changeData) {\n\t\tif (!this.scheduledBatchData_) {\n\t\t\tasync.nextTick(this.emitBatchEvent_, this);\n\t\t\tthis.scheduledBatchData_ = {\n\t\t\t\tchanges: {}\n\t\t\t};\n\t\t}\n\n\t\tvar name = changeData.key;\n\t\tvar changes = this.scheduledBatchData_.changes;\n\t\tif (changes[name]) {\n\t\t\tchanges[name].newVal = changeData.newVal;\n\t\t} else {\n\t\t\tchanges[name] = changeData;\n\t\t}\n\t}\n\n\t/**\n\t * Sets the value of the requested state key.\n\t * Note: this can and should be accomplished by setting the state key as a\n\t * regular property. This should only be used in cases where a function is\n\t * actually needed.\n\t * @param {string} name\n\t * @param {*} value\n\t * @return {*}\n\t */\n\tset(name, value) {\n\t\tthis[name] = value;\n\t}\n\n\t/**\n\t * Sets the default value of the requested state key.\n\t * @param {string} name The name of the key.\n\t * @return {*}\n\t * @protected\n\t */\n\tsetDefaultValue_(name) {\n\t\tvar config = this.stateInfo_[name].config;\n\n\t\tif (config.value !== undefined) {\n\t\t\tthis[name] = config.value;\n\t\t} else {\n\t\t\tthis[name] = this.callFunction_(config.valueFn);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the initial value of the requested state key.\n\t * @param {string} name The name of the key.\n\t * @return {*}\n\t * @protected\n\t */\n\tsetInitialValue_(name) {\n\t\tvar info = this.stateInfo_[name];\n\t\tif (info.initialValue !== undefined) {\n\t\t\tthis[name] = info.initialValue;\n\t\t\tinfo.initialValue = undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Sets the value of all the specified state keys.\n\t * @param {!Object.<string,*>} values A map of state keys to the values they\n\t *   should be set to.\n\t * @param {function()=} opt_callback An optional function that will be run\n\t *   after the next batched update is triggered.\n\t */\n\tsetState(values, opt_callback) {\n\t\tthis.updateConfig_(values);\n\t\tvar names = Object.keys(values);\n\t\tfor (var i = 0; i < names.length; i++) {\n\t\t\tthis[names[i]] = values[names[i]];\n\t\t}\n\t\tif (opt_callback && this.scheduledBatchData_) {\n\t\t\tthis.once('stateChanged', opt_callback);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the value of the specified state key. This is passed as that key's\n\t * setter to the `Object.defineProperty` call inside the `addKeyToState`\n\t * method.\n\t * @param {string} name The name of the key.\n\t * @param {*} value The new value of the key.\n\t * @protected\n\t */\n\tsetStateKeyValue_(name, value) {\n\t\tif (!this.canSetState(name) || !this.validateKeyValue_(name, value)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar info = this.stateInfo_[name];\n\t\tif (info.initialValue === undefined && info.state === State.KeyStates.UNINITIALIZED) {\n\t\t\tinfo.state = State.KeyStates.INITIALIZED;\n\t\t}\n\n\t\tvar prevVal = this[name];\n\t\tinfo.value = this.callSetter_(name, value, prevVal);\n\t\tinfo.written = true;\n\t\tthis.informChange_(name, prevVal);\n\t}\n\n\t/**\n\t * Checks if we should inform about a state update. Updates are ignored during\n\t * state initialization. Otherwise, updates to primitive values are only\n\t * informed when the new value is different from the previous one. Updates to\n\t * objects (which includes functions and arrays) are always informed outside\n\t * initialization though, since we can't be sure if all of the internal data\n\t * has stayed the same.\n\t * @param {string} name The name of the key.\n\t * @param {*} prevVal The previous value of the key.\n\t * @return {boolean}\n\t * @protected\n\t */\n\tshouldInformChange_(name, prevVal) {\n\t\tvar info = this.stateInfo_[name];\n\t\treturn (info.state === State.KeyStates.INITIALIZED) &&\n\t\t\t(core.isObject(prevVal) || prevVal !== this[name]);\n\t}\n\n\t/**\n\t * Updates the config data object with the given values.\n\t * @param {!Object} values\n\t * @protected\n\t */\n\tupdateConfig_(values) {\n\t\tvar prevConfig = this.config;\n\t\tthis.config = object.mixin({}, this.config, values);\n\t\tthis.emit('configChanged', {\n\t\t\tnewVal: this.config,\n\t\t\tprevVal: prevConfig\n\t\t});\n\t}\n\n\t/**\n\t * Validates the state key's value, which includes calling the validator\n\t * defined in the key's configuration object, if there is one.\n\t * @param {string} name The name of the key.\n\t * @param {*} value The value to be validated.\n\t * @return {boolean} Flag indicating if value is valid or not.\n\t * @protected\n\t */\n\tvalidateKeyValue_(name, value) {\n\t\tvar info = this.stateInfo_[name];\n\n\t\treturn info.state === State.KeyStates.INITIALIZING_DEFAULT ||\n\t\t\tthis.callValidator_(name, value);\n\t}\n}\n\n/**\n * A list with state key names that will automatically be rejected as invalid.\n * Subclasses can define their own invalid keys by setting this static on their\n * constructors, which will be merged together and handled automatically.\n * @type {!Array<string>}\n */\nState.INVALID_KEYS = ['config', 'state', 'stateKey'];\n\n/**\n * Constants that represent the states that an a state key can be in.\n * @type {!Object}\n */\nState.KeyStates = {\n\tUNINITIALIZED: 0,\n\tINITIALIZING: 1,\n\tINITIALIZING_DEFAULT: 2,\n\tINITIALIZED: 3\n};\n\nexport default State;\n"]}
{"version":3,"sources":["/source/ComponentRegistry.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;KASM,iB;;;;;oBAQE,c,2BAAe,I,EAAM;AAC3B,OAAI,gBAAgB,kBAAkB,WAAlB,CAA8B,IAA9B,CAApB;AACA,OAAI,CAAC,aAAL,EAAoB;AACnB,YAAQ,KAAR,CACC,0DACA,QADA,GACW,IADX,GACkB,yCADlB,GAEA,6BAHD;AAKA;AACD,UAAO,aAAP;AACA,G;;oBAUM,Q,qBAAS,a,EAAe,Q,EAAU;AACxC,OAAI,OAAO,QAAX;AACA,OAAI,CAAC,IAAL,EAAW;AACV,QAAI,cAAc,cAAd,CAA6B,MAA7B,CAAJ,EAA0C;AACzC,YAAO,cAAc,IAArB;AACA,KAFD,MAEO;AACN,YAAO,YAAK,eAAL,CAAqB,aAArB,CAAP;AACA;AACD;AACD,iBAAc,IAAd,GAAqB,IAArB;AACA,qBAAkB,WAAlB,CAA8B,IAA9B,IAAsC,aAAtC;AACA,G;;;;;;;;;;;AASF,mBAAkB,WAAlB,GAAgC,EAAhC;;mBAEe,iB","sourcesContent":["'use strict';\n\nimport { core } from 'metal';\n\n/**\n * The component registry is used to register components, so they can\n * be accessible by name.\n * @type {Object}\n */\nclass ComponentRegistry {\n\t/**\n\t * Gets the constructor function for the given component name, or\n\t * undefined if it hasn't been registered yet.\n\t * @param {string} name The component's name.\n\t * @return {?function}\n\t * @static\n\t */\n\tstatic getConstructor(name) {\n\t\tvar constructorFn = ComponentRegistry.components_[name];\n\t\tif (!constructorFn) {\n\t\t\tconsole.error(\n\t\t\t\t'There\\'s no constructor registered for the component ' +\n\t\t\t\t'named ' + name + '. Components need to be registered via ' +\n\t\t\t\t'ComponentRegistry.register.'\n\t\t\t);\n\t\t}\n\t\treturn constructorFn;\n\t}\n\n\t/**\n\t * Registers a component, so it can be found by its name.\n\t * @param {!Function} constructorFn The component's constructor function.\n\t * @param {string=} opt_name Name of the registered component. If none is given\n\t *   the name defined by the NAME static variable will be used instead. If that\n\t *   isn't set as well, the name of the constructor function will be used.\n\t * @static\n\t */\n\tstatic register(constructorFn, opt_name) {\n\t\tvar name = opt_name;\n\t\tif (!name) {\n\t\t\tif (constructorFn.hasOwnProperty('NAME')) {\n\t\t\t\tname = constructorFn.NAME;\n\t\t\t} else {\n\t\t\t\tname = core.getFunctionName(constructorFn);\n\t\t\t}\n\t\t}\n\t\tconstructorFn.NAME = name;\n\t\tComponentRegistry.components_[name] = constructorFn;\n\t}\n}\n\n/**\n * Holds all registered components, indexed by their names.\n * @type {!Object<string, function()>}\n * @protected\n * @static\n */\nComponentRegistry.components_ = {};\n\nexport default ComponentRegistry;\n"]}
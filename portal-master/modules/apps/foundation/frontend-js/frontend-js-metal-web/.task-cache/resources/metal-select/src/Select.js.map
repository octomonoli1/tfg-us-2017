{"version":3,"sources":["/source/Select.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport dom from 'metal-dom';\nimport Component from 'metal-component';\nimport Soy from 'metal-soy';\n\nimport 'metal-dropdown';\nimport templates from './Select.soy';\n\n/**\n * Responsible for rendering and handling a custom select component, based\n * on `Dropdown`.\n */\nclass Select extends Component {\n\t/**\n\t * Finds the index of the given element in the items array.\n\t * @param {!Element} element\n\t * @return {number}\n\t * @protected\n\t */\n\tfindItemIndex_(element) {\n\t\tvar items = this.element.querySelectorAll('li');\n\t\tfor (var i = 0; i < items.length; i++) {\n\t\t\tif (items.item(i) === element) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Focuses the option at the given index.\n\t * @param {number} index\n\t * @protected\n\t */\n\tfocusIndex_(index) {\n\t\tvar option = this.element.querySelector('.select-option:nth-child(' + (index + 1) + ') a');\n\t\tif (option) {\n\t\t\tthis.focusedIndex_ = index;\n\t\t\toption.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Gets the `Dropdown` instance used by this `Select`.\n\t * @return {!Dropdown}\n\t */\n\tgetDropdown() {\n\t\treturn this.components.dropdown;\n\t}\n\n\t/**\n\t * Handles a `stateSynced` event for the dropdown.\n\t * @param {!Object} data\n\t * @protected\n\t */\n\thandleDropdownStateSynced_(data) {\n\t\tif (this.openedWithKeyboard_) {\n\t\t\t// This is done on `stateSynced` because the items need to have already\n\t\t\t// been made visible before we try focusing them.\n\t\t\tthis.focusIndex_(0);\n\t\t\tthis.openedWithKeyboard_ = false;\n\t\t} else if (data.changes.expanded) {\n\t\t\tthis.focusedIndex_ = null;\n\t\t}\n\t}\n\n\t/**\n\t * Handles a `click` event on one of the items. Updates `selectedIndex`\n\t * accordingly.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleItemClick_(event) {\n\t\tthis.selectedIndex = this.findItemIndex_(event.currentTarget);\n\t\tthis.getDropdown().close();\n\t\tevent.preventDefault();\n\t}\n\n\t/**\n\t * Handles a `keydown` event on this component. Handles keyboard controls.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleKeyDown_(event) {\n\t\tif (this.getDropdown().expanded) {\n\t\t\tswitch (event.keyCode) {\n\t\t\t\tcase 27:\n\t\t\t\t\tthis.getDropdown().close();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 38:\n\t\t\t\t\tthis.focusedIndex_ = core.isDefAndNotNull(this.focusedIndex_) ? this.focusedIndex_ : 1;\n\t\t\t\t\tthis.focusIndex_(this.focusedIndex_ === 0 ? this.items.length - 1 : this.focusedIndex_ - 1);\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 40:\n\t\t\t\t\tthis.focusedIndex_ = core.isDefAndNotNull(this.focusedIndex_) ? this.focusedIndex_ : -1;\n\t\t\t\t\tthis.focusIndex_(this.focusedIndex_ === this.items.length - 1 ? 0 : this.focusedIndex_ + 1);\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if ((event.keyCode === 13 || event.keyCode === 32) && dom.hasClass(event.target, 'dropdown-select')) {\n\t\t\tthis.openedWithKeyboard_ = true;\n\t\t\tthis.getDropdown().open();\n\t\t\tevent.preventDefault();\n\t\t\treturn;\n\t\t}\n\t}\n\n\t/**\n\t * Setter for items attribute.\n\t * @param {!Array<string>} items\n\t * @protected\n\t */\n\tsetItems_(items) {\n\t\treturn items.map((item) => Soy.toIncDom(item));\n\t}\n\n}\nSoy.register(Select, templates);\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nSelect.STATE = {\n\t/**\n\t * The CSS class used by the select menu arrow.\n\t * @type {string}\n\t * @default 'caret'\n\t */\n\tarrowClass: {\n\t\tvalue: 'caret'\n\t},\n\n\t/**\n\t * The CSS class used by the select menu button.\n\t * @type {string}\n\t * @default 'btn btn-default'\n\t */\n\tbuttonClass: {\n\t\tvalidator: core.isString,\n\t\tvalue: 'btn btn-default'\n\t},\n\n\t/**\n\t * The name of the hidden input field\n\t * @type {string}\n\t */\n\thiddenInputName: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * A list representing the select dropdown items.\n\t * @type {!Array<string>}\n\t * @default []\n\t */\n\titems: {\n\t\tsetter: 'setItems_',\n\t\tvalidator: val => val instanceof Array,\n\t\tvalueFn: function() {\n\t\t\treturn [];\n\t\t}\n\t},\n\n\t/**\n\t * The label that should be used for the select menu when no item is\n\t * selected. If not set, the first item will be selected automatically.\n\t * @type {string}\n\t */\n\tlabel: {\n\t\tsetter: (label) => Soy.toIncDom(label),\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * The index of the currently selected item, or -1 if none is selected.\n\t * @type {number}\n\t */\n\tselectedIndex: {\n\t\tvalidator: core.isNumber,\n\t\tvalueFn: function() {\n\t\t\treturn this.label || !this.items.length ? -1 : 0;\n\t\t}\n\t},\n\n\t/**\n\t * A list representing the select dropdown values.\n\t * @type {Array<string>=}\n\t */\n\tvalues: {\n\t\tvalidator: val => val instanceof Array\n\t}\n};\n\n/**\n * Default element classes.\n * @type {string}\n * @static\n */\nSelect.ELEMENT_CLASSES = 'select';\n\nexport default Select;\nimport JQueryAdapter from 'metal-jquery-adapter/src/JQueryAdapter';JQueryAdapter.register('select', Select);"]}
{"version":3,"sources":["/source/Component.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport { array, core, object } from 'metal';\nimport { dom, DomEventEmitterProxy } from 'metal-dom';\nimport ComponentRegistry from './ComponentRegistry';\nimport ComponentRenderer from './ComponentRenderer';\nimport { EventHandler } from 'metal-events';\nimport State from 'metal-state';\n\n/**\n * Component collects common behaviors to be followed by UI components, such\n * as Lifecycle, CSS classes management, events encapsulation and support for\n * different types of rendering.\n * Rendering logic can be done by either:\n *     - Listening to the `render` event inside the `created` lifecycle function\n *       and adding the rendering logic to the listener.\n *     - Using an existing implementation of `ComponentRenderer` like `Soy`,\n *       and following its patterns.\n *     - Building your own implementation of a `ComponentRenderer`.\n * Specifying the renderer that will be used can be done by setting the RENDERER\n * static variable to the renderer's constructor function.\n *\n * Example:\n *\n * <code>\n * class CustomComponent extends Component {\n *   constructor(config) {\n *     super(config);\n *   }\n *\n *   created() {\n *   }\n *\n *   rendered() {\n *   }\n *\n *   attached() {\n *   }\n *\n *   detached() {\n *   }\n * }\n *\n * CustomComponent.RENDERER = MyRenderer;\n *\n * CustomComponent.STATE = {\n *   title: { value: 'Title' },\n *   fontSize: { value: '10px' }\n * };\n * </code>\n *\n * @extends {State}\n */\nclass Component extends State {\n\t/**\n\t * Constructor function for `Component`.\n\t * @param {Object=} opt_config An object with the initial values for this\n\t *     component's state.\n\t * @param {boolean|string|Element=} opt_parentElement The element where the\n\t *     component should be rendered. Can be given as a selector or an element.\n\t *     If `false` is passed, the component won't be rendered automatically\n\t *     after created.\n\t * @constructor\n\t */\n\tconstructor(opt_config, opt_parentElement) {\n\t\tsuper(opt_config);\n\n\t\t/**\n\t\t * All listeners that were attached until the `DomEventEmitterProxy` instance\n\t\t * was created.\n\t\t * @type {!Object<string, bool>}\n\t\t * @protected\n\t\t */\n\t\tthis.attachedListeners_ = {};\n\n\t\t/**\n\t\t * Gets all nested components.\n\t\t * @type {!Array<!Component>}\n\t\t */\n\t\tthis.components = {};\n\n\t\t/**\n\t\t * Instance of `DomEventEmitterProxy` which proxies events from the component's\n\t\t * element to the component itself.\n\t\t * @type {DomEventEmitterProxy}\n\t\t * @protected\n\t\t */\n\t\tthis.elementEventProxy_ = null;\n\n\t\t/**\n\t\t * The `EventHandler` instance for events attached from the `events` state key.\n\t\t * @type {!EventHandler}\n\t\t * @protected\n\t\t */\n\t\tthis.eventsStateKeyHandler_ = new EventHandler();\n\n\t\t/**\n\t\t * Whether the element is in document.\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.inDocument = false;\n\n\t\t/**\n\t\t * The initial config option passed to this constructor.\n\t\t * @type {!Object}\n\t\t * @protected\n\t\t */\n\t\tthis.initialConfig_ = opt_config || {};\n\n\t\t/**\n\t\t * Whether the element was rendered.\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.wasRendered = false;\n\n\t\t/**\n\t\t * The component's element will be appended to the element this variable is\n\t\t * set to, unless the user specifies another parent when calling `render` or\n\t\t * `attach`.\n\t\t * @type {!Element}\n\t\t */\n\t\tthis.DEFAULT_ELEMENT_PARENT = document.body;\n\n\t\tcore.mergeSuperClassesProperty(this.constructor, 'ELEMENT_CLASSES', this.mergeElementClasses_);\n\n\t\tthis.renderer_ = this.createRenderer();\n\t\tthis.renderer_.on('rendered', this.rendered.bind(this));\n\n\t\tthis.on('stateChanged', this.handleStateChanged_);\n\t\tthis.newListenerHandle_ = this.on('newListener', this.handleNewListener_);\n\t\tthis.on('eventsChanged', this.onEventsChanged_);\n\t\tthis.addListenersFromObj_(this.events);\n\n\t\tthis.created();\n\t\tif (opt_parentElement !== false) {\n\t\t\tthis.render_(opt_parentElement);\n\t\t}\n\t\tthis.on('elementChanged', this.onElementChanged_);\n\t}\n\n\t/**\n\t * Adds the necessary classes to the component's element.\n\t * @protected\n\t */\n\taddElementClasses_() {\n\t\tvar classesToAdd = this.constructor.ELEMENT_CLASSES_MERGED;\n\t\tif (this.elementClasses) {\n\t\t\tclassesToAdd = classesToAdd + ' ' + this.elementClasses;\n\t\t}\n\t\tdom.addClasses(this.element, classesToAdd);\n\t}\n\n\t/**\n\t * Adds the listeners specified in the given object.\n\t * @param {Object} events\n\t * @protected\n\t */\n\taddListenersFromObj_(events) {\n\t\tvar eventNames = Object.keys(events || {});\n\t\tfor (var i = 0; i < eventNames.length; i++) {\n\t\t\tvar info = this.extractListenerInfo_(events[eventNames[i]]);\n\t\t\tif (info.fn) {\n\t\t\t\tvar handler;\n\t\t\t\tif (info.selector) {\n\t\t\t\t\thandler = this.delegate(eventNames[i], info.selector, info.fn);\n\t\t\t\t} else {\n\t\t\t\t\thandler = this.on(eventNames[i], info.fn);\n\t\t\t\t}\n\t\t\t\tthis.eventsStateKeyHandler_.add(handler);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Invokes the attached Lifecycle. When attached, the component element is\n\t * appended to the DOM and any other action to be performed must be\n\t * implemented in this method, such as, binding DOM events. A component can\n\t * be re-attached multiple times.\n\t * @param {(string|Element)=} opt_parentElement Optional parent element\n\t *     to render the component.\n\t * @param {(string|Element)=} opt_siblingElement Optional sibling element\n\t *     to render the component before it. Relevant when the component needs\n\t *     to be rendered before an existing element in the DOM.\n\t * @protected\n\t * @chainable\n\t */\n\tattach(opt_parentElement, opt_siblingElement) {\n\t\tif (!this.inDocument) {\n\t\t\tthis.renderElement_(opt_parentElement, opt_siblingElement);\n\t\t\tthis.inDocument = true;\n\t\t\tthis.emit('attached', {\n\t\t\t\tparent: opt_parentElement,\n\t\t\t\tsibling: opt_siblingElement\n\t\t\t});\n\t\t\tthis.attached();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Lifecycle. When attached, the component element is appended to the DOM\n\t * and any other action to be performed must be implemented in this method,\n\t * such as, binding DOM events. A component can be re-attached multiple\n\t * times, therefore the undo behavior for any action performed in this phase\n\t * must be implemented on the detach phase.\n\t */\n\tattached() {}\n\n\t/**\n\t * Adds a sub component, creating it if it doesn't yet exist.\n\t * @param {string} key\n\t * @param {string|!Function} componentNameOrCtor\n\t * @param {Object=} opt_data\n\t * @return {!Component}\n\t */\n\taddSubComponent(key, componentNameOrCtor, opt_data) {\n\t\tvar ConstructorFn = componentNameOrCtor;\n\t\tif (core.isString(ConstructorFn)) {\n\t\t\tConstructorFn = ComponentRegistry.getConstructor(componentNameOrCtor);\n\t\t}\n\n\t\tvar component = this.components[key];\n\t\tif (component && component.constructor !== ConstructorFn) {\n\t\t\tcomponent.dispose();\n\t\t\tcomponent = null;\n\t\t}\n\n\t\tif (!component) {\n\t\t\tthis.components[key] = new ConstructorFn(opt_data, false);\n\t\t}\n\t\treturn this.components[key];\n\t}\n\n\t/**\n\t * Lifecycle. This is called when the component has just been created, before\n\t * it's rendered.\n\t */\n\tcreated() {\n\t}\n\n\t/**\n\t * Creates the renderer for this component. Sub classes can override this to\n\t * return a custom renderer as needed.\n\t * @return {!ComponentRenderer}\n\t */\n\tcreateRenderer() {\n\t\tcore.mergeSuperClassesProperty(this.constructor, 'RENDERER', array.firstDefinedValue);\n\t\treturn new this.constructor.RENDERER_MERGED(this);\n\t}\n\n\t/**\n\t * Listens to a delegate event on the component's element.\n\t * @param {string} eventName The name of the event to listen to.\n\t * @param {string} selector The selector that matches the child elements that\n\t *   the event should be triggered for.\n\t * @param {!function(!Object)} callback Function to be called when the event is\n\t *   triggered. It will receive the normalized event object.\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t */\n\tdelegate(eventName, selector, callback) {\n\t\treturn this.on('delegate:' + eventName + ':' + selector, callback);\n\t}\n\n\t/**\n\t * Invokes the detached Lifecycle. When detached, the component element is\n\t * removed from the DOM and any other action to be performed must be\n\t * implemented in this method, such as, unbinding DOM events. A component\n\t * can be detached multiple times.\n\t * @chainable\n\t */\n\tdetach() {\n\t\tif (this.inDocument) {\n\t\t\tif (this.element && this.element.parentNode) {\n\t\t\t\tthis.element.parentNode.removeChild(this.element);\n\t\t\t}\n\t\t\tthis.inDocument = false;\n\t\t\tthis.detached();\n\t\t}\n\t\tthis.emit('detached');\n\t\treturn this;\n\t}\n\n\t/**\n\t * Lifecycle. When detached, the component element is removed from the DOM\n\t * and any other action to be performed must be implemented in this method,\n\t * such as, unbinding DOM events. A component can be detached multiple\n\t * times, therefore the undo behavior for any action performed in this phase\n\t * must be implemented on the attach phase.\n\t */\n\tdetached() {}\n\n\t/**\n\t * Lifecycle. Called when the component is disposed. Should be overridden by\n\t * sub classes to dispose of any internal data or events.\n\t */\n\tdisposed() {}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.disposed();\n\n\t\tthis.detach();\n\n\t\tif (this.elementEventProxy_) {\n\t\t\tthis.elementEventProxy_.dispose();\n\t\t\tthis.elementEventProxy_ = null;\n\t\t}\n\n\t\tthis.disposeSubComponents(Object.keys(this.components));\n\t\tthis.components = null;\n\n\t\tthis.renderer_.dispose();\n\t\tthis.renderer_ = null;\n\n\t\tsuper.disposeInternal();\n\t}\n\n\t/**\n\t * Calls `dispose` on all subcomponents.\n\t * @param {!Array<string>} keys\n\t */\n\tdisposeSubComponents(keys) {\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tvar component = this.components[keys[i]];\n\t\t\tif (!component.isDisposed()) {\n\t\t\t\tcomponent.dispose();\n\t\t\t\tdelete this.components[keys[i]];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Extracts listener info from the given value.\n\t * @param {function()|string|{selector:string,fn:function()|string}} value\n\t * @return {!{selector:string,fn:function()}}\n\t * @protected\n\t */\n\textractListenerInfo_(value) {\n\t\tvar info = {\n\t\t\tfn: value\n\t\t};\n\t\tif (core.isObject(value) && !core.isFunction(value)) {\n\t\t\tinfo.selector = value.selector;\n\t\t\tinfo.fn = value.fn;\n\t\t}\n\t\tif (core.isString(info.fn)) {\n\t\t\tinfo.fn = this.getListenerFn(info.fn);\n\t\t}\n\t\treturn info;\n\t}\n\n\t/**\n\t * Gets the configuration object that was passed to this component's constructor.\n\t * @return {!Object}\n\t */\n\tgetInitialConfig() {\n\t\treturn this.initialConfig_;\n\t}\n\n\t/**\n\t * Gets the listener function from its name. If the name is prefixed with a\n\t * component id, the function will be called on that specified component. Otherwise\n\t * it will be called on this component instead.\n\t * @param {string} fnName\n\t * @return {function()}\n\t */\n\tgetListenerFn(fnName) {\n\t\tif (core.isFunction(this[fnName])) {\n\t\t\treturn this[fnName].bind(this);\n\t\t} else {\n\t\t\tconsole.error('No function named \"' + fnName + '\" was found in the ' +\n\t\t\t  'component \"' + core.getFunctionName(this.constructor) + '\". Make ' +\n\t\t\t\t'sure that you specify valid function names when adding inline listeners.'\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Calls the synchronization function for the state key.\n\t * @param {string} key\n\t * @param {Object.<string, Object>=} opt_change Object containing newVal and\n\t *     prevVal keys.\n\t * @protected\n\t */\n\tfireStateKeyChange_(key, opt_change) {\n\t\tvar fn = this['sync' + key.charAt(0).toUpperCase() + key.slice(1)];\n\t\tif (core.isFunction(fn)) {\n\t\t\tif (!opt_change) {\n\t\t\t\topt_change = {\n\t\t\t\t\tnewVal: this[key],\n\t\t\t\t\tprevVal: undefined\n\t\t\t\t};\n\t\t\t}\n\t\t\tfn.call(this, opt_change.newVal, opt_change.prevVal);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the `ComponentRenderer` instance being used.\n\t * @return {!ComponentRenderer}\n\t */\n\tgetRenderer() {\n\t\treturn this.renderer_;\n\t}\n\n\t/**\n\t * Handles state batch changes. Calls any existing `sync` functions that\n\t * match the changed state keys.\n\t * @param {Event} event\n\t * @protected\n\t */\n\thandleStateChanged_(event) {\n\t\tthis.syncStateFromChanges_(event.changes);\n\t\tthis.emit('stateSynced', event);\n\t}\n\n\t/**\n\t * Handles the `newListener` event. Just flags that this event type has been\n\t * attached, so we can start proxying it when `DomEventEmitterProxy` is created.\n\t * @param {string} event\n\t * @protected\n\t */\n\thandleNewListener_(event) {\n\t\tthis.attachedListeners_[event] = true;\n\t}\n\n\t/**\n\t * Merges an array of values for the ELEMENT_CLASSES property into a single object.\n\t * @param {!Array.<string>} values The values to be merged.\n\t * @return {!string} The merged value.\n\t * @protected\n\t */\n\tmergeElementClasses_(values) {\n\t\tvar marked = {};\n\t\treturn values.filter(function(val) {\n\t\t\tif (!val || marked[val]) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tmarked[val] = true;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}).join(' ');\n\t}\n\n\t/**\n\t * Fired when the `element` state value is changed.\n\t * @param {!Object} event\n\t * @protected\n\t */\n\tonElementChanged_(event) {\n\t\tif (event.prevVal === event.newVal) {\n\t\t\t// The `elementChanged` event will be fired whenever the element is set,\n\t\t\t// even if its value hasn't actually changed, since that's how State\n\t\t\t// handles objects. We need to check manually here.\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setUpProxy_();\n\t\tthis.elementEventProxy_.setOriginEmitter(event.newVal);\n\t\tthis.addElementClasses_();\n\t\tthis.syncVisible(this.visible);\n\t}\n\n\t/**\n\t * Fired when the `events` state value is changed.\n\t * @param {!Object} event\n\t * @protected\n\t */\n\tonEventsChanged_(event) {\n\t\tthis.eventsStateKeyHandler_.removeAllListeners();\n\t\tthis.addListenersFromObj_(event.newVal);\n\t}\n\n\t/**\n\t * Lifecycle. Renders the component into the DOM.\n\t *\n\t * Render Lifecycle:\n\t *   render event - The \"render\" event is emitted. Renderers act on this step.\n\t *   state synchronization - All synchronization methods are called.\n\t *   attach - Attach Lifecycle is called.\n\t *\n\t * @param {(string|Element|boolean)=} opt_parentElement Optional parent element\n\t *     to render the component. If set to `false`, the element won't be\n\t *     attached to any element after rendering. In this case, `attach` should\n\t *     be called manually later to actually attach it to the dom.\n\t * @param {boolean=} opt_skipRender Optional flag indicating that the actual\n\t *     rendering should be skipped. Only the other render lifecycle logic will\n\t *     be run, like syncing state and attaching the element. Should only\n\t *     be set if the component has already been rendered, like sub components.\n\t * @protected\n\t */\n\trender_(opt_parentElement, opt_skipRender) {\n\t\tif (!opt_skipRender) {\n\t\t\tthis.emit('render');\n\t\t}\n\t\tthis.setUpProxy_();\n\t\tthis.syncState_();\n\t\tthis.attach(opt_parentElement);\n\t\tthis.wasRendered = true;\n\t}\n\n\t/**\n\t * Renders this component as a subcomponent, meaning that no actual rendering is\n\t * needed since it was already rendered by the parent component. This just handles\n\t * other logics from the rendering lifecycle, like calling sync methods for the\n\t * state.\n\t */\n\trenderAsSubComponent() {\n\t\tthis.render_(null, true);\n\t}\n\n\t/**\n\t * Renders the component element into the DOM.\n\t * @param {(string|Element)=} opt_parentElement Optional parent element\n\t *     to render the component.\n\t * @param {(string|Element)=} opt_siblingElement Optional sibling element\n\t *     to render the component before it. Relevant when the component needs\n\t *     to be rendered before an existing element in the DOM, e.g.\n\t *     `component.attach(null, existingElement)`.\n\t * @protected\n\t */\n\trenderElement_(opt_parentElement, opt_siblingElement) {\n\t\tvar element = this.element;\n\t\tif (element && (opt_siblingElement || !element.parentNode)) {\n\t\t\tvar parent = dom.toElement(opt_parentElement) || this.DEFAULT_ELEMENT_PARENT;\n\t\t\tparent.insertBefore(element, dom.toElement(opt_siblingElement));\n\t\t}\n\t}\n\n\t/**\n\t * Setter logic for element state key.\n\t * @param {string|Element} newVal\n\t * @param {Element} currentVal\n\t * @return {Element}\n\t * @protected\n\t */\n\tsetterElementFn_(newVal, currentVal) {\n\t\tvar element = newVal;\n\t\tif (element) {\n\t\t\telement = dom.toElement(newVal) || currentVal;\n\t\t}\n\t\treturn element;\n\t}\n\n\t/**\n\t * Creates the `DomEventEmitterProxy` instance and has it start proxying any\n\t * listeners that have already been listened to.\n\t * @protected\n\t */\n\tsetUpProxy_() {\n\t\tif (this.elementEventProxy_) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar proxy = new DomEventEmitterProxy(this.element, this);\n\t\tthis.elementEventProxy_ = proxy;\n\n\t\tobject.map(this.attachedListeners_, proxy.proxyEvent.bind(proxy));\n\t\tthis.attachedListeners_ = null;\n\n\t\tthis.newListenerHandle_.removeListener();\n\t\tthis.newListenerHandle_ = null;\n\t}\n\n\t/**\n\t * Fires state synchronization functions.\n\t * @protected\n\t */\n\tsyncState_() {\n\t\tvar keys = this.getStateKeys();\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tthis.fireStateKeyChange_(keys[i]);\n\t\t}\n\t}\n\n\t/**\n\t * Fires synchronization changes for state keys.\n\t * @param {Object.<string, Object>} changes Object containing the state key\n\t *     name as key and an object with newVal and prevVal as value.\n\t * @protected\n\t */\n\tsyncStateFromChanges_(changes) {\n\t\tfor (var key in changes) {\n\t\t\tthis.fireStateKeyChange_(key, changes[key]);\n\t\t}\n\t}\n\n\t/**\n\t * State synchronization logic for the `elementClasses` state key.\n\t * @param {string} newVal\n\t * @param {string} prevVal\n\t */\n\tsyncElementClasses(newVal, prevVal) {\n\t\tif (this.element && prevVal) {\n\t\t\tdom.removeClasses(this.element, prevVal);\n\t\t}\n\t\tthis.addElementClasses_();\n\t}\n\n\t/**\n\t * State synchronization logic for `visible` state key.\n\t * Updates the element's display value according to its visibility.\n\t * @param {boolean} newVal\n\t */\n\tsyncVisible(newVal) {\n\t\tif (this.element) {\n\t\t\tthis.element.style.display = newVal ? '' : 'none';\n\t\t}\n\t}\n\n\t/**\n\t * Lifecycle. Called whenever the component has just been rendered.\n\t * @param {boolean} firstRender Flag indicating if this was the component's\n\t *     first render.\n\t */\n\trendered() {\n\t}\n\n\t/**\n\t * Validator logic for elementClasses state key.\n\t * @param {string} val\n\t * @return {boolean} True if val is a valid element classes.\n\t * @protected\n\t */\n\tvalidatorElementClassesFn_(val) {\n\t\treturn core.isString(val);\n\t}\n\n\t/**\n\t * Validator logic for element state key.\n\t * @param {?string|Element} val\n\t * @return {boolean} True if val is a valid element.\n\t * @protected\n\t */\n\tvalidatorElementFn_(val) {\n\t\treturn core.isElement(val) || core.isString(val) || !core.isDefAndNotNull(val);\n\t}\n\n\t/**\n\t * Validator logic for the `events` state key.\n\t * @param {Object} val\n\t * @return {boolean}\n\t * @protected\n\t */\n\tvalidatorEventsFn_(val) {\n\t\treturn !core.isDefAndNotNull(val) || core.isObject(val);\n\t}\n}\n\n/**\n * Component state definition.\n * @type {Object}\n * @static\n */\nComponent.STATE = {\n\t/**\n\t * Component element bounding box.\n\t * @type {Element}\n\t * @writeOnce\n\t */\n\telement: {\n\t\tsetter: 'setterElementFn_',\n\t\tvalidator: 'validatorElementFn_'\n\t},\n\n\t/**\n\t * CSS classes to be applied to the element.\n\t * @type {Array.<string>}\n\t */\n\telementClasses: {\n\t\tvalidator: 'validatorElementClassesFn_'\n\t},\n\n\t/**\n\t * Listeners that should be attached to this component. Should be provided as an object,\n\t * where the keys are event names and the values are the listener functions (or function\n\t * names).\n\t * @type {Object<string, (function()|string|{selector: string, fn: function()|string})>}\n\t */\n\tevents: {\n\t\tvalidator: 'validatorEventsFn_',\n\t\tvalue: null\n\t},\n\n\t/**\n\t * Indicates if the component is visible or not.\n\t * @type {boolean}\n\t */\n\tvisible: {\n\t\tvalidator: core.isBoolean,\n\t\tvalue: true\n\t}\n};\n\n/**\n * CSS classes to be applied to the element.\n * @type {string}\n * @protected\n * @static\n */\nComponent.ELEMENT_CLASSES = '';\n\n/**\n * The `ComponentRenderer` that should be used. Components need to set this\n * to a subclass of `ComponentRenderer` that has the rendering logic, like\n * `SoyRenderer`.\n * @type {!ComponentRenderer}\n * @static\n */\nComponent.RENDERER = ComponentRenderer;\n\n/**\n * A list with state key names that will automatically be rejected as invalid.\n * @type {!Array<string>}\n */\nComponent.INVALID_KEYS = ['components', 'wasRendered'];\n\nexport default Component;\n"]}
{"version":3,"sources":["/source/EventsCollector.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAYM,e;;;AACL,2BAAY,SAAZ,EAAuB;AAAA;;AAAA,gDACtB,sBADsB;;AAGtB,OAAI,CAAC,SAAL,EAAgB;AACf,UAAM,IAAI,KAAJ,CAAU,qCAAV,CAAN;AACA;;;;;;;AAOD,SAAK,UAAL,GAAkB,SAAlB;;;;;;;AAOA,SAAK,aAAL,GAAqB,EAArB;;;;;;;AAOA,SAAK,YAAL,GAAoB,EAApB;AA1BsB;AA2BtB;;;;;;;;;;4BAQD,c,2BAAe,S,EAAW,a,EAAe;AACxC,OAAI,WAAW,aAAa,SAAb,GAAyB,IAAzB,GAAgC,aAAhC,GAAgD,IAA/D;;AAEA,QAAK,YAAL,CAAkB,QAAlB,IAA8B,IAA9B;;AAEA,OAAI,CAAC,KAAK,aAAL,CAAmB,QAAnB,CAAL,EAAmC;AAClC,SAAK,aAAL,CAAmB,QAAnB,IAA+B,0BAA/B;AACA,QAAI,UAAU,cAAc,KAAd,CAAoB,GAApB,CAAd;AACA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,MAA5B,EAAoC,GAApC,EAAyC;AACxC,SAAI,KAAK,KAAK,UAAL,CAAgB,aAAhB,CAA8B,QAAQ,CAAR,CAA9B,CAAT;AACA,SAAI,EAAJ,EAAQ;AACP,WAAK,aAAL,CAAmB,QAAnB,EAA6B,GAA7B,CAAiC,KAAK,UAAL,CAAgB,QAAhB,CAAyB,SAAzB,EAAoC,QAApC,EAA8C,KAAK,QAAL,CAAc,IAAd,CAAmB,IAAnB,EAAyB,EAAzB,CAA9C,CAAjC;AACA;AACD;AACD;AACD,G;;4BAKD,kB,iCAAqB;AACpB,QAAK,IAAI,QAAT,IAAqB,KAAK,aAA1B,EAAyC;AACxC,QAAI,KAAK,aAAL,CAAmB,QAAnB,CAAJ,EAAkC;AACjC,UAAK,aAAL,CAAmB,QAAnB,EAA6B,kBAA7B;AACA;AACD;AACD,QAAK,aAAL,GAAqB,EAArB;AACA,QAAK,eAAL,GAAuB,EAAvB;AACA,G;;4BAMD,qB,oCAAwB;AACvB,QAAK,IAAI,QAAT,IAAqB,KAAK,aAA1B,EAAyC;AACxC,QAAI,KAAK,aAAL,CAAmB,QAAnB,KAAgC,CAAC,KAAK,YAAL,CAAkB,QAAlB,CAArC,EAAkE;AACjE,UAAK,aAAL,CAAmB,QAAnB,EAA6B,kBAA7B;AACA,UAAK,aAAL,CAAmB,QAAnB,IAA+B,IAA/B;AACA;AACD;AACD,G;;4BAKD,e,8BAAkB;AACjB,QAAK,kBAAL;AACA,QAAK,UAAL,GAAkB,IAAlB;AACA,G;;4BAYD,Q,qBAAS,E,EAAI,K,EAAO;;AAEnB,OAAI,YAAY,MAAM,kBAAtB;AACA,OAAI,CAAC,SAAD,IAAc,cAAc,KAAK,UAAjC,IAA+C,MAAM,cAAN,CAAqB,QAArB,CAA8B,UAAU,OAAxC,CAAnD,EAAqG;AACpG,UAAM,kBAAN,GAA2B,KAAK,UAAhC;AACA,WAAO,GAAG,KAAH,CAAP;AACA;AACD,G;;4BAMD,e,8BAAkB;AACjB,QAAK,YAAL,GAAoB,EAApB;AACA,G;;;;;mBAGa,e","sourcesContent":["'use strict';\n\nimport { Disposable } from 'metal';\nimport { EventHandler } from 'metal-events';\n\n/**\n * Collects inline events from a passed element, detaching previously\n * attached events that are not being used anymore.\n * @param {Component} component\n * @constructor\n * @extends {Disposable}\n */\nclass EventsCollector extends Disposable {\n\tconstructor(component) {\n\t\tsuper();\n\n\t\tif (!component) {\n\t\t\tthrow new Error('The component instance is mandatory');\n\t\t}\n\n\t\t/**\n\t\t * Holds the component intance.\n\t\t * @type {!Component}\n\t\t * @protected\n\t\t */\n\t\tthis.component_ = component;\n\n\t\t/**\n\t\t * Holds the attached delegate event handles, indexed by the css selector.\n\t\t * @type {!Object<string, EventHandler>}\n\t\t * @protected\n\t\t */\n\t\tthis.eventHandles_ = {};\n\n\t\t/**\n\t\t * Holds flags indicating which selectors have listeners.\n\t\t * @type {!Object<string, boolean>}\n\t\t * @protected\n\t\t */\n\t\tthis.hasListener_ = {};\n\t}\n\n\t/**\n\t * Attaches the listener described by the given params, unless it has already\n\t * been attached.\n\t * @param {string} eventType\n\t * @param {string} fnNamesString\n\t */\n\tattachListener(eventType, fnNamesString) {\n\t\tvar selector = '[data-on' + eventType + '=\"' + fnNamesString + '\"]';\n\n\t\tthis.hasListener_[selector] = true;\n\n\t\tif (!this.eventHandles_[selector]) {\n\t\t\tthis.eventHandles_[selector] = new EventHandler();\n\t\t\tvar fnNames = fnNamesString.split(',');\n\t\t\tfor (var i = 0; i < fnNames.length; i++) {\n\t\t\t\tvar fn = this.component_.getListenerFn(fnNames[i]);\n\t\t\t\tif (fn) {\n\t\t\t\t\tthis.eventHandles_[selector].add(this.component_.delegate(eventType, selector, this.onEvent_.bind(this, fn)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Removes all previously attached event listeners to the component.\n\t */\n\tdetachAllListeners() {\n\t\tfor (var selector in this.eventHandles_) {\n\t\t\tif (this.eventHandles_[selector]) {\n\t\t\t\tthis.eventHandles_[selector].removeAllListeners();\n\t\t\t}\n\t\t}\n\t\tthis.eventHandles_ = {};\n\t\tthis.listenerCounts_ = {};\n\t}\n\n\t/**\n\t * Detaches all existing listeners that are not being used anymore.\n\t * @protected\n\t */\n\tdetachUnusedListeners() {\n\t\tfor (var selector in this.eventHandles_) {\n\t\t\tif (this.eventHandles_[selector] && !this.hasListener_[selector]) {\n\t\t\t\tthis.eventHandles_[selector].removeAllListeners();\n\t\t\t\tthis.eventHandles_[selector] = null;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.detachAllListeners();\n\t\tthis.component_ = null;\n\t}\n\n\t/**\n\t * Fires when an event that was registered by this collector is triggered. Makes\n\t * sure that the event was meant for this component and calls the appropriate\n\t * listener function for it.\n\t * @param {!function(!Object)} fn\n\t * @param {!Object} event\n\t * @return {*} The return value of the call to the listener function, or undefined\n\t *   if no function was called.\n\t * @protected\n\t */\n\tonEvent_(fn, event) {\n\t\t// This check prevents parent components from handling their child inline listeners.\n\t\tvar eventComp = event.handledByComponent;\n\t\tif (!eventComp || eventComp === this.component_ || event.delegateTarget.contains(eventComp.element)) {\n\t\t\tevent.handledByComponent = this.component_;\n\t\t\treturn fn(event);\n\t\t}\n\t}\n\n\t/**\n\t * Prepares the collector to start collecting listeners. Should be called\n\t * before all calls to `attachListener`.\n\t */\n\tstartCollecting() {\n\t\tthis.hasListener_ = {};\n\t}\n}\n\nexport default EventsCollector;\n"]}
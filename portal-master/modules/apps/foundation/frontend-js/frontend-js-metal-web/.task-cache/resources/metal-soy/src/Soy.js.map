{"version":3,"sources":["/source/Soy.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport 'metal-soy-bundle';\nimport { core, object } from 'metal';\nimport { ComponentRegistry } from 'metal-component';\nimport HTML2IncDom from 'html2incdom';\nimport IncrementalDomRenderer from 'metal-incremental-dom';\nimport SoyAop from './SoyAop';\n\n// The injected data that will be passed to soy templates.\nvar ijData = {};\n\nclass Soy extends IncrementalDomRenderer {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor(comp) {\n\t\tsuper(comp);\n\t\tthis.addMissingStateKeys_();\n\t}\n\t/**\n\t * Adds the template params to the component's state, if they don't exist yet.\n\t * @protected\n\t */\n\taddMissingStateKeys_() {\n\t\tvar elementTemplate = this.component_.constructor.TEMPLATE;\n\t\tif (!core.isFunction(elementTemplate)) {\n\t\t\treturn;\n\t\t}\n\n\t\telementTemplate = SoyAop.getOriginalFn(elementTemplate);\n\t\tthis.soyParamTypes_ = elementTemplate.types || {};\n\n\t\tvar keys = elementTemplate.params || [];\n\t\tvar component = this.component_;\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tif (!component.getStateKeyConfig(keys[i]) && !component[keys[i]]) {\n\t\t\t\tcomponent.addToState(keys[i], {}, component.getInitialConfig()[keys[i]]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Copies the component's state to an object so it can be passed as it's\n\t * template call's data. The copying needs to be done because, if the component\n\t * itself is passed directly, some problems occur when soy tries to merge it\n\t * with other data, due to property getters and setters. This is safer.\n\t * @param {!Array<string>} params The params used by this template.\n\t * @return {!Object}\n\t * @protected\n\t */\n\tbuildTemplateData_(params) {\n\t\tvar component = this.component_;\n\t\tvar data = object.mixin({}, component.config);\n\t\tcomponent.getStateKeys().forEach(key => {\n\t\t\t// Get all state values except \"element\", since it helps performance\n\t\t\t// and the element shouldn't be referenced inside a soy template anyway.\n\t\t\tif (key === 'element') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar value = component[key];\n\t\t\tif (this.isHtmlParam_(key)) {\n\t\t\t\tvalue = Soy.toIncDom(value);\n\t\t\t}\n\t\t\tdata[key] = value;\n\t\t});\n\t\tfor (var i = 0; i < params.length; i++) {\n\t\t\tif (!data[params[i]] && core.isFunction(component[params[i]])) {\n\t\t\t\tdata[params[i]] = component[params[i]].bind(component);\n\t\t\t}\n\t\t}\n\t\treturn data;\n\t}\n\n\t/**\n\t * Returns the requested template function. This function will be wrapped in\n\t * another though, just to defer the requirement of the template's module\n\t * being ready until the function is actually called.\n\t * @param {string} namespace The soy template's namespace.\n\t * @param {string} templateName The name of the template function.\n\t * @return {!function()}\n\t */\n\tstatic getTemplate(namespace, templateName) {\n\t\treturn function(opt_data, opt_ignored, opt_ijData) {\n\t\t\tif (!goog.loadedModules_[namespace]) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'No template with namespace \"' + namespace + '\" has been loaded yet.'\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn goog.loadedModules_[namespace][templateName](opt_data, opt_ignored, opt_ijData);\n\t\t};\n\t}\n\n\t/**\n\t * Handles an intercepted soy template call. If the call is for a component's\n\t * main template, then it will be replaced with a call that incremental dom\n\t * can use for both handling an instance of that component and rendering it.\n\t * @param {!function()} originalFn The original template function that was\n\t *     intercepted.\n\t * @param {Object} data The data the template was called with.\n\t * @protected\n\t */\n\tstatic handleInterceptedCall_(originalFn, opt_data = {}) {\n\t\tvar args = [originalFn.componentCtor, null, []];\n\t\tfor (var key in opt_data) {\n\t\t\targs.push(key, opt_data[key]);\n\t\t}\n\t\tIncrementalDOM.elementVoid.apply(null, args);\n\t}\n\n\t/**\n\t * Checks if the given param type is html.\n\t * @param {string} name\n\t * @protected\n\t */\n\tisHtmlParam_(name) {\n\t\tif (this.component_.getStateKeyConfig(name).isHtml) {\n\t\t\treturn true;\n\t\t}\n\t\tvar type = this.soyParamTypes_[name] || '';\n\t\treturn type.split('|').indexOf('html') !== -1;\n\t}\n\n\t/**\n\t * Registers the given templates to be used by `Soy` for the specified\n\t * component constructor.\n\t * @param {!Function} componentCtor The constructor of the component that\n\t *     should use the given templates.\n\t * @param {!Object} templates Object containing soy template functions.\n\t * @param {string=} mainTemplate The name of the main template that should be\n\t *     used to render the component. Defaults to \"render\".\n\t */\n\tstatic register(componentCtor, templates, mainTemplate = 'render') {\n\t\tcomponentCtor.RENDERER = Soy;\n\t\tcomponentCtor.TEMPLATE = SoyAop.getOriginalFn(templates[mainTemplate]);\n\t\tcomponentCtor.TEMPLATE.componentCtor = componentCtor;\n\t\tSoyAop.registerForInterception(templates, mainTemplate);\n\t\tComponentRegistry.register(componentCtor);\n\t}\n\n\t/**\n\t * Overrides the default method from `IncrementalDomRenderer` so the component's\n\t * soy template can be used for rendering.\n\t * @param {!Object} data Data passed to the component when rendering it.\n\t * @override\n\t */\n\trenderIncDom() {\n\t\tvar elementTemplate = this.component_.constructor.TEMPLATE;\n\t\tif (core.isFunction(elementTemplate) && !this.component_.render) {\n\t\t\telementTemplate = SoyAop.getOriginalFn(elementTemplate);\n\t\t\tSoyAop.startInterception(Soy.handleInterceptedCall_);\n\t\t\telementTemplate(this.buildTemplateData_(elementTemplate.params || []), null, ijData);\n\t\t\tSoyAop.stopInterception();\n\t\t} else {\n\t\t\tsuper.renderIncDom();\n\t\t}\n\t}\n\n\t/**\n\t * Sets the injected data object that should be passed to templates.\n\t * @param {Object} data\n\t */\n\tstatic setInjectedData(data) {\n\t\tijData = data || {};\n\t}\n\n\t/**\n\t * Overrides the original `IncrementalDomRenderer` method so that only\n\t * state keys used by the main template can cause updates.\n\t * @param {!Object} changes\n\t * @return {boolean}\n\t */\n\tshouldUpdate(changes) {\n\t\tvar should = super.shouldUpdate(changes);\n\t\tif (!should || this.component_.shouldUpdate) {\n\t\t\treturn should;\n\t\t}\n\n\t\tvar fn = this.component_.constructor.TEMPLATE;\n\t\tvar params = fn ? SoyAop.getOriginalFn(fn).params : [];\n\t\tfor (var i = 0; i < params.length; i++) {\n\t\t\tif (changes[params[i]]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Converts the given incremental dom function into an html string.\n\t * @param {!function()} incDomFn\n\t * @return {string}\n\t */\n\tstatic toHtmlString(incDomFn) {\n\t\tvar element = document.createElement('div');\n\t\tIncrementalDOM.patch(element, incDomFn);\n\t\treturn element.innerHTML;\n\t}\n\n\t/**\n\t * Converts the given html string into an incremental dom function.\n\t * @param {string|{contentKind: string, content: string}} value\n\t * @return {!function()}\n\t */\n\tstatic toIncDom(value) {\n\t\tif (core.isObject(value) && core.isString(value.content) && (value.contentKind === 'HTML')) {\n\t\t\tvalue = value.content;\n\t\t}\n\t\tif (core.isString(value)) {\n\t\t\tvalue = HTML2IncDom.buildFn(value);\n\t\t}\n\t\treturn value;\n\t}\n}\n\nexport default Soy;\nexport { Soy, SoyAop };\n"]}
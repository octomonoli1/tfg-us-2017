{"version":3,"sources":["/source/IncrementalDomAop.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;KAQM,iB;;;;;oBAKE,c,6BAAiB;AACvB,UAAO,QAAQ,CAAR,CAAP;AACA,G;;oBAcM,iB,8BAAkB,G,EAAK;AAC7B,OAAI,YAAY,kBAAkB,cAAlB,EAAhB;AACA,SAAM,cAAO,GAAP,CAAW,GAAX,EAAgB,UAAC,IAAD,EAAO,KAAP;AAAA,WAAiB,MAAM,IAAN,CAAW,IAAX,EAAiB,UAAU,IAAV,CAAjB,CAAjB;AAAA,IAAhB,CAAN;AACA,WAAQ,IAAR,CAAa,cAAO,KAAP,CAAa,EAAb,EAAiB,SAAjB,EAA4B,GAA5B,EAAiC;AAC7C,UAAM,MADuC;AAE7C,oBAAgB,SAF6B;AAG7C,sBAAkB,WAH2B;AAI7C,iBAAa;AAJgC,IAAjC,CAAb;AAMA,G;;oBAMM,gB,+BAAmB;AACzB,OAAI,QAAQ,MAAR,GAAiB,CAArB,EAAwB;AACvB,YAAQ,GAAR;AACA;AACD,G;;;;;AAGF,KAAI,UAAU,CAAC;AACd,QAAM,eAAe,IADP;AAEd,cAAY,eAAe,UAAf,CAA0B,eAAe,OAAf,CAAuB,OAAjD,CAFE;AAGd,gBAAc,eAAe,YAHf;AAId,eAAa,eAAe,WAJd;AAKd,kBAAgB,eAAe,cALjB;AAMd,oBAAkB,eAAe,gBANnB;AAOd,eAAa,eAAe,WAPd;AAQd,QAAM,eAAe;AARP,EAAD,CAAd;;AAWA,KAAI,gBAAgB,EAApB;;AAEA,UAAS,MAAT,CAAgB,IAAhB,EAAsB,KAAtB,EAA6B;AAC5B,gBAAc,IAAd,CAAmB,IAAnB,EAAyB,KAAzB;AACA;;AAED,UAAS,WAAT,CAAqB,GAArB,EAA0B,GAA1B,EAA+B,OAA/B,EAAwC;AACvC,kBAAgB,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAhB;AACA;;AAED,UAAS,SAAT,GAAqB;AACpB,SAAO,MAAM,aAAN,EAAqB,KAArB,CAA2B,IAA3B,EAAiC,aAAjC,CAAP;AACA;;AAED,UAAS,MAAT,CAAgB,GAAhB,EAAqB;AACpB,QAAM,aAAN,EAAqB,KAArB,CAA2B,IAA3B,EAAiC,SAAjC;AACA,SAAO,MAAM,cAAN,EAAsB,GAAtB,CAAP;AACA;;AAED,UAAS,KAAT,CAAe,IAAf,EAAqB;AACpB,SAAO,QAAQ,QAAQ,MAAR,GAAiB,CAAzB,EAA4B,IAA5B,CAAP;AACA;;AAED,UAAS,UAAT,CAAoB,IAApB,EAA0B;AACzB,SAAO,MAAM,IAAN,EAAY,KAAZ,CAAkB,IAAlB,EAAwB,aAAM,KAAN,CAAY,SAAZ,EAAuB,CAAvB,CAAxB,CAAP;AACA;;AAED,gBAAe,IAAf,GAAsB,WAAW,IAAX,CAAgB,IAAhB,EAAsB,MAAtB,CAAtB;AACA,gBAAe,YAAf,GAA8B,WAAW,IAAX,CAAgB,IAAhB,EAAsB,cAAtB,CAA9B;AACA,gBAAe,WAAf,GAA6B,WAAW,IAAX,CAAgB,IAAhB,EAAsB,aAAtB,CAA7B;AACA,gBAAe,cAAf,GAAgC,WAAW,IAAX,CAAgB,IAAhB,EAAsB,gBAAtB,CAAhC;AACA,gBAAe,gBAAf,GAAkC,WAAW,IAAX,CAAgB,IAAhB,EAAsB,kBAAtB,CAAlC;AACA,gBAAe,WAAf,GAA6B,WAAW,IAAX,CAAgB,IAAhB,EAAsB,aAAtB,CAA7B;AACA,gBAAe,IAAf,GAAsB,WAAW,IAAX,CAAgB,IAAhB,EAAsB,MAAtB,CAAtB;;AAEA,gBAAe,UAAf,CAA0B,eAAe,OAAf,CAAuB,OAAjD,IAA4D,WAAW,IAAX,CAC3D,IAD2D,EAE3D,YAF2D,CAA5D;;mBAKe,iB","sourcesContent":["'use strict';\n\nimport './incremental-dom';\nimport { array, object } from 'metal';\n\n/**\n * Class responsible for intercepting incremental dom functions through AOP.\n */\nclass IncrementalDomAop {\n\t/**\n\t * Gets the original functions that are intercepted by `IncrementalDomAop`.\n\t * @return {!Object}\n\t */\n\tstatic getOriginalFns() {\n\t\treturn fnStack[0];\n\t}\n\n\t/**\n\t * Starts intercepting calls to incremental dom, replacing them with the given\n\t * functions. Note that `elementVoid`, `elementOpenStart`, `elementOpenEnd`\n\t * and `attr` are the only ones that can't be intercepted, since they'll\n\t * automatically be converted into equivalent calls to `elementOpen` and\n\t * `elementClose`.\n\t * @param {!Object} fns Functions to be called instead of the original ones\n\t *     from incremental DOM. Should be given as a map from the function name\n\t *     to the function that should intercept it. All interceptors will receive\n\t *     the original function as the first argument, the actual arguments from\n\t *     from the original call following it.\n\t */\n\tstatic startInterception(fns) {\n\t\tvar originals = IncrementalDomAop.getOriginalFns();\n\t\tfns = object.map(fns, (name, value) => value.bind(null, originals[name]));\n\t\tfnStack.push(object.mixin({}, originals, fns, {\n\t\t\tattr: fnAttr,\n\t\t\telementOpenEnd: fnOpenEnd,\n\t\t\telementOpenStart: fnOpenStart,\n\t\t\telementVoid: fnVoid\n\t\t}));\n\t}\n\n\t/**\n\t * Restores the original `elementOpen` function from incremental dom to the\n\t * implementation it used before the last call to `startInterception`.\n\t */\n\tstatic stopInterception() {\n\t\tif (fnStack.length > 1) {\n\t\t\tfnStack.pop();\n\t\t}\n\t}\n}\n\nvar fnStack = [{\n\tattr: IncrementalDOM.attr,\n\tattributes: IncrementalDOM.attributes[IncrementalDOM.symbols.default],\n\telementClose: IncrementalDOM.elementClose,\n\telementOpen: IncrementalDOM.elementOpen,\n\telementOpenEnd: IncrementalDOM.elementOpenEnd,\n\telementOpenStart: IncrementalDOM.elementOpenStart,\n\telementVoid: IncrementalDOM.elementVoid,\n\ttext: IncrementalDOM.text\n}];\n\nvar collectedArgs = [];\n\nfunction fnAttr(name, value) {\n\tcollectedArgs.push(name, value);\n}\n\nfunction fnOpenStart(tag, key, statics) {\n\tcollectedArgs = [tag, key, statics];\n}\n\nfunction fnOpenEnd() {\n\treturn getFn('elementOpen').apply(null, collectedArgs);\n}\n\nfunction fnVoid(tag) {\n\tgetFn('elementOpen').apply(null, arguments);\n\treturn getFn('elementClose')(tag);\n}\n\nfunction getFn(name) {\n\treturn fnStack[fnStack.length - 1][name];\n}\n\nfunction handleCall(name) {\n\treturn getFn(name).apply(null, array.slice(arguments, 1));\n}\n\nIncrementalDOM.attr = handleCall.bind(null, 'attr');\nIncrementalDOM.elementClose = handleCall.bind(null, 'elementClose');\nIncrementalDOM.elementOpen = handleCall.bind(null, 'elementOpen');\nIncrementalDOM.elementOpenEnd = handleCall.bind(null, 'elementOpenEnd');\nIncrementalDOM.elementOpenStart = handleCall.bind(null, 'elementOpenStart');\nIncrementalDOM.elementVoid = handleCall.bind(null, 'elementVoid');\nIncrementalDOM.text = handleCall.bind(null, 'text');\n\nIncrementalDOM.attributes[IncrementalDOM.symbols.default] = handleCall.bind(\n\tnull,\n\t'attributes'\n);\n\nexport default IncrementalDomAop;\n"]}
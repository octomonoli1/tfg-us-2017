{"version":3,"sources":["/source/SoyAop.js"],"names":[],"mappings":";AAAA;;;;;AAEA,KAAI,SAAS;;;;;;;;AAQZ,iBAAe,EARH;;;;;;;;AAgBZ,iBAAe,uBAAS,EAAT,EAAa;AAC3B,UAAO,GAAG,UAAH,GAAgB,GAAG,UAAnB,GAAgC,EAAvC;AACA,GAlBW;;;;;;;;;;;;;AA+BZ,uBAAqB,6BAAS,UAAT,EAAqB,QAArB,EAA+B,WAA/B,EAA4C,UAA5C,EAAwD;AAC5E,OAAI,cAAc,OAAO,aAAP,CAAqB,OAAO,aAAP,CAAqB,MAArB,GAA8B,CAAnD,CAAlB;AACA,OAAI,WAAJ,EAAiB;AAChB,WAAO,YAAY,IAAZ,CAAiB,IAAjB,EAAuB,UAAvB,EAAmC,QAAnC,EAA6C,WAA7C,EAA0D,UAA1D,CAAP;AACA,IAFD,MAEO;AACN,WAAO,WAAW,IAAX,CAAgB,IAAhB,EAAsB,QAAtB,EAAgC,WAAhC,EAA6C,UAA7C,CAAP;AACA;AACD,GAtCW;;;;;;;;AA8CZ,2BAAyB,iCAAS,SAAT,EAAoB,IAApB,EAA0B;AAClD,OAAI,aAAa,UAAU,IAAV,CAAjB;AACA,OAAI,CAAC,WAAW,UAAhB,EAA4B;AAC3B,cAAU,IAAV,IAAkB,OAAO,mBAAP,CAA2B,IAA3B,CAAgC,IAAhC,EAAsC,UAAtC,CAAlB;AACA,cAAU,IAAV,EAAgB,UAAhB,GAA6B,UAA7B;AACA;AACD,GApDW;;;;;;;AA2DZ,qBAAmB,2BAAS,EAAT,EAAa;AAC/B,UAAO,aAAP,CAAqB,IAArB,CAA0B,EAA1B;AACA,GA7DW;;;;;AAkEZ,wBAAsB,gCAAW;AAChC,UAAO,aAAP,GAAuB,EAAvB;AACA,GApEW;;;;;AAyEZ,oBAAkB,4BAAW;AAC5B,UAAO,aAAP,CAAqB,GAArB;AACA;AA3EW,EAAb;;mBA8Ee,M","sourcesContent":["'use strict';\n\nvar SoyAop = {\n\t/**\n\t * The functions that should be called instead of a template call. The last\n\t * function in the array is the one that is intercepting at the moment. If the\n\t * array is empty, the original function will be called instead.\n\t * @type {!Array<function()>}\n\t * @protected\n\t */\n\tinterceptFns_: [],\n\n\t/**\n\t * Gets the original function of the given template function. If no original exists,\n\t * returns the given function itself.\n\t * @param {!function()} fn\n\t * @return {!function()}\n\t */\n\tgetOriginalFn: function(fn) {\n\t\treturn fn.originalFn ? fn.originalFn : fn;\n\t},\n\n\t/**\n\t * Handles a template call, calling the current interception function if one\n\t * is set, or otherwise just calling the original function instead.\n\t * @param {!function()} originalFn The original template function that was\n\t *     intercepted.\n\t * @param {Object} opt_data Template data object.\n\t * @param {*} opt_ignored\n\t * @param {Object} opt_ijData Template injected data object.\n\t * @return {*} The return value of the function that is called to handle this\n\t *     interception.\n\t */\n\thandleTemplateCall_: function(originalFn, opt_data, opt_ignored, opt_ijData) {\n\t\tvar interceptFn = SoyAop.interceptFns_[SoyAop.interceptFns_.length - 1];\n\t\tif (interceptFn) {\n\t\t\treturn interceptFn.call(null, originalFn, opt_data, opt_ignored, opt_ijData);\n\t\t} else {\n\t\t\treturn originalFn.call(null, opt_data, opt_ignored, opt_ijData);\n\t\t}\n\t},\n\n\t/**\n\t * Registers a template function that should be intercepted.\n\t * @param {!Object} templates The original templates object containing the\n\t *     function to be intercepted.\n\t * @param {string} name The name of the template function to intercept.\n\t */\n\tregisterForInterception: function(templates, name) {\n\t\tvar originalFn = templates[name];\n\t\tif (!originalFn.originalFn) {\n\t\t\ttemplates[name] = SoyAop.handleTemplateCall_.bind(null, originalFn);\n\t\t\ttemplates[name].originalFn = originalFn;\n\t\t}\n\t},\n\n\t/**\n\t * Starts intercepting all template calls, replacing them with a call to the\n\t * given function instead.\n\t * @param {!function()} fn\n\t */\n\tstartInterception: function(fn) {\n\t\tSoyAop.interceptFns_.push(fn);\n\t},\n\n\t/**\n\t * Stops intercepting template calls.\n\t */\n\tstopAllInterceptions: function() {\n\t\tSoyAop.interceptFns_ = [];\n\t},\n\n\t/**\n\t * Stops intercepting template calls with the last registered function.\n\t */\n\tstopInterception: function() {\n\t\tSoyAop.interceptFns_.pop();\n\t}\n};\n\nexport default SoyAop;\n"]}
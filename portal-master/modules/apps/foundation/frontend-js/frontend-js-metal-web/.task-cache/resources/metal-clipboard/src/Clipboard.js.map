{"version":3,"sources":["/source/Clipboard.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport dom from 'metal-dom';\nimport State from 'metal-state';\n\n/**\n * Clipboard component.\n */\nclass Clipboard extends State {\n\t/**\n\t * Delegates a click event to the passed selector.\n\t */\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\n\t\tthis.listener_ = dom.on(this.selector, 'click', (e) => this.initialize(e));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.listener_.dispose();\n\t\tthis.listener_ = null;\n\t\tif (this.clipboardAction_) {\n\t\t\tthis.clipboardAction_.dispose();\n\t\t\tthis.clipboardAction_ = null;\n\t\t}\n\t}\n\n\t/**\n\t * Defines a new `ClipboardAction` on each click event.\n\t * @param {!Event} e\n\t */\n\tinitialize(e) {\n\t\tif (this.clipboardAction_) {\n\t\t\tthis.clipboardAction_ = null;\n\t\t}\n\n\t\tthis.clipboardAction_ = new ClipboardAction({\n\t\t\thost: this,\n\t\t\taction: this.action(e.delegateTarget),\n\t\t\ttarget: this.target(e.delegateTarget),\n\t\t\ttext: this.text(e.delegateTarget),\n\t\t\ttrigger: e.delegateTarget\n\t\t});\n\t}\n}\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nClipboard.STATE = {\n\t/**\n\t * A function that returns the name of the clipboard action that should be done\n\t * when for the given element (either 'copy' or 'cut').\n\t * @type {!function(!Element)}\n\t */\n\taction: {\n\t\tvalidator: core.isFunction,\n\t\tvalue: function(delegateTarget) {\n\t\t\treturn delegateTarget.getAttribute('data-action');\n\t\t}\n\t},\n\n\t/**\n\t * The selector for all elements that should be listened for clipboard actions.\n\t * @type {string}\n\t */\n\tselector: {\n\t\tvalue: '[data-clipboard]',\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * A function that returns an element that has the content to be copied to the\n\t * clipboard.\n\t * @type {!function(!Element)}\n\t */\n\ttarget: {\n\t\tvalidator: core.isFunction,\n\t\tvalue: function(delegateTarget) {\n\t\t\treturn document.querySelector(delegateTarget.getAttribute('data-target'));\n\t\t}\n\t},\n\n\t/**\n\t * A function that returns the text to be copied to the clipboard.\n\t * @type {!function(!Element)}\n\t */\n\ttext: {\n\t\tvalidator: core.isFunction,\n\t\tvalue: function(delegateTarget) {\n\t\t\treturn delegateTarget.getAttribute('data-text');\n\t\t}\n\t}\n};\n\n/**\n * ClipboardAction component.\n */\nclass ClipboardAction extends State {\n\t/**\n\t * Initializes selection either from a `text` or `target` state.\n\t */\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\n\t\tif (this.text) {\n\t\t\tthis.selectValue();\n\t\t} else if (this.target) {\n\t\t\tthis.selectTarget();\n\t\t}\n\t}\n\n\t/**\n\t * Removes current selection and focus from `target` element.\n\t */\n\tclearSelection() {\n\t\tif (this.target) {\n\t\t\tthis.target.blur();\n\t\t}\n\n\t\twindow.getSelection().removeAllRanges();\n\t}\n\n\t/**\n\t * Executes the copy operation based on the current selection.\n\t */\n\tcopyText() {\n\t\tlet succeeded;\n\n\t\ttry {\n\t\t\tsucceeded = document.execCommand(this.action);\n\t\t} catch (err) {\n\t\t\tsucceeded = false;\n\t\t}\n\n\t\tthis.handleResult(succeeded);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.removeFakeElement();\n\t\tsuper.disposeInternal();\n\t}\n\n\t/**\n\t * Emits an event based on the copy operation result.\n\t * @param {boolean} succeeded\n\t */\n\thandleResult(succeeded) {\n\t\tif (succeeded) {\n\t\t\tthis.host.emit('success', {\n\t\t\t\taction: this.action,\n\t\t\t\ttext: this.selectedText,\n\t\t\t\ttrigger: this.trigger,\n\t\t\t\tclearSelection: this.clearSelection.bind(this)\n\t\t\t});\n\t\t} else {\n\t\t\tthis.host.emit('error', {\n\t\t\t\taction: this.action,\n\t\t\t\ttrigger: this.trigger,\n\t\t\t\tclearSelection: this.clearSelection.bind(this)\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Removes the fake element that was added to the document, as well as its\n\t * listener.\n\t */\n\tremoveFakeElement() {\n\t\tif (this.fake) {\n\t\t\tdom.exitDocument(this.fake);\n\t\t}\n\n\t\tif (this.removeFakeHandler) {\n\t\t\tthis.removeFakeHandler.removeListener();\n\t\t}\n\t}\n\n\t/**\n\t * Selects the content from element passed on `target` state.\n\t */\n\tselectTarget() {\n\t\tif (this.target.nodeName === 'INPUT' || this.target.nodeName === 'TEXTAREA') {\n\t\t\tthis.target.select();\n\t\t\tthis.selectedText = this.target.value;\n\t\t} else {\n\t\t\tlet range = document.createRange();\n\t\t\tlet selection = window.getSelection();\n\n\t\t\trange.selectNodeContents(this.target);\n\t\t\tselection.addRange(range);\n\t\t\tthis.selectedText = selection.toString();\n\t\t}\n\n\t\tthis.copyText();\n\t}\n\n\t/**\n\t * Selects the content from value passed on `text` state.\n\t */\n\tselectValue() {\n\t\tthis.removeFakeElement();\n\t\tthis.removeFakeHandler = dom.once(document, 'click', this.removeFakeElement.bind(this));\n\n\t\tthis.fake = document.createElement('textarea');\n\t\tthis.fake.style.position = 'fixed';\n\t\tthis.fake.style.left = '-9999px';\n\t\tthis.fake.setAttribute('readonly', '');\n\t\tthis.fake.value = this.text;\n\t\tthis.selectedText = this.text;\n\n\t\tdom.enterDocument(this.fake);\n\n\t\tthis.fake.select();\n\t\tthis.copyText();\n\t}\n}\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nClipboardAction.STATE = {\n\t/**\n\t * The action to be performed (either 'copy' or 'cut').\n\t * @type {string}\n\t * @default 'copy'\n\t */\n\taction: {\n\t\tvalue: 'copy',\n\t\tvalidator: function(val) {\n\t\t\treturn val === 'copy' || val === 'cut';\n\t\t}\n\t},\n\n\t/**\n\t * A reference to the `Clipboard` base class.\n\t * @type {!Clipboard}\n\t */\n\thost: {\n\t\tvalidator: function(val) {\n\t\t\treturn val instanceof Clipboard;\n\t\t}\n\t},\n\n\t/**\n\t * The text that is current selected.\n\t * @type {string}\n\t */\n\tselectedText: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * The ID of an element that will be have its content copied.\n\t * @type {Element}\n\t */\n\ttarget: {\n\t\tvalidator: core.isElement\n\t},\n\n\t/**\n\t * The text to be copied.\n\t * @type {string}\n\t */\n\ttext: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * The element that when clicked initiates a clipboard action.\n\t * @type {!Element}\n\t */\n\ttrigger: {\n\t\tvalidator: core.isElement\n\t}\n};\n\nexport default Clipboard;\nimport JQueryAdapter from 'metal-jquery-adapter/src/JQueryAdapter';JQueryAdapter.register('clipboard', Clipboard);"]}
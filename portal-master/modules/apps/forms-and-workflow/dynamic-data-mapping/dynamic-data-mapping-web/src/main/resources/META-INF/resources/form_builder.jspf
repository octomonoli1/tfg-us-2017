<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
String defaultLanguageId = LocaleUtil.toLanguageId(LocaleUtil.getSiteDefault());

Locale[] availableLocales = new Locale[] {LocaleUtil.getSiteDefault()};

if (Validator.isNotNull(script)) {
	try {
		DDMForm ddmForm = DDMUtil.getDDMForm(script);

		String ddmFormDefaultLanguageId = LocaleUtil.toLanguageId(ddmForm.getDefaultLocale());

		if (!Objects.equals(defaultLanguageId, ddmFormDefaultLanguageId)) {
			changeableDefaultLanguage = true;
		}

		defaultLanguageId = ddmFormDefaultLanguageId;

		Set<Locale> ddmFormAvailableLocales = ddmForm.getAvailableLocales();

		availableLocales = ddmFormAvailableLocales.toArray(new Locale[ddmFormAvailableLocales.size()]);
	}
	catch (Exception e) {
	}
}
%>

<div class="separator"><!-- --></div>

<div class="alert alert-danger hide lfr-message-response" id="<portlet:namespace />messageContainer"></div>

<liferay-ui:tabs
	names='<%= LanguageUtil.get(request, "view[action]") + "," + LanguageUtil.get(request, "source") %>'
	refresh="<%= false %>"
	type="tabs nav-tabs-default"
>
	<liferay-ui:section>
		<div id="<portlet:namespace />formBuilderTab">
			<aui:translation-manager
				availableLocales="<%= availableLocales %>"
				changeableDefaultLanguage="<%= changeableDefaultLanguage %>"
				defaultLanguageId="<%= defaultLanguageId %>"
				id="translationManager"
				initialize="<%= false %>"
				readOnly="<%= false %>"
			/>

			<div class="diagram-builder form-builder" id="<portlet:namespace />formBuilder">
				<div class="diagram-builder-content" id="<portlet:namespace />formBuilderContent">
					<div class="tabbable">
						<div class="tabbable-content">
							<ul class="lfr-nav nav nav-tabs nav-tabs-default">
								<li class="active">
									<a href="javascript:;">
										<liferay-ui:message key="fields" />
									</a>
								</li>
								<li class="disabled">
									<a href="javascript:;">
										<liferay-ui:message key="settings" />
									</a>
								</li>
							</ul>

							<div class="tab-content">
								<div class="tab-pane"></div>
								<div class="tab-pane"></div>
							</div>
						</div>
					</div>

					<div class="diagram-builder-content-container">
						<div class="diagram-builder-canvas">
							<div class="diagram-builder-drop-container"></div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</liferay-ui:section>

	<liferay-ui:section>
		<div class="form-builder-source-wrapper" id="<portlet:namespace />formBuilderSourceWrapper">
			<div class="form-builder-source" id="<portlet:namespace />formBuilderEditor"></div>
		</div>
	</liferay-ui:section>
</liferay-ui:tabs>

<%
JSONArray availableLocalesJSONArray = JSONFactoryUtil.createJSONArray();

for (int i = 0; i < availableLocales.length; i++) {
	availableLocalesJSONArray.put(LanguageUtil.getLanguageId(availableLocales[i]));
}

JSONObject localesMapJSONObject = JSONFactoryUtil.createJSONObject();

for (Locale availableLocale : LanguageUtil.getAvailableLocales(themeDisplay.getSiteGroupId())) {
	localesMapJSONObject.put(LocaleUtil.toLanguageId(availableLocale), availableLocale.getDisplayName(locale));
}
%>

<aui:script use="aui-datepicker-deprecated,event-custom-base,json,liferay-portlet-dynamic-data-lists,liferay-portlet-dynamic-data-mapping,liferay-portlet-dynamic-data-mapping-custom-fields,aui-tabview,aui-ace-editor,liferay-xml-formatter">
	var Lang = A.Lang;

	var STR_VALUE = 'value';

	var availableFields;
	var formEditor;

	var getContentValue = function() {
		var content;

		if (formEditor && !isViewTabActive()) {
			content = formEditor.get(STR_VALUE);
		}
		else {
			content = formBuilder.getContent();
		}

		return content;
	};

	var getFormEditor = function() {
		if (!formEditor) {
			formEditor = new A.AceEditor(
				{
					boundingBox: '#<portlet:namespace />formBuilderEditor',
					height: 600,
					mode: 'xml',
					tabSize: 4,
					width: 600
				}
			).render();
		}

		return formEditor;
	};

	var isViewTabActive = function() {
		return !A.one('#<portlet:namespace />formBuilderTab').ancestor().hasClass('hide');
	};

	var reloadFormBuilderData = function(content) {
		if (!Lang.isValue(content)) {
			content = window.<portlet:namespace />getContentDefinition();
		}

		content = content.replace(/nestedFields/g, 'fields');

		content = formBuilder.deserializeDefinitionFields(JSON.parse(content));

		formBuilder.set('fields', content);
	};

	var setEditorSize = function() {
		if (!isViewTabActive()) {
			getFormEditor().set('width', A.one('#<portlet:namespace />formBuilderSourceWrapper').get('clientWidth'));
		}
	};

	var switchToSource = function() {
		setEditorSize();

		var content = formBuilder.getContent();

		getFormEditor().set(STR_VALUE, content);
	};

	var switchToView = function() {
		reloadFormBuilderData(formEditor.get(STR_VALUE));
	};

	<c:if test="<%= Validator.isNotNull(scopeAvailableFields) %>">
		availableFields = A.Object.getValue(window, '<%= HtmlUtil.escapeJS(scopeAvailableFields) %>'.split('.'));

		if (A.Lang.isFunction(availableFields)) {
			availableFields = availableFields(A, Liferay.FormBuilder);
		}
	</c:if>

	var formBuilder = new Liferay.FormBuilder(
		{
			allowRemoveRequiredFields: true,
			availableFields: availableFields,
			boundingBox: '#<portlet:namespace />formBuilder',
			enableEditing: false,

			<c:if test="<%= Validator.isNotNull(fieldsJSONArrayString) %>">
				fields: <%= fieldsJSONArrayString %>,
			</c:if>

			portletNamespace: '<portlet:namespace />',
			portletResourceNamespace: '<%= HtmlUtil.escapeJS(portletResourceNamespace) %>',
			readOnly: <%= ParamUtil.getBoolean(request, "formBuilderReadOnly") %>,
			srcNode: '#<portlet:namespace />formBuilderContent',
			translationManager: {

				<c:if test="<%= availableLocalesJSONArray.length() > 0 %>">
					availableLocales: <%= availableLocalesJSONArray.toString() %>,
				</c:if>

				boundingBox: '#<portlet:namespace />translationManager',
				changeableDefaultLanguage: <%= changeableDefaultLanguage %>,
				defaultLocale: '<%= HtmlUtil.escapeJS(defaultLanguageId) %>',
				localesMap: <%= localesMapJSONObject.toString() %>,
				srcNode: '#<portlet:namespace />translationManager .lfr-translation-manager-content'
			}
		}
	).render();

	var dialog = Liferay.Util.getWindow();

	if (dialog) {
		dialog.after('widthChange', setEditorSize);
	}

	var afterShowTab = function(event) {
		if (isViewTabActive()) {
			switchToView();
		}
		else {
			switchToSource();
		}
	};

	Liferay.after('showTab', afterShowTab);

	var onDestroyPortlet = function(event) {
		if (event.portletId === '<%= portletDisplay.getRootPortletId() %>') {
			Liferay.detach('showTab', afterShowTab);
			Liferay.detach('destroyPortlet', onDestroyPortlet);

			var propertyList = formBuilder.propertyList;

			if (propertyList) {
				propertyList.get('data').each(
					function(model) {
						var editor = model.get('editor');

						if (editor) {
							editor.destroy();
						}
					}
				);
			}

			formBuilder.destroy();
		}
	};

	Liferay.on('destroyPortlet', onDestroyPortlet);

	window['<%= HtmlUtil.escapeJS(portletResourceNamespace) %>formBuilder'] = formBuilder;

	window['<%= HtmlUtil.escapeJS(portletResourceNamespace) %>getContentValue'] = getContentValue;

	Liferay.on(
		'<portlet:namespace />saveTemplate',
		function(event) {
			A.one('#<portlet:namespace />scriptContent').val(getContentValue());
		}
	);

	Liferay.fire(
		'<portlet:namespace />formBuilderLoaded',
		{
			formBuilder: formBuilder
		}
	);
</aui:script>
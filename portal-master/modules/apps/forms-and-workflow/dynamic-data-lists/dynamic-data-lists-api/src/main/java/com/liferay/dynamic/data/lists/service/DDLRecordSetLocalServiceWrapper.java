/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.dynamic.data.lists.service;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.service.ServiceWrapper;

/**
 * Provides a wrapper for {@link DDLRecordSetLocalService}.
 *
 * @author Brian Wing Shun Chan
 * @see DDLRecordSetLocalService
 * @generated
 */
@ProviderType
public class DDLRecordSetLocalServiceWrapper implements DDLRecordSetLocalService,
	ServiceWrapper<DDLRecordSetLocalService> {
	public DDLRecordSetLocalServiceWrapper(
		DDLRecordSetLocalService ddlRecordSetLocalService) {
		_ddlRecordSetLocalService = ddlRecordSetLocalService;
	}

	/**
	* Adds the d d l record set to the database. Also notifies the appropriate model listeners.
	*
	* @param ddlRecordSet the d d l record set
	* @return the d d l record set that was added
	*/
	@Override
	public com.liferay.dynamic.data.lists.model.DDLRecordSet addDDLRecordSet(
		com.liferay.dynamic.data.lists.model.DDLRecordSet ddlRecordSet) {
		return _ddlRecordSetLocalService.addDDLRecordSet(ddlRecordSet);
	}

	/**
	* Adds a record set referencing the DDM structure.
	*
	* @param userId the primary key of the record set's creator/owner
	* @param groupId the primary key of the record set's group
	* @param ddmStructureId the primary key of the record set's DDM structure
	* @param recordSetKey the record set's mnemonic primary key. If
	<code>null</code>, the record set key will be autogenerated.
	* @param nameMap the record set's locales and localized names
	* @param descriptionMap the record set's locales and localized
	descriptions
	* @param minDisplayRows the record set's minimum number of rows to be
	displayed in spreadsheet view.
	* @param scope the record set's scope, used to scope the record set's
	data. For more information search
	<code>DDLRecordSetConstants</code> in the
	<code>dynamic.data.lists.api</code> module for constants starting
	with the "SCOPE_" prefix.
	* @param serviceContext the service context to be applied. Can set the
	UUID, guest permissions, and group permissions for the record
	set.
	* @return the record set
	* @throws PortalException if a portal exception occurred
	*/
	@Override
	public com.liferay.dynamic.data.lists.model.DDLRecordSet addRecordSet(
		long userId, long groupId, long ddmStructureId,
		java.lang.String recordSetKey,
		java.util.Map<java.util.Locale, java.lang.String> nameMap,
		java.util.Map<java.util.Locale, java.lang.String> descriptionMap,
		int minDisplayRows, int scope,
		com.liferay.portal.kernel.service.ServiceContext serviceContext)
		throws com.liferay.portal.kernel.exception.PortalException {
		return _ddlRecordSetLocalService.addRecordSet(userId, groupId,
			ddmStructureId, recordSetKey, nameMap, descriptionMap,
			minDisplayRows, scope, serviceContext);
	}

	/**
	* Creates a new d d l record set with the primary key. Does not add the d d l record set to the database.
	*
	* @param recordSetId the primary key for the new d d l record set
	* @return the new d d l record set
	*/
	@Override
	public com.liferay.dynamic.data.lists.model.DDLRecordSet createDDLRecordSet(
		long recordSetId) {
		return _ddlRecordSetLocalService.createDDLRecordSet(recordSetId);
	}

	/**
	* Deletes the d d l record set from the database. Also notifies the appropriate model listeners.
	*
	* @param ddlRecordSet the d d l record set
	* @return the d d l record set that was removed
	*/
	@Override
	public com.liferay.dynamic.data.lists.model.DDLRecordSet deleteDDLRecordSet(
		com.liferay.dynamic.data.lists.model.DDLRecordSet ddlRecordSet) {
		return _ddlRecordSetLocalService.deleteDDLRecordSet(ddlRecordSet);
	}

	/**
	* Deletes the d d l record set with the primary key from the database. Also notifies the appropriate model listeners.
	*
	* @param recordSetId the primary key of the d d l record set
	* @return the d d l record set that was removed
	* @throws PortalException if a d d l record set with the primary key could not be found
	*/
	@Override
	public com.liferay.dynamic.data.lists.model.DDLRecordSet deleteDDLRecordSet(
		long recordSetId)
		throws com.liferay.portal.kernel.exception.PortalException {
		return _ddlRecordSetLocalService.deleteDDLRecordSet(recordSetId);
	}

	@Override
	public com.liferay.dynamic.data.lists.model.DDLRecordSet fetchDDLRecordSet(
		long recordSetId) {
		return _ddlRecordSetLocalService.fetchDDLRecordSet(recordSetId);
	}

	/**
	* Returns the d d l record set matching the UUID and group.
	*
	* @param uuid the d d l record set's UUID
	* @param groupId the primary key of the group
	* @return the matching d d l record set, or <code>null</code> if a matching d d l record set could not be found
	*/
	@Override
	public com.liferay.dynamic.data.lists.model.DDLRecordSet fetchDDLRecordSetByUuidAndGroupId(
		java.lang.String uuid, long groupId) {
		return _ddlRecordSetLocalService.fetchDDLRecordSetByUuidAndGroupId(uuid,
			groupId);
	}

	/**
	* Returns the record set matching the group and record set key.
	*
	* @param groupId the primary key of the record set's group
	* @param recordSetKey the record set's mnemonic primary key
	* @return the record set matching the group and record set key, or
	<code>null</code> if a matching record set could not be found
	*/
	@Override
	public com.liferay.dynamic.data.lists.model.DDLRecordSet fetchRecordSet(
		long groupId, java.lang.String recordSetKey) {
		return _ddlRecordSetLocalService.fetchRecordSet(groupId, recordSetKey);
	}

	/**
	* Returns the record set with the ID.
	*
	* @param recordSetId the primary key of the record set
	* @return the record set with the ID, or <code>null</code> if a matching
	record set could not be found
	*/
	@Override
	public com.liferay.dynamic.data.lists.model.DDLRecordSet fetchRecordSet(
		long recordSetId) {
		return _ddlRecordSetLocalService.fetchRecordSet(recordSetId);
	}

	/**
	* Returns the d d l record set with the primary key.
	*
	* @param recordSetId the primary key of the d d l record set
	* @return the d d l record set
	* @throws PortalException if a d d l record set with the primary key could not be found
	*/
	@Override
	public com.liferay.dynamic.data.lists.model.DDLRecordSet getDDLRecordSet(
		long recordSetId)
		throws com.liferay.portal.kernel.exception.PortalException {
		return _ddlRecordSetLocalService.getDDLRecordSet(recordSetId);
	}

	/**
	* Returns the d d l record set matching the UUID and group.
	*
	* @param uuid the d d l record set's UUID
	* @param groupId the primary key of the group
	* @return the matching d d l record set
	* @throws PortalException if a matching d d l record set could not be found
	*/
	@Override
	public com.liferay.dynamic.data.lists.model.DDLRecordSet getDDLRecordSetByUuidAndGroupId(
		java.lang.String uuid, long groupId)
		throws com.liferay.portal.kernel.exception.PortalException {
		return _ddlRecordSetLocalService.getDDLRecordSetByUuidAndGroupId(uuid,
			groupId);
	}

	/**
	* Returns the record set matching the group and record set key.
	*
	* @param groupId the primary key of the record set's group
	* @param recordSetKey the record set's mnemonic primary key
	* @return the record set matching the group and record set key
	* @throws PortalException if the the matching record set could not be found
	*/
	@Override
	public com.liferay.dynamic.data.lists.model.DDLRecordSet getRecordSet(
		long groupId, java.lang.String recordSetKey)
		throws com.liferay.portal.kernel.exception.PortalException {
		return _ddlRecordSetLocalService.getRecordSet(groupId, recordSetKey);
	}

	/**
	* Returns the record set with the ID.
	*
	* @param recordSetId the primary key of the record set
	* @return the record set with the ID
	* @throws PortalException if the the matching record set could not be found
	*/
	@Override
	public com.liferay.dynamic.data.lists.model.DDLRecordSet getRecordSet(
		long recordSetId)
		throws com.liferay.portal.kernel.exception.PortalException {
		return _ddlRecordSetLocalService.getRecordSet(recordSetId);
	}

	/**
	* Updates the d d l record set in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	*
	* @param ddlRecordSet the d d l record set
	* @return the d d l record set that was updated
	*/
	@Override
	public com.liferay.dynamic.data.lists.model.DDLRecordSet updateDDLRecordSet(
		com.liferay.dynamic.data.lists.model.DDLRecordSet ddlRecordSet) {
		return _ddlRecordSetLocalService.updateDDLRecordSet(ddlRecordSet);
	}

	/**
	* Updates the number of minimum rows to display for the record set. Useful
	* when the record set is being displayed in spreadsheet.
	*
	* @param recordSetId the primary key of the record set
	* @param minDisplayRows the record set's minimum number of rows to be
	displayed in spreadsheet view
	* @param serviceContext the service context to be applied. This can set
	the record set modified date.
	* @return the record set
	* @throws PortalException if a portal exception occurred
	*/
	@Override
	public com.liferay.dynamic.data.lists.model.DDLRecordSet updateMinDisplayRows(
		long recordSetId, int minDisplayRows,
		com.liferay.portal.kernel.service.ServiceContext serviceContext)
		throws com.liferay.portal.kernel.exception.PortalException {
		return _ddlRecordSetLocalService.updateMinDisplayRows(recordSetId,
			minDisplayRows, serviceContext);
	}

	/**
	* Updates the DDM strucutre, name, description, and minimum number of
	* display rows for the record set matching the record set key and group ID.
	*
	* @param groupId the primary key of the record set's group
	* @param ddmStructureId the primary key of the record set's DDM structure
	* @param recordSetKey the record set's mnemonic primary key
	* @param nameMap the record set's locales and localized names
	* @param descriptionMap the record set's locales and localized
	descriptions
	* @param minDisplayRows the record set's minimum number of rows to be
	displayed in spreadsheet view
	* @param serviceContext the service context to be applied. This can set
	the record set modified date.
	* @return the record set
	* @throws PortalException if a portal exception occurred
	*/
	@Override
	public com.liferay.dynamic.data.lists.model.DDLRecordSet updateRecordSet(
		long groupId, long ddmStructureId, java.lang.String recordSetKey,
		java.util.Map<java.util.Locale, java.lang.String> nameMap,
		java.util.Map<java.util.Locale, java.lang.String> descriptionMap,
		int minDisplayRows,
		com.liferay.portal.kernel.service.ServiceContext serviceContext)
		throws com.liferay.portal.kernel.exception.PortalException {
		return _ddlRecordSetLocalService.updateRecordSet(groupId,
			ddmStructureId, recordSetKey, nameMap, descriptionMap,
			minDisplayRows, serviceContext);
	}

	/**
	* Updates the the record set's settings.
	*
	* @param recordSetId the primary key of the record set
	* @param settingsDDMFormValues the record set's settings. For more
	information see <code>DDMFormValues</code> in the
	<code>dynamic.data.mapping.api</code> the module.
	* @return the record set
	* @throws PortalException if a portal exception occurred
	*/
	@Override
	public com.liferay.dynamic.data.lists.model.DDLRecordSet updateRecordSet(
		long recordSetId,
		com.liferay.dynamic.data.mapping.storage.DDMFormValues settingsDDMFormValues)
		throws com.liferay.portal.kernel.exception.PortalException {
		return _ddlRecordSetLocalService.updateRecordSet(recordSetId,
			settingsDDMFormValues);
	}

	/**
	* Updates the DDM structure, name, description, and minimum number of
	* display rows for the record set matching the record set ID.
	*
	* @param recordSetId the primary key of the record set
	* @param ddmStructureId the primary key of the record set's DDM structure
	* @param nameMap the record set's locales and localized names
	* @param descriptionMap the record set's locales and localized
	descriptions
	* @param minDisplayRows the record set's minimum number of rows to be
	displayed in spreadsheet view
	* @param serviceContext the service context to be applied. This can set
	the record set modified date.
	* @return the record set
	* @throws PortalException if a portal exception occurred
	*/
	@Override
	public com.liferay.dynamic.data.lists.model.DDLRecordSet updateRecordSet(
		long recordSetId, long ddmStructureId,
		java.util.Map<java.util.Locale, java.lang.String> nameMap,
		java.util.Map<java.util.Locale, java.lang.String> descriptionMap,
		int minDisplayRows,
		com.liferay.portal.kernel.service.ServiceContext serviceContext)
		throws com.liferay.portal.kernel.exception.PortalException {
		return _ddlRecordSetLocalService.updateRecordSet(recordSetId,
			ddmStructureId, nameMap, descriptionMap, minDisplayRows,
			serviceContext);
	}

	/**
	* Returns the record set's settings.
	*
	* @param recordSet the record set
	* @return the record set settings
	* @throws PortalException if a portal exception occurred
	* @see #getRecordSetSettingsDDMFormValues(DDLRecordSet)
	*/
	@Override
	public com.liferay.dynamic.data.lists.model.DDLRecordSetSettings getRecordSetSettingsModel(
		com.liferay.dynamic.data.lists.model.DDLRecordSet recordSet)
		throws com.liferay.portal.kernel.exception.PortalException {
		return _ddlRecordSetLocalService.getRecordSetSettingsModel(recordSet);
	}

	/**
	* Returns the record set's settings as a DDMFormValues object. For more
	* information see <code>DDMFormValues</code> in the
	* <code>dynamic.data.mapping.api</code> module.
	*
	* @param recordSet the record set
	* @return the record set settings as a DDMFormValues object
	* @throws PortalException if a portal exception occurred
	*/
	@Override
	public com.liferay.dynamic.data.mapping.storage.DDMFormValues getRecordSetSettingsDDMFormValues(
		com.liferay.dynamic.data.lists.model.DDLRecordSet recordSet)
		throws com.liferay.portal.kernel.exception.PortalException {
		return _ddlRecordSetLocalService.getRecordSetSettingsDDMFormValues(recordSet);
	}

	@Override
	public com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery getActionableDynamicQuery() {
		return _ddlRecordSetLocalService.getActionableDynamicQuery();
	}

	@Override
	public com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery() {
		return _ddlRecordSetLocalService.dynamicQuery();
	}

	@Override
	public com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery getExportActionableDynamicQuery(
		com.liferay.exportimport.kernel.lar.PortletDataContext portletDataContext) {
		return _ddlRecordSetLocalService.getExportActionableDynamicQuery(portletDataContext);
	}

	@Override
	public com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		return _ddlRecordSetLocalService.getIndexableActionableDynamicQuery();
	}

	/**
	* @throws PortalException
	*/
	@Override
	public com.liferay.portal.kernel.model.PersistedModel deletePersistedModel(
		com.liferay.portal.kernel.model.PersistedModel persistedModel)
		throws com.liferay.portal.kernel.exception.PortalException {
		return _ddlRecordSetLocalService.deletePersistedModel(persistedModel);
	}

	@Override
	public com.liferay.portal.kernel.model.PersistedModel getPersistedModel(
		java.io.Serializable primaryKeyObj)
		throws com.liferay.portal.kernel.exception.PortalException {
		return _ddlRecordSetLocalService.getPersistedModel(primaryKeyObj);
	}

	/**
	* Returns the number of d d l record sets.
	*
	* @return the number of d d l record sets
	*/
	@Override
	public int getDDLRecordSetsCount() {
		return _ddlRecordSetLocalService.getDDLRecordSetsCount();
	}

	/**
	* Returns the number of all the record sets belonging the group.
	*
	* @param groupId the primary key of the record set's group
	* @return the number of record sets belonging to the group
	*/
	@Override
	public int getRecordSetsCount(long groupId) {
		return _ddlRecordSetLocalService.getRecordSetsCount(groupId);
	}

	/**
	* Returns the number of record sets matching the parameters. The keywords
	* parameter is used for matching the record set's name or description
	*
	* @param companyId the primary key of the record set's company
	* @param groupId the primary key of the record set's group.
	* @param keywords the keywords (space separated) to look for and match in
	the record set name or description (optionally
	<code>null</code>). If the keywords value is not
	<code>null</code>, the OR operator is used in connecting query
	criteria; otherwise it uses the AND operator.
	* @param scope the record set's scope. A constant used to scope the record
	set's data. For more information search the
	<code>dynamic.data.lists.api</code> module's
	<code>DDLRecordSetConstants</code> class for constants prefixed
	with "SCOPE_".
	* @return the number of matching record sets
	*/
	@Override
	public int searchCount(long companyId, long groupId,
		java.lang.String keywords, int scope) {
		return _ddlRecordSetLocalService.searchCount(companyId, groupId,
			keywords, scope);
	}

	/**
	* Returns the number of all record sets matching the parameters. name and
	* description keywords. Company ID and group ID must be matched. If the and
	* operator is set to <code>true</code>, only record sets with a matching
	* name, description, and scope are counted. If the and operator is set to
	* <code>false</code>, only one parameter of name, description, and scope is
	* needed to count matching record sets.
	*
	* @param companyId the primary key of the record set's company
	* @param groupId the primary key of the record set's group
	* @param name the name keywords (space separated). This can be
	<code>null</code>.
	* @param description the description keywords (space separated). This can
	be <code>null</code>.
	* @param scope the record set's scope. A constant used to scope the record
	set's data. For more information search the
	<code>dynamic.data.lists.api</code> module's
	<code>DDLRecordSetConstants</code> class for constants prefixed
	with "SCOPE_".
	* @param andOperator whether every field must match its value or keywords,
	or just one field must match. Company and group must match their
	values.
	* @return the number of matching record sets
	*/
	@Override
	public int searchCount(long companyId, long groupId, java.lang.String name,
		java.lang.String description, int scope, boolean andOperator) {
		return _ddlRecordSetLocalService.searchCount(companyId, groupId, name,
			description, scope, andOperator);
	}

	/**
	* Returns the OSGi service identifier.
	*
	* @return the OSGi service identifier
	*/
	@Override
	public java.lang.String getOSGiServiceIdentifier() {
		return _ddlRecordSetLocalService.getOSGiServiceIdentifier();
	}

	/**
	* Performs a dynamic query on the database and returns the matching rows.
	*
	* @param dynamicQuery the dynamic query
	* @return the matching rows
	*/
	@Override
	public <T> java.util.List<T> dynamicQuery(
		com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery) {
		return _ddlRecordSetLocalService.dynamicQuery(dynamicQuery);
	}

	/**
	* Performs a dynamic query on the database and returns a range of the matching rows.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.dynamic.data.lists.model.impl.DDLRecordSetModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param dynamicQuery the dynamic query
	* @param start the lower bound of the range of model instances
	* @param end the upper bound of the range of model instances (not inclusive)
	* @return the range of matching rows
	*/
	@Override
	public <T> java.util.List<T> dynamicQuery(
		com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery, int start,
		int end) {
		return _ddlRecordSetLocalService.dynamicQuery(dynamicQuery, start, end);
	}

	/**
	* Performs a dynamic query on the database and returns an ordered range of the matching rows.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.dynamic.data.lists.model.impl.DDLRecordSetModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param dynamicQuery the dynamic query
	* @param start the lower bound of the range of model instances
	* @param end the upper bound of the range of model instances (not inclusive)
	* @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	* @return the ordered range of matching rows
	*/
	@Override
	public <T> java.util.List<T> dynamicQuery(
		com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery, int start,
		int end,
		com.liferay.portal.kernel.util.OrderByComparator<T> orderByComparator) {
		return _ddlRecordSetLocalService.dynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	* Returns a range of all the d d l record sets.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.dynamic.data.lists.model.impl.DDLRecordSetModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param start the lower bound of the range of d d l record sets
	* @param end the upper bound of the range of d d l record sets (not inclusive)
	* @return the range of d d l record sets
	*/
	@Override
	public java.util.List<com.liferay.dynamic.data.lists.model.DDLRecordSet> getDDLRecordSets(
		int start, int end) {
		return _ddlRecordSetLocalService.getDDLRecordSets(start, end);
	}

	/**
	* Returns all the d d l record sets matching the UUID and company.
	*
	* @param uuid the UUID of the d d l record sets
	* @param companyId the primary key of the company
	* @return the matching d d l record sets, or an empty list if no matches were found
	*/
	@Override
	public java.util.List<com.liferay.dynamic.data.lists.model.DDLRecordSet> getDDLRecordSetsByUuidAndCompanyId(
		java.lang.String uuid, long companyId) {
		return _ddlRecordSetLocalService.getDDLRecordSetsByUuidAndCompanyId(uuid,
			companyId);
	}

	/**
	* Returns a range of d d l record sets matching the UUID and company.
	*
	* @param uuid the UUID of the d d l record sets
	* @param companyId the primary key of the company
	* @param start the lower bound of the range of d d l record sets
	* @param end the upper bound of the range of d d l record sets (not inclusive)
	* @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	* @return the range of matching d d l record sets, or an empty list if no matches were found
	*/
	@Override
	public java.util.List<com.liferay.dynamic.data.lists.model.DDLRecordSet> getDDLRecordSetsByUuidAndCompanyId(
		java.lang.String uuid, long companyId, int start, int end,
		com.liferay.portal.kernel.util.OrderByComparator<com.liferay.dynamic.data.lists.model.DDLRecordSet> orderByComparator) {
		return _ddlRecordSetLocalService.getDDLRecordSetsByUuidAndCompanyId(uuid,
			companyId, start, end, orderByComparator);
	}

	/**
	* Returns all the record sets belonging the group.
	*
	* @return the record sets belonging to the group
	*/
	@Override
	public java.util.List<com.liferay.dynamic.data.lists.model.DDLRecordSet> getRecordSets(
		long groupId) {
		return _ddlRecordSetLocalService.getRecordSets(groupId);
	}

	/**
	* Returns a range of all record sets matching the parameters, including a
	* keywords parameter for matching string values to the record set's name or
	* description.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end -
	* start</code> instances. <code>start</code> and <code>end</code> are not
	* primary keys, they are indexes in the result set. Thus, <code>0</code>
	* refers to the first result in the set. Setting both <code>start</code>
	* and <code>end</code> to <code>QueryUtil.ALL_POS</code> will return the
	* full result set.
	* </p>
	*
	* @param companyId the primary key of the record set's company
	* @param groupId the primary key of the record set's group
	* @param keywords the keywords (space separated) to look for and match in
	the record set name or description (optionally
	<code>null</code>). If the keywords value is not
	<code>null</code>, the search uses the OR operator in connecting
	query criteria; otherwise it uses the AND operator.
	* @param scope the record set's scope. A constant used to scope the record
	set's data. For more information search the
	<code>dynamic.data.lists.api</code> module's
	<code>DDLRecordSetConstants</code> class for constants prefixed
	with "SCOPE_".
	* @param start the lower bound of the range of record sets to return
	* @param end the upper bound of the range of recor sets to return (not
	inclusive)
	* @param orderByComparator the comparator to order the record sets
	* @return the range of matching record sets ordered by the comparator
	*/
	@Override
	public java.util.List<com.liferay.dynamic.data.lists.model.DDLRecordSet> search(
		long companyId, long groupId, java.lang.String keywords, int scope,
		int start, int end,
		com.liferay.portal.kernel.util.OrderByComparator<com.liferay.dynamic.data.lists.model.DDLRecordSet> orderByComparator) {
		return _ddlRecordSetLocalService.search(companyId, groupId, keywords,
			scope, start, end, orderByComparator);
	}

	/**
	* Returns an ordered range of record sets. Company ID and group ID must be
	* matched. If the and operator is set to <code>true</code>, only record
	* sets with a matching name, description, and scope are returned. If the
	* and operator is set to <code>false</code>, only one parameter of name,
	* description, and scope is needed to return matching record sets.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end -
	* start</code> instances. <code>start</code> and <code>end</code> are not
	* primary keys, they are indexes in the result set. Thus, <code>0</code>
	* refers to the first result in the set. Setting both <code>start</code>
	* and <code>end</code> to <code>QueryUtil.ALL_POS</code> will return the
	* full result set.
	* </p>
	*
	* @param companyId the primary key of the record set's company
	* @param groupId the primary key of the record set's group
	* @param name the name keywords (space separated, optionally
	<code>null</code>)
	* @param description the description keywords (space separated, optionally
	<code>null</code>)
	* @param scope the record set's scope. A constant used to scope the record
	set's data. For more information search the
	<code>dynamic.data.lists.api</code> module's
	<code>DDLRecordSetConstants</code> class for constants prefixed
	with "SCOPE_".
	* @param andOperator whether every field must match its value or keywords,
	or just one field must match. Company and group must match their
	values.
	* @param start the lower bound of the range of record sets to return
	* @param end the upper bound of the range of recor sets to return (not
	inclusive)
	* @param orderByComparator the comparator to order the record sets
	* @return the range of matching record sets ordered by the comparator
	*/
	@Override
	public java.util.List<com.liferay.dynamic.data.lists.model.DDLRecordSet> search(
		long companyId, long groupId, java.lang.String name,
		java.lang.String description, int scope, boolean andOperator,
		int start, int end,
		com.liferay.portal.kernel.util.OrderByComparator<com.liferay.dynamic.data.lists.model.DDLRecordSet> orderByComparator) {
		return _ddlRecordSetLocalService.search(companyId, groupId, name,
			description, scope, andOperator, start, end, orderByComparator);
	}

	/**
	* Returns the number of rows matching the dynamic query.
	*
	* @param dynamicQuery the dynamic query
	* @return the number of rows matching the dynamic query
	*/
	@Override
	public long dynamicQueryCount(
		com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery) {
		return _ddlRecordSetLocalService.dynamicQueryCount(dynamicQuery);
	}

	/**
	* Returns the number of rows matching the dynamic query.
	*
	* @param dynamicQuery the dynamic query
	* @param projection the projection to apply to the query
	* @return the number of rows matching the dynamic query
	*/
	@Override
	public long dynamicQueryCount(
		com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery,
		com.liferay.portal.kernel.dao.orm.Projection projection) {
		return _ddlRecordSetLocalService.dynamicQueryCount(dynamicQuery,
			projection);
	}

	/**
	* Adds the resources to the record set.
	*
	* @param recordSet the record set
	* @param addGroupPermissions whether to add group permissions
	* @param addGuestPermissions whether to add guest permissions
	* @throws PortalException if a portal exception occurred
	*/
	@Override
	public void addRecordSetResources(
		com.liferay.dynamic.data.lists.model.DDLRecordSet recordSet,
		boolean addGroupPermissions, boolean addGuestPermissions)
		throws com.liferay.portal.kernel.exception.PortalException {
		_ddlRecordSetLocalService.addRecordSetResources(recordSet,
			addGroupPermissions, addGuestPermissions);
	}

	/**
	* Adds the model resources with the permissions to the record set.
	*
	* @param recordSet the record set
	* @param groupPermissions whether to add group permissions
	* @param guestPermissions whether to add guest permissions
	* @throws PortalException if a portal exception occurred
	*/
	@Override
	public void addRecordSetResources(
		com.liferay.dynamic.data.lists.model.DDLRecordSet recordSet,
		java.lang.String[] groupPermissions, java.lang.String[] guestPermissions)
		throws com.liferay.portal.kernel.exception.PortalException {
		_ddlRecordSetLocalService.addRecordSetResources(recordSet,
			groupPermissions, guestPermissions);
	}

	/**
	* Deletes the record set and its resources.
	*
	* @param recordSet the record set to be deleted
	* @throws PortalException if a portal exception occurred
	*/
	@Override
	public void deleteRecordSet(
		com.liferay.dynamic.data.lists.model.DDLRecordSet recordSet)
		throws com.liferay.portal.kernel.exception.PortalException {
		_ddlRecordSetLocalService.deleteRecordSet(recordSet);
	}

	/**
	* Deletes the record set and its resources.
	*
	* <p>
	* This operation updates the record set matching the group and
	* recordSetKey.
	* </p>
	*
	* @param groupId the primary key of the record set's group
	* @param recordSetKey the record set's mnemonic primary key
	* @throws PortalException if a portal exception occurred
	*/
	@Override
	public void deleteRecordSet(long groupId, java.lang.String recordSetKey)
		throws com.liferay.portal.kernel.exception.PortalException {
		_ddlRecordSetLocalService.deleteRecordSet(groupId, recordSetKey);
	}

	/**
	* Deletes the record set and its resources.
	*
	* @param recordSetId the primary key of the record set to be deleted
	* @throws PortalException if a portal exception occurred
	*/
	@Override
	public void deleteRecordSet(long recordSetId)
		throws com.liferay.portal.kernel.exception.PortalException {
		_ddlRecordSetLocalService.deleteRecordSet(recordSetId);
	}

	/**
	* Deletes all the record sets matching the group.
	*
	* @param groupId the primary key of the record set's group
	* @throws PortalException if a portal exception occurred
	*/
	@Override
	public void deleteRecordSets(long groupId)
		throws com.liferay.portal.kernel.exception.PortalException {
		_ddlRecordSetLocalService.deleteRecordSets(groupId);
	}

	@Override
	public DDLRecordSetLocalService getWrappedService() {
		return _ddlRecordSetLocalService;
	}

	@Override
	public void setWrappedService(
		DDLRecordSetLocalService ddlRecordSetLocalService) {
		_ddlRecordSetLocalService = ddlRecordSetLocalService;
	}

	private DDLRecordSetLocalService _ddlRecordSetLocalService;
}
<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
List<AssetRendererFactory<?>> availableAssetRendererFactories = ListUtil.filter(
	AssetRendererFactoryRegistryUtil.getAssetRendererFactories(company.getCompanyId()),
	new PredicateFilter<AssetRendererFactory<?>>() {

		@Override
		public boolean filter(AssetRendererFactory<?> assetRendererFactory) {
			return assetRendererFactory.isCategorizable();
		}

	});

List<AssetRendererFactory<?>> classTypedAssetRendererFactories = ListUtil.filter(
	availableAssetRendererFactories,
	new PredicateFilter<AssetRendererFactory<?>>() {

		@Override
		public boolean filter(AssetRendererFactory<?> assetRendererFactory) {
			return assetRendererFactory.isSupportsClassTypes();
		}

	});

long[] selectedClassNameIds = AssetVocabularySettingsHelper.DEFAULT_SELECTED_CLASSNAME_IDS;
long[] selectedClassTypePKs = AssetVocabularySettingsHelper.DEFAULT_SELECTED_CLASSTYPE_PKS;

if (vocabulary != null) {
	selectedClassNameIds = vocabulary.getSelectedClassNameIds();
	selectedClassTypePKs = vocabulary.getSelectedClassTypePKs();
}
%>

<aui:fieldset collapsed="<%= true %>" collapsible="<%= true %>" id="extraFields" label="associated-asset-types">

	<%
	List<String> indexes = new ArrayList<String>();

	for (int index = 0; index < selectedClassNameIds.length; index++) {
		indexes.add(String.valueOf(index));

		long classNameId = selectedClassNameIds[index];
		long classTypePK = selectedClassTypePKs[index];
	%>

		<div class="lfr-form-row lfr-form-row-inline">
			<div class="row-fields">
				<aui:select cssClass="vocabulary-asset-type-select" inlineField="<%= true %>" label="choose-asset-type" name='<%= "classNameId" + index %>'>
					<aui:option label="all-asset-types" value="<%= AssetCategoryConstants.ALL_CLASS_NAME_ID %>" />

					<%
					for (AssetRendererFactory<?> assetRendererFactory : availableAssetRendererFactories) {
					%>

						<aui:option label="<%= ResourceActionsUtil.getModelResource(locale, assetRendererFactory.getClassName()) %>" selected="<%= classNameId == assetRendererFactory.getClassNameId() %>" value="<%= assetRendererFactory.getClassNameId() %>" />

					<%
					}
					%>

				</aui:select>

				<%
				for (AssetRendererFactory<?> assetRendererFactory : classTypedAssetRendererFactories) {
				%>

					<aui:select inlineField="<%= true %>" label="" name='<%= "subtype" + assetRendererFactory.getClassNameId() + "-classNameId" + index %>' wrapperCssClass='<%= (classNameId != assetRendererFactory.getClassNameId() ? "hide " : "") + "subtype-select" %>'>
						<aui:option label="all-asset-subtypes" selected="<%= false %>" value="<%= AssetCategoryConstants.ALL_CLASS_TYPE_PK %>" />

						<%
						ClassTypeReader classTypeReader = assetRendererFactory.getClassTypeReader();

						List<ClassType> classTypes = classTypeReader.getAvailableClassTypes(new long[] {themeDisplay.getCompanyGroupId(), scopeGroupId}, themeDisplay.getLocale());

						if (classTypes.isEmpty()) {
							continue;
						}

						for (ClassType classType : classTypes) {
						%>

							<aui:option label="<%= classType.getName() %>" selected="<%= (classNameId == assetRendererFactory.getClassNameId()) && (classTypePK == (classType.getClassTypeId())) %>" value="<%= classType.getClassTypeId() %>" />

						<%
						}
						%>

					</aui:select>

				<%
				}
				%>

				<aui:input label="required" name='<%= "required" + index %>' type="toggle-switch" value="<%= (vocabulary != null) ? vocabulary.isRequired(classNameId, classTypePK) : false %>" />
			</div>
		</div>

	<%
	}
	%>

	<aui:input name="indexes" type="hidden" value="<%= indexes.toString() %>" />
</aui:fieldset>

<aui:script use="liferay-auto-fields">
	var extraFields = A.one('#<portlet:namespace />extraFields');

	var autoFields = new Liferay.AutoFields(
		{
			contentBox: '#<portlet:namespace />extraFields',
			fieldIndexes: '<portlet:namespace />indexes',
			namespace: '<portlet:namespace />',
			on: {
				clone: function(event) {
					event.row.all('.subtype-select').hide();
				}
			}
		}
	).render();

	extraFields.setData('autoFieldsInstance', autoFields);

	var form = A.one('#<portlet:namespace />fm');

	form.delegate(
		'change',
		function(event) {
			var target = event.currentTarget;

			var row = target.ancestor('.lfr-form-row');

			row.all('.subtype-select').hide();

			var select = row.one('[name*=subtype' + target.val() + ']');

			if (select) {
				select.ancestor('.subtype-select').show();
			}
		},
		'.vocabulary-asset-type-select'
	);
</aui:script>